{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+3ee336b", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),\n        groups=32,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../dataset/train.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../dataset/train.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../dataset/test.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/final7'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "final7.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0001, "memory": 12617, "data_time": 0.05609, "loss_rpn_cls": 210.59793, "loss_rpn_bbox": 2.18531, "s0.loss_cls": 1.75573, "s0.acc": 81.88379, "s0.loss_bbox": 0.43913, "s1.loss_cls": 1.07629, "s1.acc": 81.34863, "s1.loss_bbox": 0.12556, "s2.loss_cls": 0.57405, "s2.acc": 79.70996, "s2.loss_bbox": 0.05717, "loss": 216.81116, "time": 1.15933}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0002, "memory": 12617, "data_time": 0.01066, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 26.32761, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 26.89907, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 26.74521, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.98037}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0003, "memory": 12617, "data_time": 0.00992, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 21.08045, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 21.08045, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 21.08045, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96529}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0004, "memory": 12617, "data_time": 0.00977, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.21054, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.21054, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.21054, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96532}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0005, "memory": 12617, "data_time": 0.0098, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.1358, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.1358, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.1358, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96715}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0006, "memory": 12617, "data_time": 0.00989, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.02228, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.02228, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.02228, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96193}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0007, "memory": 12617, "data_time": 0.00987, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.54874, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.54874, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.54874, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96222}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0008, "memory": 12617, "data_time": 0.00999, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.95286, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.95286, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.95286, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96189}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0009, "memory": 12617, "data_time": 0.00998, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.77794, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.77794, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.77794, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.95998}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 12617, "data_time": 0.01024, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.58088, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.58088, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.58088, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96343}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 12617, "data_time": 0.01008, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.81164, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.81164, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.81164, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96179}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 12617, "data_time": 0.01008, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.73019, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.73019, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.73019, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96252}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 12617, "data_time": 0.01016, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.17405, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.17405, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.17405, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.9614}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 12617, "data_time": 0.01031, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.77241, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.77241, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.77241, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96116}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 12617, "data_time": 0.01031, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.04592, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.04592, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.04592, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96143}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 12617, "data_time": 0.01027, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.85295, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.85295, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.85295, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96292}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 12617, "data_time": 0.0102, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.78401, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.78401, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.78401, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96338}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 12617, "data_time": 0.01016, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.0495, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.0495, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.0495, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96087}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 12617, "data_time": 0.01064, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.76588, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.76588, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.76588, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96335}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 12617, "data_time": 0.01054, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.96174, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.96174, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.96174, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96295}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 12617, "data_time": 0.01062, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 21.46582, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 21.46582, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 21.46582, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96237}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 12617, "data_time": 0.01031, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.97559, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.97559, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.97559, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96387}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 12617, "data_time": 0.01043, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.21825, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.21825, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.21825, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96383}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 12617, "data_time": 0.01082, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.71511, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.71511, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.71511, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96443}
{"mode": "val", "epoch": 1, "iter": 4883, "lr": 0.001}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.001, "memory": 12617, "data_time": 0.05601, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.66949, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.66949, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.66949, "s2.loss_bbox": NaN, "loss": NaN, "time": 1.0089}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.001, "memory": 12617, "data_time": 0.01049, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.96694, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.96694, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.96694, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.9622}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.001, "memory": 12617, "data_time": 0.01053, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.15151, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.15151, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.15151, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96521}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.001, "memory": 12617, "data_time": 0.01059, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 27.26459, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 27.26459, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 27.26459, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96465}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.001, "memory": 12617, "data_time": 0.01016, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.22753, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.22753, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.22753, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96176}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.001, "memory": 12617, "data_time": 0.01053, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.73029, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.73029, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.73029, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96415}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.001, "memory": 12617, "data_time": 0.01051, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.44262, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.44262, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.44262, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96158}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.001, "memory": 12617, "data_time": 0.01043, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.84247, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.84247, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.84247, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96097}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.001, "memory": 12617, "data_time": 0.01065, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.59981, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.59981, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.59981, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96156}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.001, "memory": 12617, "data_time": 0.01107, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.93187, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.93187, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.93187, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96355}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.001, "memory": 12617, "data_time": 0.01054, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.30248, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.30248, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.30248, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96302}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.001, "memory": 12617, "data_time": 0.01056, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 22.71116, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 22.71116, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 22.71116, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96242}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.001, "memory": 12617, "data_time": 0.01062, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 19.40988, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 19.40988, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 19.40988, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96471}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.001, "memory": 12617, "data_time": 0.01051, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.86678, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.86678, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.86678, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96347}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.001, "memory": 12617, "data_time": 0.01063, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.53054, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.53054, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.53054, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96318}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.001, "memory": 12617, "data_time": 0.01053, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.12912, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.12912, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.12912, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.9621}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.001, "memory": 12617, "data_time": 0.01056, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.03179, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.03179, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.03179, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96265}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.001, "memory": 12617, "data_time": 0.01066, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.5355, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.5355, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.5355, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96247}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.001, "memory": 12617, "data_time": 0.01054, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.49432, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.49432, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.49432, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96246}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.001, "memory": 12617, "data_time": 0.01063, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.00502, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.00502, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.00502, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96298}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.001, "memory": 12617, "data_time": 0.01069, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.61897, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.61897, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.61897, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.9659}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.001, "memory": 12617, "data_time": 0.01073, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 20.71959, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 20.71959, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 20.71959, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96372}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.001, "memory": 12617, "data_time": 0.01101, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.86807, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.86807, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.86807, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96348}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.001, "memory": 12617, "data_time": 0.011, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.14631, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.14631, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.14631, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.96354}
{"mode": "val", "epoch": 2, "iter": 4883, "lr": 0.001}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.001, "memory": 12632, "data_time": 0.05597, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 14.8174, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 14.8174, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 14.8174, "s2.loss_bbox": NaN, "loss": NaN, "time": 1.00836}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.001, "memory": 12632, "data_time": 0.01066, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.68076, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.68076, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.68076, "s2.loss_bbox": NaN, "loss": NaN, "time": 0.967}
