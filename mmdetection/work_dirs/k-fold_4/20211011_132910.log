2021-10-11 04:29:11,000 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+6eb41ac
------------------------------------------------------------

2021-10-11 04:29:11,541 - mmdet - INFO - Distributed training: False
2021-10-11 04:29:12,089 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
train_json = 'train_4.json'
val_json = 'val_4.json'
test_json = 'test.json'
img_norm_cfg = dict(
    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.651, 117.4, 110.08],
        std=[54.035, 53.37, 54.784],
        to_rgb=True),
    dict(type='Resize', img_scale=(2048, 2048), keep_ratio=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.651, 117.4, 110.08],
                std=[54.035, 53.37, 54.784],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_4.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.651, 117.4, 110.08],
                std=[54.035, 53.37, 54.784],
                to_rgb=True),
            dict(type='Resize', img_scale=(2048, 2048), keep_ratio=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_4.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.651, 117.4, 110.08],
                        std=[54.035, 53.37, 54.784],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.651, 117.4, 110.08],
                        std=[54.035, 53.37, 54.784],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
index = 4
wandb_runname = 'mmdet_K-Fold_4'
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            interval=1000,
            init_kwargs=dict(
                project='garbage_ObjectDetection',
                entity='falling90',
                name='mmdet_K-Fold_4'))
    ])
work_dir = './work_dirs/k-fold_4'
gpu_ids = range(0, 1)

2021-10-11 04:29:12,896 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2021-10-11 04:29:13,148 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-11 04:29:13,175 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-11 04:29:13,184 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-11 04:29:13,508 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-11 04:29:13,830 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([5, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([20, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([20]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-11 04:29:17,755 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/k-fold_4
2021-10-11 04:29:17,756 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-11 04:29:17,756 - mmdet - INFO - workflow: [('train', 1)], max: 30 epochs
2021-10-11 04:31:03,434 - mmdet - INFO - Epoch [1][50/978]	lr: 1.978e-03, eta: 16:04:26, time: 1.976, data_time: 0.084, memory: 26415, loss_rpn_cls: 0.4346, loss_rpn_bbox: 0.0786, s0.loss_cls: 0.4667, s0.acc: 90.2373, s0.loss_bbox: 0.0700, s1.loss_cls: 0.2645, s1.acc: 87.9023, s1.loss_bbox: 0.0181, s2.loss_cls: 0.1644, s2.acc: 83.2930, s2.loss_bbox: 0.0041, loss: 1.5010
2021-10-11 04:32:38,784 - mmdet - INFO - Epoch [1][100/978]	lr: 3.976e-03, eta: 15:46:03, time: 1.907, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.1178, loss_rpn_bbox: 0.0651, s0.loss_cls: 0.2603, s0.acc: 95.5098, s0.loss_bbox: 0.1005, s1.loss_cls: 0.0796, s1.acc: 97.7031, s1.loss_bbox: 0.0319, s2.loss_cls: 0.0263, s2.acc: 98.6631, s2.loss_bbox: 0.0049, loss: 0.6863
2021-10-11 04:34:12,971 - mmdet - INFO - Epoch [1][150/978]	lr: 5.974e-03, eta: 15:35:06, time: 1.884, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0874, loss_rpn_bbox: 0.0640, s0.loss_cls: 0.2085, s0.acc: 95.8301, s0.loss_bbox: 0.0862, s1.loss_cls: 0.0683, s1.acc: 97.4854, s1.loss_bbox: 0.0375, s2.loss_cls: 0.0229, s2.acc: 98.5723, s2.loss_bbox: 0.0072, loss: 0.5820
2021-10-11 04:35:45,309 - mmdet - INFO - Epoch [1][200/978]	lr: 7.972e-03, eta: 15:24:21, time: 1.847, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0664, loss_rpn_bbox: 0.0570, s0.loss_cls: 0.2783, s0.acc: 94.3398, s0.loss_bbox: 0.1211, s1.loss_cls: 0.0977, s1.acc: 96.4375, s1.loss_bbox: 0.0567, s2.loss_cls: 0.0313, s2.acc: 98.0068, s2.loss_bbox: 0.0125, loss: 0.7210
2021-10-11 04:37:18,425 - mmdet - INFO - Epoch [1][250/978]	lr: 9.970e-03, eta: 15:18:47, time: 1.862, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0696, loss_rpn_bbox: 0.0587, s0.loss_cls: 0.2346, s0.acc: 95.9502, s0.loss_bbox: 0.0890, s1.loss_cls: 0.0703, s1.acc: 97.8057, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0229, s2.acc: 98.7129, s2.loss_bbox: 0.0057, loss: 0.5821
2021-10-11 04:38:54,699 - mmdet - INFO - Epoch [1][300/978]	lr: 1.197e-02, eta: 15:19:40, time: 1.925, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0663, loss_rpn_bbox: 0.0701, s0.loss_cls: 0.3125, s0.acc: 93.4844, s0.loss_bbox: 0.1425, s1.loss_cls: 0.1033, s1.acc: 96.1270, s1.loss_bbox: 0.0609, s2.loss_cls: 0.0342, s2.acc: 97.8350, s2.loss_bbox: 0.0130, loss: 0.8028
2021-10-11 04:40:29,045 - mmdet - INFO - Epoch [1][350/978]	lr: 1.397e-02, eta: 15:17:10, time: 1.887, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0626, loss_rpn_bbox: 0.0705, s0.loss_cls: 0.3376, s0.acc: 92.6953, s0.loss_bbox: 0.1450, s1.loss_cls: 0.1225, s1.acc: 95.1113, s1.loss_bbox: 0.0770, s2.loss_cls: 0.0412, s2.acc: 97.0430, s2.loss_bbox: 0.0216, loss: 0.8779
2021-10-11 04:42:07,030 - mmdet - INFO - Epoch [1][400/978]	lr: 1.596e-02, eta: 15:19:17, time: 1.960, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0551, loss_rpn_bbox: 0.0483, s0.loss_cls: 0.2604, s0.acc: 94.6533, s0.loss_bbox: 0.1110, s1.loss_cls: 0.0984, s1.acc: 96.2559, s1.loss_bbox: 0.0586, s2.loss_cls: 0.0328, s2.acc: 97.7295, s2.loss_bbox: 0.0169, loss: 0.6815
2021-10-11 04:43:41,891 - mmdet - INFO - Epoch [1][450/978]	lr: 1.796e-02, eta: 15:17:14, time: 1.897, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0611, loss_rpn_bbox: 0.0566, s0.loss_cls: 0.3108, s0.acc: 93.5273, s0.loss_bbox: 0.1320, s1.loss_cls: 0.1130, s1.acc: 95.3604, s1.loss_bbox: 0.0712, s2.loss_cls: 0.0399, s2.acc: 96.9844, s2.loss_bbox: 0.0227, loss: 0.8072
2021-10-11 04:45:18,461 - mmdet - INFO - Epoch [1][500/978]	lr: 1.996e-02, eta: 15:16:55, time: 1.931, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0603, loss_rpn_bbox: 0.0583, s0.loss_cls: 0.3220, s0.acc: 93.6982, s0.loss_bbox: 0.1249, s1.loss_cls: 0.1202, s1.acc: 95.4932, s1.loss_bbox: 0.0676, s2.loss_cls: 0.0426, s2.acc: 96.9980, s2.loss_bbox: 0.0215, loss: 0.8173
2021-10-11 04:46:55,117 - mmdet - INFO - Epoch [1][550/978]	lr: 2.000e-02, eta: 15:16:26, time: 1.933, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0890, loss_rpn_bbox: 0.0562, s0.loss_cls: 0.2330, s0.acc: 96.0371, s0.loss_bbox: 0.0834, s1.loss_cls: 0.0732, s1.acc: 97.6621, s1.loss_bbox: 0.0330, s2.loss_cls: 0.0247, s2.acc: 98.5732, s2.loss_bbox: 0.0066, loss: 0.5991
2021-10-11 04:48:29,549 - mmdet - INFO - Epoch [1][600/978]	lr: 2.000e-02, eta: 15:14:00, time: 1.889, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0699, loss_rpn_bbox: 0.0762, s0.loss_cls: 0.3057, s0.acc: 93.5156, s0.loss_bbox: 0.1281, s1.loss_cls: 0.1139, s1.acc: 95.1992, s1.loss_bbox: 0.0698, s2.loss_cls: 0.0424, s2.acc: 96.6396, s2.loss_bbox: 0.0236, loss: 0.8296
2021-10-11 04:50:05,742 - mmdet - INFO - Epoch [1][650/978]	lr: 2.000e-02, eta: 15:12:59, time: 1.924, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0644, loss_rpn_bbox: 0.0552, s0.loss_cls: 0.2928, s0.acc: 94.1025, s0.loss_bbox: 0.1119, s1.loss_cls: 0.1124, s1.acc: 95.5059, s1.loss_bbox: 0.0667, s2.loss_cls: 0.0411, s2.acc: 96.8799, s2.loss_bbox: 0.0229, loss: 0.7672
2021-10-11 04:51:41,933 - mmdet - INFO - Epoch [1][700/978]	lr: 2.000e-02, eta: 15:11:53, time: 1.924, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0589, loss_rpn_bbox: 0.0567, s0.loss_cls: 0.3124, s0.acc: 93.3604, s0.loss_bbox: 0.1260, s1.loss_cls: 0.1232, s1.acc: 94.7559, s1.loss_bbox: 0.0784, s2.loss_cls: 0.0461, s2.acc: 96.2021, s2.loss_bbox: 0.0276, loss: 0.8294
2021-10-11 04:53:17,222 - mmdet - INFO - Epoch [1][750/978]	lr: 2.000e-02, eta: 15:10:09, time: 1.906, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0568, loss_rpn_bbox: 0.0682, s0.loss_cls: 0.3629, s0.acc: 91.6689, s0.loss_bbox: 0.1597, s1.loss_cls: 0.1467, s1.acc: 93.4116, s1.loss_bbox: 0.0993, s2.loss_cls: 0.0557, s2.acc: 95.3087, s2.loss_bbox: 0.0357, loss: 0.9850
2021-10-11 04:54:54,389 - mmdet - INFO - Epoch [1][800/978]	lr: 2.000e-02, eta: 15:09:33, time: 1.943, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0506, loss_rpn_bbox: 0.0538, s0.loss_cls: 0.2934, s0.acc: 93.3936, s0.loss_bbox: 0.1171, s1.loss_cls: 0.1221, s1.acc: 94.5000, s1.loss_bbox: 0.0787, s2.loss_cls: 0.0475, s2.acc: 95.9766, s2.loss_bbox: 0.0296, loss: 0.7929
2021-10-11 04:56:30,608 - mmdet - INFO - Epoch [1][850/978]	lr: 2.000e-02, eta: 15:08:17, time: 1.924, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0499, loss_rpn_bbox: 0.0652, s0.loss_cls: 0.3260, s0.acc: 92.3389, s0.loss_bbox: 0.1327, s1.loss_cls: 0.1414, s1.acc: 93.2617, s1.loss_bbox: 0.0945, s2.loss_cls: 0.0558, s2.acc: 94.7930, s2.loss_bbox: 0.0379, loss: 0.9035
2021-10-11 04:58:04,361 - mmdet - INFO - Epoch [1][900/978]	lr: 2.000e-02, eta: 15:05:42, time: 1.875, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0424, loss_rpn_bbox: 0.0525, s0.loss_cls: 0.3055, s0.acc: 92.9346, s0.loss_bbox: 0.1257, s1.loss_cls: 0.1316, s1.acc: 93.8926, s1.loss_bbox: 0.0887, s2.loss_cls: 0.0511, s2.acc: 95.4639, s2.loss_bbox: 0.0350, loss: 0.8325
2021-10-11 04:59:40,763 - mmdet - INFO - Epoch [1][950/978]	lr: 2.000e-02, eta: 15:04:32, time: 1.928, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0398, loss_rpn_bbox: 0.0563, s0.loss_cls: 0.3294, s0.acc: 92.5771, s0.loss_bbox: 0.1299, s1.loss_cls: 0.1430, s1.acc: 93.4449, s1.loss_bbox: 0.0962, s2.loss_cls: 0.0558, s2.acc: 94.9666, s2.loss_bbox: 0.0373, loss: 0.8878
2021-10-11 05:00:30,910 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-11 05:01:46,064 - mmdet - INFO - Evaluating bbox...
2021-10-11 05:01:51,324 - mmdet - INFO - Exp name: k-fold_4.py
2021-10-11 05:01:51,326 - mmdet - INFO - Epoch(val) [1][971]	bbox_mAP: 0.0450, bbox_mAP_50: 0.0850, bbox_mAP_75: 0.0440, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0030, bbox_mAP_l: 0.0570, bbox_mAP_copypaste: 0.045 0.085 0.044 0.000 0.003 0.057
2021-10-11 05:03:27,559 - mmdet - INFO - Epoch [2][50/978]	lr: 2.000e-02, eta: 14:37:36, time: 1.917, data_time: 0.082, memory: 26415, loss_rpn_cls: 0.0503, loss_rpn_bbox: 0.0642, s0.loss_cls: 0.3363, s0.acc: 91.8340, s0.loss_bbox: 0.1379, s1.loss_cls: 0.1503, s1.acc: 92.4877, s1.loss_bbox: 0.1071, s2.loss_cls: 0.0607, s2.acc: 94.1628, s2.loss_bbox: 0.0443, loss: 0.9511
2021-10-11 05:05:01,785 - mmdet - INFO - Epoch [2][100/978]	lr: 2.000e-02, eta: 14:36:35, time: 1.885, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0498, loss_rpn_bbox: 0.0591, s0.loss_cls: 0.3163, s0.acc: 92.5996, s0.loss_bbox: 0.1236, s1.loss_cls: 0.1434, s1.acc: 93.2529, s1.loss_bbox: 0.0912, s2.loss_cls: 0.0578, s2.acc: 94.6777, s2.loss_bbox: 0.0381, loss: 0.8793
2021-10-11 05:06:37,532 - mmdet - INFO - Epoch [2][150/978]	lr: 2.000e-02, eta: 14:36:09, time: 1.915, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0459, loss_rpn_bbox: 0.0559, s0.loss_cls: 0.2830, s0.acc: 93.1201, s0.loss_bbox: 0.1133, s1.loss_cls: 0.1275, s1.acc: 93.5311, s1.loss_bbox: 0.0875, s2.loss_cls: 0.0540, s2.acc: 94.6502, s2.loss_bbox: 0.0400, loss: 0.8072
2021-10-11 05:08:11,758 - mmdet - INFO - Epoch [2][200/978]	lr: 2.000e-02, eta: 14:35:01, time: 1.884, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0568, loss_rpn_bbox: 0.0617, s0.loss_cls: 0.3186, s0.acc: 92.3721, s0.loss_bbox: 0.1242, s1.loss_cls: 0.1390, s1.acc: 93.2742, s1.loss_bbox: 0.0902, s2.loss_cls: 0.0548, s2.acc: 94.8936, s2.loss_bbox: 0.0354, loss: 0.8808
2021-10-11 05:09:48,830 - mmdet - INFO - Epoch [2][250/978]	lr: 2.000e-02, eta: 14:34:57, time: 1.941, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0433, loss_rpn_bbox: 0.0540, s0.loss_cls: 0.2784, s0.acc: 93.5039, s0.loss_bbox: 0.1030, s1.loss_cls: 0.1292, s1.acc: 93.6866, s1.loss_bbox: 0.0804, s2.loss_cls: 0.0543, s2.acc: 94.7281, s2.loss_bbox: 0.0360, loss: 0.7785
2021-10-11 05:11:21,382 - mmdet - INFO - Epoch [2][300/978]	lr: 2.000e-02, eta: 14:33:05, time: 1.851, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0469, loss_rpn_bbox: 0.0558, s0.loss_cls: 0.2916, s0.acc: 92.6650, s0.loss_bbox: 0.1165, s1.loss_cls: 0.1359, s1.acc: 93.0392, s1.loss_bbox: 0.0898, s2.loss_cls: 0.0585, s2.acc: 94.1246, s2.loss_bbox: 0.0403, loss: 0.8353
2021-10-11 05:12:58,898 - mmdet - INFO - Epoch [2][350/978]	lr: 2.000e-02, eta: 14:33:00, time: 1.950, data_time: 0.040, memory: 26415, loss_rpn_cls: 0.0404, loss_rpn_bbox: 0.0502, s0.loss_cls: 0.3013, s0.acc: 92.8359, s0.loss_bbox: 0.1142, s1.loss_cls: 0.1398, s1.acc: 93.2405, s1.loss_bbox: 0.0872, s2.loss_cls: 0.0586, s2.acc: 94.2884, s2.loss_bbox: 0.0375, loss: 0.8292
2021-10-11 05:14:32,347 - mmdet - INFO - Epoch [2][400/978]	lr: 2.000e-02, eta: 14:31:26, time: 1.869, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0512, loss_rpn_bbox: 0.0551, s0.loss_cls: 0.3253, s0.acc: 92.3154, s0.loss_bbox: 0.1262, s1.loss_cls: 0.1448, s1.acc: 93.0514, s1.loss_bbox: 0.0947, s2.loss_cls: 0.0598, s2.acc: 94.3102, s2.loss_bbox: 0.0414, loss: 0.8986
2021-10-11 05:16:08,801 - mmdet - INFO - Epoch [2][450/978]	lr: 2.000e-02, eta: 14:30:50, time: 1.929, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0456, loss_rpn_bbox: 0.0557, s0.loss_cls: 0.3050, s0.acc: 93.0361, s0.loss_bbox: 0.1156, s1.loss_cls: 0.1351, s1.acc: 93.6897, s1.loss_bbox: 0.0850, s2.loss_cls: 0.0560, s2.acc: 94.8744, s2.loss_bbox: 0.0381, loss: 0.8360
2021-10-11 05:17:43,577 - mmdet - INFO - Epoch [2][500/978]	lr: 2.000e-02, eta: 14:29:38, time: 1.895, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0387, loss_rpn_bbox: 0.0461, s0.loss_cls: 0.3022, s0.acc: 92.7812, s0.loss_bbox: 0.1092, s1.loss_cls: 0.1411, s1.acc: 92.9274, s1.loss_bbox: 0.0904, s2.loss_cls: 0.0597, s2.acc: 94.0096, s2.loss_bbox: 0.0429, loss: 0.8304
2021-10-11 05:19:18,399 - mmdet - INFO - Epoch [2][550/978]	lr: 2.000e-02, eta: 14:28:26, time: 1.896, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0447, loss_rpn_bbox: 0.0595, s0.loss_cls: 0.3284, s0.acc: 91.5234, s0.loss_bbox: 0.1316, s1.loss_cls: 0.1545, s1.acc: 91.8570, s1.loss_bbox: 0.1050, s2.loss_cls: 0.0673, s2.acc: 93.0489, s2.loss_bbox: 0.0485, loss: 0.9396
2021-10-11 05:20:52,879 - mmdet - INFO - Epoch [2][600/978]	lr: 2.000e-02, eta: 14:27:07, time: 1.890, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0442, loss_rpn_bbox: 0.0563, s0.loss_cls: 0.3036, s0.acc: 91.8584, s0.loss_bbox: 0.1304, s1.loss_cls: 0.1440, s1.acc: 92.0240, s1.loss_bbox: 0.1053, s2.loss_cls: 0.0620, s2.acc: 93.2472, s2.loss_bbox: 0.0473, loss: 0.8933
2021-10-11 05:22:29,837 - mmdet - INFO - Epoch [2][650/978]	lr: 2.000e-02, eta: 14:26:28, time: 1.939, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0422, loss_rpn_bbox: 0.0555, s0.loss_cls: 0.2908, s0.acc: 92.5869, s0.loss_bbox: 0.1124, s1.loss_cls: 0.1365, s1.acc: 92.8213, s1.loss_bbox: 0.0898, s2.loss_cls: 0.0587, s2.acc: 93.9011, s2.loss_bbox: 0.0406, loss: 0.8266
2021-10-11 05:24:03,666 - mmdet - INFO - Epoch [2][700/978]	lr: 2.000e-02, eta: 14:24:55, time: 1.877, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0462, loss_rpn_bbox: 0.0545, s0.loss_cls: 0.3291, s0.acc: 91.7578, s0.loss_bbox: 0.1305, s1.loss_cls: 0.1477, s1.acc: 92.4075, s1.loss_bbox: 0.0981, s2.loss_cls: 0.0611, s2.acc: 93.8052, s2.loss_bbox: 0.0423, loss: 0.9095
2021-10-11 05:25:37,958 - mmdet - INFO - Epoch [2][750/978]	lr: 2.000e-02, eta: 14:23:29, time: 1.886, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0477, loss_rpn_bbox: 0.0667, s0.loss_cls: 0.3276, s0.acc: 91.6016, s0.loss_bbox: 0.1415, s1.loss_cls: 0.1477, s1.acc: 92.3212, s1.loss_bbox: 0.1100, s2.loss_cls: 0.0615, s2.acc: 93.7481, s2.loss_bbox: 0.0480, loss: 0.9508
2021-10-11 05:27:13,852 - mmdet - INFO - Epoch [2][800/978]	lr: 2.000e-02, eta: 14:22:27, time: 1.918, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0333, loss_rpn_bbox: 0.0453, s0.loss_cls: 0.2782, s0.acc: 92.9512, s0.loss_bbox: 0.1083, s1.loss_cls: 0.1316, s1.acc: 93.1113, s1.loss_bbox: 0.0892, s2.loss_cls: 0.0561, s2.acc: 94.0059, s2.loss_bbox: 0.0409, loss: 0.7828
2021-10-11 05:28:46,169 - mmdet - INFO - Epoch [2][850/978]	lr: 2.000e-02, eta: 14:20:30, time: 1.846, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0348, loss_rpn_bbox: 0.0424, s0.loss_cls: 0.2655, s0.acc: 93.2256, s0.loss_bbox: 0.0968, s1.loss_cls: 0.1275, s1.acc: 93.1562, s1.loss_bbox: 0.0808, s2.loss_cls: 0.0570, s2.acc: 93.7368, s2.loss_bbox: 0.0411, loss: 0.7458
2021-10-11 05:30:22,241 - mmdet - INFO - Epoch [2][900/978]	lr: 2.000e-02, eta: 14:19:29, time: 1.921, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0356, loss_rpn_bbox: 0.0481, s0.loss_cls: 0.2798, s0.acc: 92.7871, s0.loss_bbox: 0.1093, s1.loss_cls: 0.1323, s1.acc: 93.0041, s1.loss_bbox: 0.0892, s2.loss_cls: 0.0593, s2.acc: 93.6361, s2.loss_bbox: 0.0427, loss: 0.7964
2021-10-11 05:31:55,021 - mmdet - INFO - Epoch [2][950/978]	lr: 2.000e-02, eta: 14:17:39, time: 1.856, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0394, loss_rpn_bbox: 0.0570, s0.loss_cls: 0.3062, s0.acc: 92.0439, s0.loss_bbox: 0.1209, s1.loss_cls: 0.1457, s1.acc: 92.1940, s1.loss_bbox: 0.0987, s2.loss_cls: 0.0644, s2.acc: 92.9756, s2.loss_bbox: 0.0466, loss: 0.8788
2021-10-11 05:32:48,037 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-10-11 05:34:03,821 - mmdet - INFO - Evaluating bbox...
2021-10-11 05:34:10,269 - mmdet - INFO - Exp name: k-fold_4.py
2021-10-11 05:34:10,270 - mmdet - INFO - Epoch(val) [2][971]	bbox_mAP: 0.0620, bbox_mAP_50: 0.1080, bbox_mAP_75: 0.0620, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0070, bbox_mAP_l: 0.0790, bbox_mAP_copypaste: 0.062 0.108 0.062 0.000 0.007 0.079
2021-10-11 05:35:46,647 - mmdet - INFO - Epoch [3][50/978]	lr: 2.000e-02, eta: 14:03:45, time: 1.920, data_time: 0.082, memory: 26415, loss_rpn_cls: 0.0383, loss_rpn_bbox: 0.0559, s0.loss_cls: 0.3195, s0.acc: 91.8096, s0.loss_bbox: 0.1257, s1.loss_cls: 0.1526, s1.acc: 91.9955, s1.loss_bbox: 0.1008, s2.loss_cls: 0.0670, s2.acc: 93.1141, s2.loss_bbox: 0.0478, loss: 0.9076
2021-10-11 05:37:22,806 - mmdet - INFO - Epoch [3][100/978]	lr: 2.000e-02, eta: 14:03:00, time: 1.923, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0360, loss_rpn_bbox: 0.0519, s0.loss_cls: 0.3084, s0.acc: 91.9365, s0.loss_bbox: 0.1245, s1.loss_cls: 0.1446, s1.acc: 92.3771, s1.loss_bbox: 0.1010, s2.loss_cls: 0.0622, s2.acc: 93.3848, s2.loss_bbox: 0.0463, loss: 0.8748
2021-10-11 05:38:57,476 - mmdet - INFO - Epoch [3][150/978]	lr: 2.000e-02, eta: 14:01:53, time: 1.893, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0433, loss_rpn_bbox: 0.0632, s0.loss_cls: 0.3184, s0.acc: 91.4551, s0.loss_bbox: 0.1318, s1.loss_cls: 0.1496, s1.acc: 91.9323, s1.loss_bbox: 0.1037, s2.loss_cls: 0.0648, s2.acc: 93.1361, s2.loss_bbox: 0.0480, loss: 0.9229
2021-10-11 05:40:32,707 - mmdet - INFO - Epoch [3][200/978]	lr: 2.000e-02, eta: 14:00:51, time: 1.905, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0319, loss_rpn_bbox: 0.0443, s0.loss_cls: 0.2714, s0.acc: 92.9229, s0.loss_bbox: 0.1035, s1.loss_cls: 0.1317, s1.acc: 93.0021, s1.loss_bbox: 0.0888, s2.loss_cls: 0.0581, s2.acc: 93.8874, s2.loss_bbox: 0.0425, loss: 0.7722
2021-10-11 05:42:07,981 - mmdet - INFO - Epoch [3][250/978]	lr: 2.000e-02, eta: 13:59:49, time: 1.905, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0506, s0.loss_cls: 0.2801, s0.acc: 92.5527, s0.loss_bbox: 0.1099, s1.loss_cls: 0.1353, s1.acc: 92.6507, s1.loss_bbox: 0.0873, s2.loss_cls: 0.0605, s2.acc: 93.3934, s2.loss_bbox: 0.0428, loss: 0.8002
2021-10-11 05:43:44,173 - mmdet - INFO - Epoch [3][300/978]	lr: 2.000e-02, eta: 13:58:56, time: 1.924, data_time: 0.039, memory: 26415, loss_rpn_cls: 0.0394, loss_rpn_bbox: 0.0457, s0.loss_cls: 0.2756, s0.acc: 92.6768, s0.loss_bbox: 0.1099, s1.loss_cls: 0.1320, s1.acc: 92.8543, s1.loss_bbox: 0.0952, s2.loss_cls: 0.0590, s2.acc: 93.6034, s2.loss_bbox: 0.0469, loss: 0.8038
2021-10-11 05:45:19,437 - mmdet - INFO - Epoch [3][350/978]	lr: 2.000e-02, eta: 13:57:51, time: 1.905, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0353, loss_rpn_bbox: 0.0509, s0.loss_cls: 0.2766, s0.acc: 93.0156, s0.loss_bbox: 0.0985, s1.loss_cls: 0.1364, s1.acc: 92.8989, s1.loss_bbox: 0.0869, s2.loss_cls: 0.0601, s2.acc: 93.7321, s2.loss_bbox: 0.0440, loss: 0.7888
2021-10-11 05:46:53,226 - mmdet - INFO - Epoch [3][400/978]	lr: 2.000e-02, eta: 13:56:27, time: 1.876, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0385, loss_rpn_bbox: 0.0499, s0.loss_cls: 0.2818, s0.acc: 92.5361, s0.loss_bbox: 0.1076, s1.loss_cls: 0.1356, s1.acc: 92.6495, s1.loss_bbox: 0.0922, s2.loss_cls: 0.0611, s2.acc: 93.3132, s2.loss_bbox: 0.0468, loss: 0.8134
2021-10-11 05:48:30,260 - mmdet - INFO - Epoch [3][450/978]	lr: 2.000e-02, eta: 13:55:39, time: 1.941, data_time: 0.038, memory: 26415, loss_rpn_cls: 0.0416, loss_rpn_bbox: 0.0516, s0.loss_cls: 0.2889, s0.acc: 92.6006, s0.loss_bbox: 0.1095, s1.loss_cls: 0.1315, s1.acc: 93.0011, s1.loss_bbox: 0.0847, s2.loss_cls: 0.0581, s2.acc: 93.6392, s2.loss_bbox: 0.0407, loss: 0.8066
2021-10-11 05:50:04,258 - mmdet - INFO - Epoch [3][500/978]	lr: 2.000e-02, eta: 13:54:16, time: 1.880, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0291, loss_rpn_bbox: 0.0477, s0.loss_cls: 0.2985, s0.acc: 92.0156, s0.loss_bbox: 0.1116, s1.loss_cls: 0.1460, s1.acc: 91.9067, s1.loss_bbox: 0.0950, s2.loss_cls: 0.0661, s2.acc: 92.5934, s2.loss_bbox: 0.0473, loss: 0.8415
2021-10-11 05:51:40,239 - mmdet - INFO - Epoch [3][550/978]	lr: 2.000e-02, eta: 13:53:14, time: 1.920, data_time: 0.040, memory: 26415, loss_rpn_cls: 0.0363, loss_rpn_bbox: 0.0566, s0.loss_cls: 0.2914, s0.acc: 92.2002, s0.loss_bbox: 0.1128, s1.loss_cls: 0.1444, s1.acc: 92.2045, s1.loss_bbox: 0.0969, s2.loss_cls: 0.0666, s2.acc: 92.8132, s2.loss_bbox: 0.0501, loss: 0.8550
2021-10-11 05:53:14,025 - mmdet - INFO - Epoch [3][600/978]	lr: 2.000e-02, eta: 13:51:47, time: 1.876, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0518, s0.loss_cls: 0.2783, s0.acc: 92.2402, s0.loss_bbox: 0.1135, s1.loss_cls: 0.1320, s1.acc: 92.6496, s1.loss_bbox: 0.0938, s2.loss_cls: 0.0592, s2.acc: 93.4852, s2.loss_bbox: 0.0444, loss: 0.8075
2021-10-11 05:54:48,390 - mmdet - INFO - Epoch [3][650/978]	lr: 2.000e-02, eta: 13:50:27, time: 1.887, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0352, loss_rpn_bbox: 0.0462, s0.loss_cls: 0.2763, s0.acc: 92.8779, s0.loss_bbox: 0.1096, s1.loss_cls: 0.1319, s1.acc: 93.0229, s1.loss_bbox: 0.0887, s2.loss_cls: 0.0574, s2.acc: 93.8815, s2.loss_bbox: 0.0416, loss: 0.7869
2021-10-11 05:56:21,123 - mmdet - INFO - Epoch [3][700/978]	lr: 2.000e-02, eta: 13:48:49, time: 1.855, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0460, loss_rpn_bbox: 0.0526, s0.loss_cls: 0.2807, s0.acc: 92.6729, s0.loss_bbox: 0.1096, s1.loss_cls: 0.1336, s1.acc: 92.8853, s1.loss_bbox: 0.0891, s2.loss_cls: 0.0603, s2.acc: 93.5892, s2.loss_bbox: 0.0423, loss: 0.8142
2021-10-11 05:57:53,982 - mmdet - INFO - Epoch [3][750/978]	lr: 2.000e-02, eta: 13:47:12, time: 1.857, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.0553, s0.loss_cls: 0.2960, s0.acc: 91.9248, s0.loss_bbox: 0.1208, s1.loss_cls: 0.1428, s1.acc: 92.1128, s1.loss_bbox: 0.0978, s2.loss_cls: 0.0642, s2.acc: 93.0203, s2.loss_bbox: 0.0472, loss: 0.8557
2021-10-11 05:59:25,672 - mmdet - INFO - Epoch [3][800/978]	lr: 2.000e-02, eta: 13:45:25, time: 1.834, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0350, loss_rpn_bbox: 0.0544, s0.loss_cls: 0.2926, s0.acc: 92.0977, s0.loss_bbox: 0.1109, s1.loss_cls: 0.1431, s1.acc: 92.0797, s1.loss_bbox: 0.0965, s2.loss_cls: 0.0653, s2.acc: 92.7678, s2.loss_bbox: 0.0498, loss: 0.8477
2021-10-11 06:00:58,224 - mmdet - INFO - Epoch [3][850/978]	lr: 2.000e-02, eta: 13:43:46, time: 1.851, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0418, s0.loss_cls: 0.2684, s0.acc: 92.9893, s0.loss_bbox: 0.1010, s1.loss_cls: 0.1298, s1.acc: 92.9871, s1.loss_bbox: 0.0809, s2.loss_cls: 0.0593, s2.acc: 93.3549, s2.loss_bbox: 0.0399, loss: 0.7552
2021-10-11 06:02:30,927 - mmdet - INFO - Epoch [3][900/978]	lr: 2.000e-02, eta: 13:42:09, time: 1.854, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0569, s0.loss_cls: 0.2867, s0.acc: 92.4033, s0.loss_bbox: 0.1085, s1.loss_cls: 0.1405, s1.acc: 92.1669, s1.loss_bbox: 0.0911, s2.loss_cls: 0.0641, s2.acc: 92.8526, s2.loss_bbox: 0.0474, loss: 0.8252
2021-10-11 06:04:02,051 - mmdet - INFO - Epoch [3][950/978]	lr: 2.000e-02, eta: 13:40:18, time: 1.822, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0523, s0.loss_cls: 0.3056, s0.acc: 91.7246, s0.loss_bbox: 0.1235, s1.loss_cls: 0.1483, s1.acc: 91.7319, s1.loss_bbox: 0.1024, s2.loss_cls: 0.0671, s2.acc: 92.7882, s2.loss_bbox: 0.0507, loss: 0.8835
2021-10-11 06:04:51,988 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-10-11 06:06:03,885 - mmdet - INFO - Evaluating bbox...
2021-10-11 06:06:10,531 - mmdet - INFO - Exp name: k-fold_4.py
2021-10-11 06:06:10,531 - mmdet - INFO - Epoch(val) [3][971]	bbox_mAP: 0.0740, bbox_mAP_50: 0.1250, bbox_mAP_75: 0.0760, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0110, bbox_mAP_l: 0.0990, bbox_mAP_copypaste: 0.074 0.125 0.076 0.000 0.011 0.099
2021-10-11 06:07:45,043 - mmdet - INFO - Epoch [4][50/978]	lr: 2.000e-02, eta: 13:30:21, time: 1.882, data_time: 0.082, memory: 26415, loss_rpn_cls: 0.0370, loss_rpn_bbox: 0.0507, s0.loss_cls: 0.2734, s0.acc: 92.4053, s0.loss_bbox: 0.1104, s1.loss_cls: 0.1323, s1.acc: 92.5587, s1.loss_bbox: 0.0903, s2.loss_cls: 0.0597, s2.acc: 93.3298, s2.loss_bbox: 0.0455, loss: 0.7992
2021-10-11 06:09:17,462 - mmdet - INFO - Epoch [4][100/978]	lr: 2.000e-02, eta: 13:28:50, time: 1.848, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0303, loss_rpn_bbox: 0.0481, s0.loss_cls: 0.2895, s0.acc: 92.1914, s0.loss_bbox: 0.1129, s1.loss_cls: 0.1370, s1.acc: 92.3921, s1.loss_bbox: 0.0943, s2.loss_cls: 0.0624, s2.acc: 93.0435, s2.loss_bbox: 0.0474, loss: 0.8220
2021-10-11 06:10:48,993 - mmdet - INFO - Epoch [4][150/978]	lr: 2.000e-02, eta: 13:27:12, time: 1.831, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0281, loss_rpn_bbox: 0.0458, s0.loss_cls: 0.2742, s0.acc: 92.3691, s0.loss_bbox: 0.1075, s1.loss_cls: 0.1362, s1.acc: 92.2738, s1.loss_bbox: 0.0940, s2.loss_cls: 0.0627, s2.acc: 92.8639, s2.loss_bbox: 0.0473, loss: 0.7957
2021-10-11 06:12:21,434 - mmdet - INFO - Epoch [4][200/978]	lr: 2.000e-02, eta: 13:25:41, time: 1.849, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0297, loss_rpn_bbox: 0.0499, s0.loss_cls: 0.2649, s0.acc: 92.5732, s0.loss_bbox: 0.1067, s1.loss_cls: 0.1316, s1.acc: 92.2812, s1.loss_bbox: 0.0956, s2.loss_cls: 0.0608, s2.acc: 92.8392, s2.loss_bbox: 0.0471, loss: 0.7862
2021-10-11 06:13:53,368 - mmdet - INFO - Epoch [4][250/978]	lr: 2.000e-02, eta: 13:24:07, time: 1.839, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0423, s0.loss_cls: 0.2721, s0.acc: 92.5918, s0.loss_bbox: 0.1018, s1.loss_cls: 0.1324, s1.acc: 92.5933, s1.loss_bbox: 0.0857, s2.loss_cls: 0.0623, s2.acc: 93.0176, s2.loss_bbox: 0.0452, loss: 0.7760
2021-10-11 06:15:24,095 - mmdet - INFO - Epoch [4][300/978]	lr: 2.000e-02, eta: 13:22:22, time: 1.815, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0290, loss_rpn_bbox: 0.0428, s0.loss_cls: 0.2684, s0.acc: 92.5820, s0.loss_bbox: 0.1102, s1.loss_cls: 0.1294, s1.acc: 92.8357, s1.loss_bbox: 0.0914, s2.loss_cls: 0.0596, s2.acc: 93.4409, s2.loss_bbox: 0.0457, loss: 0.7765
2021-10-11 06:16:56,135 - mmdet - INFO - Epoch [4][350/978]	lr: 2.000e-02, eta: 13:20:49, time: 1.841, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0312, loss_rpn_bbox: 0.0548, s0.loss_cls: 0.3106, s0.acc: 91.3154, s0.loss_bbox: 0.1181, s1.loss_cls: 0.1540, s1.acc: 91.2400, s1.loss_bbox: 0.1032, s2.loss_cls: 0.0713, s2.acc: 91.9138, s2.loss_bbox: 0.0521, loss: 0.8953
2021-10-11 06:18:26,993 - mmdet - INFO - Epoch [4][400/978]	lr: 2.000e-02, eta: 13:19:06, time: 1.817, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0483, s0.loss_cls: 0.2827, s0.acc: 92.2705, s0.loss_bbox: 0.1074, s1.loss_cls: 0.1391, s1.acc: 92.2241, s1.loss_bbox: 0.0931, s2.loss_cls: 0.0639, s2.acc: 92.9021, s2.loss_bbox: 0.0481, loss: 0.8167
2021-10-11 06:19:58,537 - mmdet - INFO - Epoch [4][450/978]	lr: 2.000e-02, eta: 13:17:29, time: 1.831, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0324, loss_rpn_bbox: 0.0537, s0.loss_cls: 0.2927, s0.acc: 91.8496, s0.loss_bbox: 0.1199, s1.loss_cls: 0.1393, s1.acc: 91.9775, s1.loss_bbox: 0.0951, s2.loss_cls: 0.0638, s2.acc: 92.6549, s2.loss_bbox: 0.0454, loss: 0.8424
2021-10-11 06:21:29,858 - mmdet - INFO - Epoch [4][500/978]	lr: 2.000e-02, eta: 13:15:50, time: 1.826, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0390, loss_rpn_bbox: 0.0611, s0.loss_cls: 0.2876, s0.acc: 92.1084, s0.loss_bbox: 0.1205, s1.loss_cls: 0.1364, s1.acc: 92.2979, s1.loss_bbox: 0.0974, s2.loss_cls: 0.0620, s2.acc: 92.9488, s2.loss_bbox: 0.0487, loss: 0.8527
2021-10-11 06:23:00,664 - mmdet - INFO - Epoch [4][550/978]	lr: 2.000e-02, eta: 13:14:08, time: 1.816, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0360, loss_rpn_bbox: 0.0500, s0.loss_cls: 0.2749, s0.acc: 92.4473, s0.loss_bbox: 0.1041, s1.loss_cls: 0.1346, s1.acc: 92.4169, s1.loss_bbox: 0.0866, s2.loss_cls: 0.0622, s2.acc: 92.9447, s2.loss_bbox: 0.0439, loss: 0.7923
2021-10-11 06:24:32,040 - mmdet - INFO - Epoch [4][600/978]	lr: 2.000e-02, eta: 13:12:30, time: 1.828, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0352, loss_rpn_bbox: 0.0526, s0.loss_cls: 0.2944, s0.acc: 92.0850, s0.loss_bbox: 0.1151, s1.loss_cls: 0.1427, s1.acc: 92.1159, s1.loss_bbox: 0.0957, s2.loss_cls: 0.0651, s2.acc: 92.6315, s2.loss_bbox: 0.0480, loss: 0.8488
2021-10-11 06:26:02,987 - mmdet - INFO - Epoch [4][650/978]	lr: 2.000e-02, eta: 13:10:50, time: 1.819, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0325, loss_rpn_bbox: 0.0483, s0.loss_cls: 0.2783, s0.acc: 92.3037, s0.loss_bbox: 0.1116, s1.loss_cls: 0.1347, s1.acc: 92.3000, s1.loss_bbox: 0.0918, s2.loss_cls: 0.0607, s2.acc: 93.1540, s2.loss_bbox: 0.0434, loss: 0.8014
2021-10-11 06:27:35,194 - mmdet - INFO - Epoch [4][700/978]	lr: 2.000e-02, eta: 13:09:18, time: 1.844, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0337, loss_rpn_bbox: 0.0464, s0.loss_cls: 0.2761, s0.acc: 92.6016, s0.loss_bbox: 0.1089, s1.loss_cls: 0.1319, s1.acc: 92.7860, s1.loss_bbox: 0.0896, s2.loss_cls: 0.0591, s2.acc: 93.3651, s2.loss_bbox: 0.0439, loss: 0.7896
2021-10-11 06:29:06,745 - mmdet - INFO - Epoch [4][750/978]	lr: 2.000e-02, eta: 13:07:42, time: 1.831, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0299, loss_rpn_bbox: 0.0494, s0.loss_cls: 0.2647, s0.acc: 92.6914, s0.loss_bbox: 0.1013, s1.loss_cls: 0.1297, s1.acc: 92.6946, s1.loss_bbox: 0.0894, s2.loss_cls: 0.0592, s2.acc: 93.3202, s2.loss_bbox: 0.0455, loss: 0.7691
2021-10-11 06:30:38,810 - mmdet - INFO - Epoch [4][800/978]	lr: 2.000e-02, eta: 13:06:10, time: 1.841, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0314, loss_rpn_bbox: 0.0447, s0.loss_cls: 0.2728, s0.acc: 92.6670, s0.loss_bbox: 0.1024, s1.loss_cls: 0.1355, s1.acc: 92.3627, s1.loss_bbox: 0.0881, s2.loss_cls: 0.0629, s2.acc: 92.8306, s2.loss_bbox: 0.0445, loss: 0.7824
2021-10-11 06:32:09,204 - mmdet - INFO - Epoch [4][850/978]	lr: 2.000e-02, eta: 13:04:26, time: 1.808, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0544, s0.loss_cls: 0.3012, s0.acc: 91.9287, s0.loss_bbox: 0.1188, s1.loss_cls: 0.1442, s1.acc: 92.0787, s1.loss_bbox: 0.0966, s2.loss_cls: 0.0644, s2.acc: 93.0255, s2.loss_bbox: 0.0477, loss: 0.8612
2021-10-11 06:33:41,227 - mmdet - INFO - Epoch [4][900/978]	lr: 2.000e-02, eta: 13:02:54, time: 1.840, data_time: 0.036, memory: 26415, loss_rpn_cls: 0.0354, loss_rpn_bbox: 0.0473, s0.loss_cls: 0.3056, s0.acc: 91.7471, s0.loss_bbox: 0.1138, s1.loss_cls: 0.1471, s1.acc: 91.7212, s1.loss_bbox: 0.0946, s2.loss_cls: 0.0669, s2.acc: 92.2763, s2.loss_bbox: 0.0482, loss: 0.8590
2021-10-11 06:35:11,839 - mmdet - INFO - Epoch [4][950/978]	lr: 2.000e-02, eta: 13:01:12, time: 1.812, data_time: 0.037, memory: 26415, loss_rpn_cls: 0.0340, loss_rpn_bbox: 0.0608, s0.loss_cls: 0.3078, s0.acc: 91.5977, s0.loss_bbox: 0.1234, s1.loss_cls: 0.1485, s1.acc: 91.6416, s1.loss_bbox: 0.1013, s2.loss_cls: 0.0678, s2.acc: 92.3818, s2.loss_bbox: 0.0492, loss: 0.8926
2021-10-11 06:36:03,370 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-10-11 06:37:15,109 - mmdet - INFO - Evaluating bbox...
2021-10-11 06:37:19,637 - mmdet - INFO - Exp name: k-fold_4.py
2021-10-11 06:37:19,637 - mmdet - INFO - Epoch(val) [4][971]	bbox_mAP: 0.1050, bbox_mAP_50: 0.1680, bbox_mAP_75: 0.1080, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0080, bbox_mAP_l: 0.1340, bbox_mAP_copypaste: 0.105 0.168 0.108 0.000 0.008 0.134
