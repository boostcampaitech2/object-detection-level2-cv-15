{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+6eb41ac", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\ntrain_json = 'train_4.json'\nval_json = 'val_4.json'\ntest_json = 'test.json'\nimg_norm_cfg = dict(\n    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.651, 117.4, 110.08],\n        std=[54.035, 53.37, 54.784],\n        to_rgb=True),\n    dict(type='Resize', img_scale=(2048, 2048), keep_ratio=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_4.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='Resize', img_scale=(2048, 2048), keep_ratio=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_4.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nindex = 4\nwandb_runname = 'mmdet_K-Fold_4'\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='garbage_ObjectDetection',\n                entity='falling90',\n                name='mmdet_K-Fold_4'))\n    ])\nwork_dir = './work_dirs/k-fold_4'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "k-fold_4.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 26415, "data_time": 0.08399, "loss_rpn_cls": 0.43457, "loss_rpn_bbox": 0.07861, "s0.loss_cls": 0.46671, "s0.acc": 90.2373, "s0.loss_bbox": 0.06997, "s1.loss_cls": 0.26454, "s1.acc": 87.90234, "s1.loss_bbox": 0.0181, "s2.loss_cls": 0.1644, "s2.acc": 83.29297, "s2.loss_bbox": 0.00411, "loss": 1.50101, "time": 1.97565}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 26415, "data_time": 0.03773, "loss_rpn_cls": 0.11777, "loss_rpn_bbox": 0.0651, "s0.loss_cls": 0.26026, "s0.acc": 95.50977, "s0.loss_bbox": 0.10052, "s1.loss_cls": 0.0796, "s1.acc": 97.70312, "s1.loss_bbox": 0.03185, "s2.loss_cls": 0.0263, "s2.acc": 98.66309, "s2.loss_bbox": 0.00486, "loss": 0.68627, "time": 1.90696}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 26415, "data_time": 0.0385, "loss_rpn_cls": 0.08739, "loss_rpn_bbox": 0.06396, "s0.loss_cls": 0.20853, "s0.acc": 95.83008, "s0.loss_bbox": 0.08625, "s1.loss_cls": 0.06829, "s1.acc": 97.48535, "s1.loss_bbox": 0.03754, "s2.loss_cls": 0.02285, "s2.acc": 98.57227, "s2.loss_bbox": 0.00718, "loss": 0.582, "time": 1.88377}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 26415, "data_time": 0.03692, "loss_rpn_cls": 0.06644, "loss_rpn_bbox": 0.05695, "s0.loss_cls": 0.27832, "s0.acc": 94.33984, "s0.loss_bbox": 0.12108, "s1.loss_cls": 0.09775, "s1.acc": 96.4375, "s1.loss_bbox": 0.05668, "s2.loss_cls": 0.03128, "s2.acc": 98.00684, "s2.loss_bbox": 0.01254, "loss": 0.72104, "time": 1.84672}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 26415, "data_time": 0.03666, "loss_rpn_cls": 0.06959, "loss_rpn_bbox": 0.05868, "s0.loss_cls": 0.23456, "s0.acc": 95.9502, "s0.loss_bbox": 0.08901, "s1.loss_cls": 0.07028, "s1.acc": 97.80566, "s1.loss_bbox": 0.03135, "s2.loss_cls": 0.02292, "s2.acc": 98.71289, "s2.loss_bbox": 0.00573, "loss": 0.58212, "time": 1.86231}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 26415, "data_time": 0.03838, "loss_rpn_cls": 0.06632, "loss_rpn_bbox": 0.07008, "s0.loss_cls": 0.31249, "s0.acc": 93.48438, "s0.loss_bbox": 0.14246, "s1.loss_cls": 0.10333, "s1.acc": 96.12695, "s1.loss_bbox": 0.06086, "s2.loss_cls": 0.03424, "s2.acc": 97.83496, "s2.loss_bbox": 0.01296, "loss": 0.80275, "time": 1.92548}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 26415, "data_time": 0.03694, "loss_rpn_cls": 0.06256, "loss_rpn_bbox": 0.07046, "s0.loss_cls": 0.33757, "s0.acc": 92.69531, "s0.loss_bbox": 0.14503, "s1.loss_cls": 0.12247, "s1.acc": 95.11133, "s1.loss_bbox": 0.07699, "s2.loss_cls": 0.04122, "s2.acc": 97.04297, "s2.loss_bbox": 0.02161, "loss": 0.87789, "time": 1.88689}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 26415, "data_time": 0.03923, "loss_rpn_cls": 0.05506, "loss_rpn_bbox": 0.04831, "s0.loss_cls": 0.26037, "s0.acc": 94.65332, "s0.loss_bbox": 0.11101, "s1.loss_cls": 0.09843, "s1.acc": 96.25586, "s1.loss_bbox": 0.05865, "s2.loss_cls": 0.03283, "s2.acc": 97.72949, "s2.loss_bbox": 0.01686, "loss": 0.68152, "time": 1.95968}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 26415, "data_time": 0.03729, "loss_rpn_cls": 0.0611, "loss_rpn_bbox": 0.05656, "s0.loss_cls": 0.31077, "s0.acc": 93.52734, "s0.loss_bbox": 0.13204, "s1.loss_cls": 0.11297, "s1.acc": 95.36035, "s1.loss_bbox": 0.07118, "s2.loss_cls": 0.0399, "s2.acc": 96.98438, "s2.loss_bbox": 0.02268, "loss": 0.80719, "time": 1.89726}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 26415, "data_time": 0.03879, "loss_rpn_cls": 0.06034, "loss_rpn_bbox": 0.0583, "s0.loss_cls": 0.32195, "s0.acc": 93.69824, "s0.loss_bbox": 0.12491, "s1.loss_cls": 0.12016, "s1.acc": 95.49316, "s1.loss_bbox": 0.06759, "s2.loss_cls": 0.04256, "s2.acc": 96.99805, "s2.loss_bbox": 0.02147, "loss": 0.81728, "time": 1.93137}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 26415, "data_time": 0.03807, "loss_rpn_cls": 0.08905, "loss_rpn_bbox": 0.05625, "s0.loss_cls": 0.23295, "s0.acc": 96.03711, "s0.loss_bbox": 0.08341, "s1.loss_cls": 0.07316, "s1.acc": 97.66211, "s1.loss_bbox": 0.03297, "s2.loss_cls": 0.0247, "s2.acc": 98.57324, "s2.loss_bbox": 0.00665, "loss": 0.59913, "time": 1.93309}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 26415, "data_time": 0.03726, "loss_rpn_cls": 0.06992, "loss_rpn_bbox": 0.07622, "s0.loss_cls": 0.30571, "s0.acc": 93.51562, "s0.loss_bbox": 0.1281, "s1.loss_cls": 0.11386, "s1.acc": 95.19922, "s1.loss_bbox": 0.0698, "s2.loss_cls": 0.04237, "s2.acc": 96.63965, "s2.loss_bbox": 0.02361, "loss": 0.82957, "time": 1.88867}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 26415, "data_time": 0.03797, "loss_rpn_cls": 0.06436, "loss_rpn_bbox": 0.05516, "s0.loss_cls": 0.29277, "s0.acc": 94.10254, "s0.loss_bbox": 0.11193, "s1.loss_cls": 0.11236, "s1.acc": 95.50586, "s1.loss_bbox": 0.06666, "s2.loss_cls": 0.04107, "s2.acc": 96.87988, "s2.loss_bbox": 0.02294, "loss": 0.76725, "time": 1.92384}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 26415, "data_time": 0.03906, "loss_rpn_cls": 0.05891, "loss_rpn_bbox": 0.05675, "s0.loss_cls": 0.31243, "s0.acc": 93.36035, "s0.loss_bbox": 0.12598, "s1.loss_cls": 0.1232, "s1.acc": 94.75586, "s1.loss_bbox": 0.07837, "s2.loss_cls": 0.04614, "s2.acc": 96.20215, "s2.loss_bbox": 0.02764, "loss": 0.82942, "time": 1.92379}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 26415, "data_time": 0.03748, "loss_rpn_cls": 0.05678, "loss_rpn_bbox": 0.06815, "s0.loss_cls": 0.36291, "s0.acc": 91.66895, "s0.loss_bbox": 0.15974, "s1.loss_cls": 0.14671, "s1.acc": 93.41161, "s1.loss_bbox": 0.09927, "s2.loss_cls": 0.05574, "s2.acc": 95.30867, "s2.loss_bbox": 0.03569, "loss": 0.98499, "time": 1.90576}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 26415, "data_time": 0.03928, "loss_rpn_cls": 0.0506, "loss_rpn_bbox": 0.05385, "s0.loss_cls": 0.29341, "s0.acc": 93.39355, "s0.loss_bbox": 0.1171, "s1.loss_cls": 0.1221, "s1.acc": 94.5, "s1.loss_bbox": 0.07873, "s2.loss_cls": 0.04751, "s2.acc": 95.97656, "s2.loss_bbox": 0.02962, "loss": 0.79292, "time": 1.94333}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 26415, "data_time": 0.03822, "loss_rpn_cls": 0.04993, "loss_rpn_bbox": 0.06523, "s0.loss_cls": 0.32605, "s0.acc": 92.33887, "s0.loss_bbox": 0.13265, "s1.loss_cls": 0.1414, "s1.acc": 93.26172, "s1.loss_bbox": 0.09454, "s2.loss_cls": 0.05583, "s2.acc": 94.79297, "s2.loss_bbox": 0.03786, "loss": 0.90348, "time": 1.92435}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 26415, "data_time": 0.03704, "loss_rpn_cls": 0.04238, "loss_rpn_bbox": 0.05248, "s0.loss_cls": 0.30548, "s0.acc": 92.93457, "s0.loss_bbox": 0.12572, "s1.loss_cls": 0.13163, "s1.acc": 93.89258, "s1.loss_bbox": 0.08874, "s2.loss_cls": 0.05106, "s2.acc": 95.46387, "s2.loss_bbox": 0.03504, "loss": 0.83253, "time": 1.87505}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 26415, "data_time": 0.03834, "loss_rpn_cls": 0.03977, "loss_rpn_bbox": 0.05634, "s0.loss_cls": 0.3294, "s0.acc": 92.57715, "s0.loss_bbox": 0.12995, "s1.loss_cls": 0.14302, "s1.acc": 93.44493, "s1.loss_bbox": 0.09624, "s2.loss_cls": 0.05577, "s2.acc": 94.9666, "s2.loss_bbox": 0.03729, "loss": 0.88777, "time": 1.92802}
{"mode": "val", "epoch": 1, "iter": 971, "lr": 0.02, "bbox_mAP": 0.045, "bbox_mAP_50": 0.085, "bbox_mAP_75": 0.044, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.057, "bbox_mAP_copypaste": "0.045 0.085 0.044 0.000 0.003 0.057"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.02, "memory": 26415, "data_time": 0.08229, "loss_rpn_cls": 0.05026, "loss_rpn_bbox": 0.06419, "s0.loss_cls": 0.3363, "s0.acc": 91.83398, "s0.loss_bbox": 0.1379, "s1.loss_cls": 0.15033, "s1.acc": 92.48769, "s1.loss_bbox": 0.10715, "s2.loss_cls": 0.06069, "s2.acc": 94.16278, "s2.loss_bbox": 0.04425, "loss": 0.95107, "time": 1.91661}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02, "memory": 26415, "data_time": 0.03673, "loss_rpn_cls": 0.04985, "loss_rpn_bbox": 0.05911, "s0.loss_cls": 0.31629, "s0.acc": 92.59961, "s0.loss_bbox": 0.12361, "s1.loss_cls": 0.14341, "s1.acc": 93.25293, "s1.loss_bbox": 0.09116, "s2.loss_cls": 0.05778, "s2.acc": 94.67773, "s2.loss_bbox": 0.03806, "loss": 0.87926, "time": 1.88457}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.02, "memory": 26415, "data_time": 0.0382, "loss_rpn_cls": 0.04588, "loss_rpn_bbox": 0.05592, "s0.loss_cls": 0.28303, "s0.acc": 93.12012, "s0.loss_bbox": 0.1133, "s1.loss_cls": 0.12748, "s1.acc": 93.53105, "s1.loss_bbox": 0.08752, "s2.loss_cls": 0.05402, "s2.acc": 94.65024, "s2.loss_bbox": 0.04004, "loss": 0.80719, "time": 1.91491}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.02, "memory": 26415, "data_time": 0.03699, "loss_rpn_cls": 0.05679, "loss_rpn_bbox": 0.06172, "s0.loss_cls": 0.31864, "s0.acc": 92.37207, "s0.loss_bbox": 0.12419, "s1.loss_cls": 0.13903, "s1.acc": 93.27421, "s1.loss_bbox": 0.09016, "s2.loss_cls": 0.05481, "s2.acc": 94.89362, "s2.loss_bbox": 0.03542, "loss": 0.88076, "time": 1.88446}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 26415, "data_time": 0.03767, "loss_rpn_cls": 0.0433, "loss_rpn_bbox": 0.054, "s0.loss_cls": 0.27836, "s0.acc": 93.50391, "s0.loss_bbox": 0.10298, "s1.loss_cls": 0.12918, "s1.acc": 93.68665, "s1.loss_bbox": 0.08042, "s2.loss_cls": 0.05431, "s2.acc": 94.72812, "s2.loss_bbox": 0.03596, "loss": 0.77852, "time": 1.94144}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 26415, "data_time": 0.037, "loss_rpn_cls": 0.04691, "loss_rpn_bbox": 0.05583, "s0.loss_cls": 0.29158, "s0.acc": 92.66504, "s0.loss_bbox": 0.1165, "s1.loss_cls": 0.13594, "s1.acc": 93.03919, "s1.loss_bbox": 0.08978, "s2.loss_cls": 0.05849, "s2.acc": 94.12456, "s2.loss_bbox": 0.0403, "loss": 0.83532, "time": 1.85101}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.02, "memory": 26415, "data_time": 0.04002, "loss_rpn_cls": 0.04044, "loss_rpn_bbox": 0.05023, "s0.loss_cls": 0.30129, "s0.acc": 92.83594, "s0.loss_bbox": 0.1142, "s1.loss_cls": 0.13976, "s1.acc": 93.2405, "s1.loss_bbox": 0.08724, "s2.loss_cls": 0.05856, "s2.acc": 94.28843, "s2.loss_bbox": 0.0375, "loss": 0.82922, "time": 1.95032}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.02, "memory": 26415, "data_time": 0.03702, "loss_rpn_cls": 0.05125, "loss_rpn_bbox": 0.05511, "s0.loss_cls": 0.32531, "s0.acc": 92.31543, "s0.loss_bbox": 0.12624, "s1.loss_cls": 0.14481, "s1.acc": 93.05136, "s1.loss_bbox": 0.09466, "s2.loss_cls": 0.05981, "s2.acc": 94.31017, "s2.loss_bbox": 0.04142, "loss": 0.89861, "time": 1.86899}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.02, "memory": 26415, "data_time": 0.03769, "loss_rpn_cls": 0.04557, "loss_rpn_bbox": 0.05568, "s0.loss_cls": 0.30501, "s0.acc": 93.03613, "s0.loss_bbox": 0.1156, "s1.loss_cls": 0.13506, "s1.acc": 93.68967, "s1.loss_bbox": 0.085, "s2.loss_cls": 0.05603, "s2.acc": 94.8744, "s2.loss_bbox": 0.03805, "loss": 0.836, "time": 1.92905}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.02, "memory": 26415, "data_time": 0.03701, "loss_rpn_cls": 0.03874, "loss_rpn_bbox": 0.04611, "s0.loss_cls": 0.30223, "s0.acc": 92.78125, "s0.loss_bbox": 0.10924, "s1.loss_cls": 0.14113, "s1.acc": 92.92744, "s1.loss_bbox": 0.09035, "s2.loss_cls": 0.05969, "s2.acc": 94.00956, "s2.loss_bbox": 0.04291, "loss": 0.83041, "time": 1.89547}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.02, "memory": 26415, "data_time": 0.03819, "loss_rpn_cls": 0.04475, "loss_rpn_bbox": 0.05953, "s0.loss_cls": 0.32844, "s0.acc": 91.52344, "s0.loss_bbox": 0.1316, "s1.loss_cls": 0.15453, "s1.acc": 91.85697, "s1.loss_bbox": 0.10498, "s2.loss_cls": 0.06727, "s2.acc": 93.04886, "s2.loss_bbox": 0.0485, "loss": 0.93958, "time": 1.89644}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.02, "memory": 26415, "data_time": 0.03722, "loss_rpn_cls": 0.04424, "loss_rpn_bbox": 0.0563, "s0.loss_cls": 0.30365, "s0.acc": 91.8584, "s0.loss_bbox": 0.13044, "s1.loss_cls": 0.14399, "s1.acc": 92.02397, "s1.loss_bbox": 0.10533, "s2.loss_cls": 0.062, "s2.acc": 93.2472, "s2.loss_bbox": 0.04734, "loss": 0.89327, "time": 1.88956}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.02, "memory": 26415, "data_time": 0.03844, "loss_rpn_cls": 0.04218, "loss_rpn_bbox": 0.05548, "s0.loss_cls": 0.2908, "s0.acc": 92.58691, "s0.loss_bbox": 0.11244, "s1.loss_cls": 0.13649, "s1.acc": 92.82128, "s1.loss_bbox": 0.08984, "s2.loss_cls": 0.05874, "s2.acc": 93.90106, "s2.loss_bbox": 0.04064, "loss": 0.82662, "time": 1.93916}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.02, "memory": 26415, "data_time": 0.03747, "loss_rpn_cls": 0.04616, "loss_rpn_bbox": 0.05448, "s0.loss_cls": 0.32909, "s0.acc": 91.75781, "s0.loss_bbox": 0.13053, "s1.loss_cls": 0.14768, "s1.acc": 92.40749, "s1.loss_bbox": 0.09809, "s2.loss_cls": 0.06115, "s2.acc": 93.80521, "s2.loss_bbox": 0.04233, "loss": 0.90951, "time": 1.87658}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.02, "memory": 26415, "data_time": 0.03692, "loss_rpn_cls": 0.04767, "loss_rpn_bbox": 0.06673, "s0.loss_cls": 0.32759, "s0.acc": 91.60156, "s0.loss_bbox": 0.14151, "s1.loss_cls": 0.1477, "s1.acc": 92.3212, "s1.loss_bbox": 0.11003, "s2.loss_cls": 0.0615, "s2.acc": 93.74811, "s2.loss_bbox": 0.04803, "loss": 0.95075, "time": 1.88579}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.02, "memory": 26415, "data_time": 0.03766, "loss_rpn_cls": 0.03326, "loss_rpn_bbox": 0.0453, "s0.loss_cls": 0.27823, "s0.acc": 92.95117, "s0.loss_bbox": 0.10831, "s1.loss_cls": 0.13158, "s1.acc": 93.11133, "s1.loss_bbox": 0.08916, "s2.loss_cls": 0.05607, "s2.acc": 94.00586, "s2.loss_bbox": 0.0409, "loss": 0.78281, "time": 1.91789}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.02, "memory": 26415, "data_time": 0.03672, "loss_rpn_cls": 0.03476, "loss_rpn_bbox": 0.04241, "s0.loss_cls": 0.26547, "s0.acc": 93.22559, "s0.loss_bbox": 0.09675, "s1.loss_cls": 0.12754, "s1.acc": 93.15621, "s1.loss_bbox": 0.08078, "s2.loss_cls": 0.05696, "s2.acc": 93.73678, "s2.loss_bbox": 0.04109, "loss": 0.74576, "time": 1.84629}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.02, "memory": 26415, "data_time": 0.03798, "loss_rpn_cls": 0.03563, "loss_rpn_bbox": 0.0481, "s0.loss_cls": 0.2798, "s0.acc": 92.78711, "s0.loss_bbox": 0.10934, "s1.loss_cls": 0.1323, "s1.acc": 93.00408, "s1.loss_bbox": 0.08922, "s2.loss_cls": 0.05933, "s2.acc": 93.63609, "s2.loss_bbox": 0.04268, "loss": 0.7964, "time": 1.92143}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.02, "memory": 26415, "data_time": 0.03634, "loss_rpn_cls": 0.03941, "loss_rpn_bbox": 0.05698, "s0.loss_cls": 0.30623, "s0.acc": 92.04395, "s0.loss_bbox": 0.12085, "s1.loss_cls": 0.14575, "s1.acc": 92.19397, "s1.loss_bbox": 0.09867, "s2.loss_cls": 0.06436, "s2.acc": 92.97559, "s2.loss_bbox": 0.04656, "loss": 0.8788, "time": 1.85562}
{"mode": "val", "epoch": 2, "iter": 971, "lr": 0.02, "bbox_mAP": 0.062, "bbox_mAP_50": 0.108, "bbox_mAP_75": 0.062, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.079, "bbox_mAP_copypaste": "0.062 0.108 0.062 0.000 0.007 0.079"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 26415, "data_time": 0.08229, "loss_rpn_cls": 0.03826, "loss_rpn_bbox": 0.05585, "s0.loss_cls": 0.31954, "s0.acc": 91.80957, "s0.loss_bbox": 0.12574, "s1.loss_cls": 0.15265, "s1.acc": 91.99545, "s1.loss_bbox": 0.10083, "s2.loss_cls": 0.067, "s2.acc": 93.11414, "s2.loss_bbox": 0.04775, "loss": 0.90762, "time": 1.91952}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 26415, "data_time": 0.03784, "loss_rpn_cls": 0.03597, "loss_rpn_bbox": 0.05187, "s0.loss_cls": 0.30842, "s0.acc": 91.93652, "s0.loss_bbox": 0.12448, "s1.loss_cls": 0.1446, "s1.acc": 92.37713, "s1.loss_bbox": 0.101, "s2.loss_cls": 0.06217, "s2.acc": 93.38478, "s2.loss_bbox": 0.04626, "loss": 0.87477, "time": 1.92315}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 26415, "data_time": 0.03735, "loss_rpn_cls": 0.04332, "loss_rpn_bbox": 0.06321, "s0.loss_cls": 0.31841, "s0.acc": 91.45508, "s0.loss_bbox": 0.13185, "s1.loss_cls": 0.14962, "s1.acc": 91.93225, "s1.loss_bbox": 0.10374, "s2.loss_cls": 0.06481, "s2.acc": 93.1361, "s2.loss_bbox": 0.04798, "loss": 0.92294, "time": 1.89336}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 26415, "data_time": 0.03757, "loss_rpn_cls": 0.03189, "loss_rpn_bbox": 0.04431, "s0.loss_cls": 0.27143, "s0.acc": 92.92285, "s0.loss_bbox": 0.10347, "s1.loss_cls": 0.13167, "s1.acc": 93.00211, "s1.loss_bbox": 0.08879, "s2.loss_cls": 0.05813, "s2.acc": 93.88744, "s2.loss_bbox": 0.04253, "loss": 0.77221, "time": 1.90462}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 26415, "data_time": 0.03765, "loss_rpn_cls": 0.03376, "loss_rpn_bbox": 0.05059, "s0.loss_cls": 0.28011, "s0.acc": 92.55273, "s0.loss_bbox": 0.10994, "s1.loss_cls": 0.13526, "s1.acc": 92.6507, "s1.loss_bbox": 0.0873, "s2.loss_cls": 0.06049, "s2.acc": 93.3934, "s2.loss_bbox": 0.04277, "loss": 0.80021, "time": 1.90546}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02, "memory": 26415, "data_time": 0.03881, "loss_rpn_cls": 0.03944, "loss_rpn_bbox": 0.0457, "s0.loss_cls": 0.27556, "s0.acc": 92.67676, "s0.loss_bbox": 0.10988, "s1.loss_cls": 0.13201, "s1.acc": 92.85428, "s1.loss_bbox": 0.09524, "s2.loss_cls": 0.05905, "s2.acc": 93.60341, "s2.loss_bbox": 0.04692, "loss": 0.80378, "time": 1.9238}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.02, "memory": 26415, "data_time": 0.03755, "loss_rpn_cls": 0.03532, "loss_rpn_bbox": 0.05092, "s0.loss_cls": 0.27656, "s0.acc": 93.01562, "s0.loss_bbox": 0.09851, "s1.loss_cls": 0.13644, "s1.acc": 92.89892, "s1.loss_bbox": 0.08692, "s2.loss_cls": 0.06012, "s2.acc": 93.73206, "s2.loss_bbox": 0.04405, "loss": 0.78884, "time": 1.9053}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.02, "memory": 26415, "data_time": 0.03652, "loss_rpn_cls": 0.03845, "loss_rpn_bbox": 0.04993, "s0.loss_cls": 0.28177, "s0.acc": 92.53613, "s0.loss_bbox": 0.10758, "s1.loss_cls": 0.13555, "s1.acc": 92.64954, "s1.loss_bbox": 0.0922, "s2.loss_cls": 0.06112, "s2.acc": 93.31317, "s2.loss_bbox": 0.04676, "loss": 0.81335, "time": 1.87573}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.02, "memory": 26415, "data_time": 0.03826, "loss_rpn_cls": 0.04163, "loss_rpn_bbox": 0.0516, "s0.loss_cls": 0.28892, "s0.acc": 92.60059, "s0.loss_bbox": 0.10946, "s1.loss_cls": 0.13149, "s1.acc": 93.00112, "s1.loss_bbox": 0.08469, "s2.loss_cls": 0.05813, "s2.acc": 93.63917, "s2.loss_bbox": 0.04066, "loss": 0.80659, "time": 1.9407}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.02, "memory": 26415, "data_time": 0.0364, "loss_rpn_cls": 0.02912, "loss_rpn_bbox": 0.04769, "s0.loss_cls": 0.29855, "s0.acc": 92.01562, "s0.loss_bbox": 0.1116, "s1.loss_cls": 0.14598, "s1.acc": 91.90675, "s1.loss_bbox": 0.09503, "s2.loss_cls": 0.06615, "s2.acc": 92.59343, "s2.loss_bbox": 0.04734, "loss": 0.84147, "time": 1.87995}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.02, "memory": 26415, "data_time": 0.04005, "loss_rpn_cls": 0.03635, "loss_rpn_bbox": 0.05656, "s0.loss_cls": 0.29136, "s0.acc": 92.2002, "s0.loss_bbox": 0.11281, "s1.loss_cls": 0.14439, "s1.acc": 92.20447, "s1.loss_bbox": 0.09689, "s2.loss_cls": 0.06657, "s2.acc": 92.81324, "s2.loss_bbox": 0.05007, "loss": 0.85502, "time": 1.91955}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.02, "memory": 26415, "data_time": 0.03687, "loss_rpn_cls": 0.03459, "loss_rpn_bbox": 0.05176, "s0.loss_cls": 0.27831, "s0.acc": 92.24023, "s0.loss_bbox": 0.11346, "s1.loss_cls": 0.13197, "s1.acc": 92.64963, "s1.loss_bbox": 0.09376, "s2.loss_cls": 0.05923, "s2.acc": 93.48523, "s2.loss_bbox": 0.04439, "loss": 0.80748, "time": 1.8757}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.02, "memory": 26415, "data_time": 0.03649, "loss_rpn_cls": 0.03522, "loss_rpn_bbox": 0.0462, "s0.loss_cls": 0.27634, "s0.acc": 92.87793, "s0.loss_bbox": 0.10957, "s1.loss_cls": 0.13188, "s1.acc": 93.0229, "s1.loss_bbox": 0.08868, "s2.loss_cls": 0.05744, "s2.acc": 93.88146, "s2.loss_bbox": 0.04157, "loss": 0.7869, "time": 1.88733}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.02, "memory": 26415, "data_time": 0.03663, "loss_rpn_cls": 0.04604, "loss_rpn_bbox": 0.05258, "s0.loss_cls": 0.2807, "s0.acc": 92.67285, "s0.loss_bbox": 0.10959, "s1.loss_cls": 0.13359, "s1.acc": 92.88534, "s1.loss_bbox": 0.08913, "s2.loss_cls": 0.06034, "s2.acc": 93.58919, "s2.loss_bbox": 0.04227, "loss": 0.81423, "time": 1.85461}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.02, "memory": 26415, "data_time": 0.03669, "loss_rpn_cls": 0.03151, "loss_rpn_bbox": 0.05535, "s0.loss_cls": 0.29599, "s0.acc": 91.9248, "s0.loss_bbox": 0.12083, "s1.loss_cls": 0.14275, "s1.acc": 92.11275, "s1.loss_bbox": 0.09784, "s2.loss_cls": 0.06424, "s2.acc": 93.0203, "s2.loss_bbox": 0.04722, "loss": 0.85573, "time": 1.8572}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.02, "memory": 26415, "data_time": 0.03655, "loss_rpn_cls": 0.03497, "loss_rpn_bbox": 0.0544, "s0.loss_cls": 0.29263, "s0.acc": 92.09766, "s0.loss_bbox": 0.11094, "s1.loss_cls": 0.14309, "s1.acc": 92.07965, "s1.loss_bbox": 0.09648, "s2.loss_cls": 0.06532, "s2.acc": 92.76783, "s2.loss_bbox": 0.04985, "loss": 0.84769, "time": 1.83377}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.02, "memory": 26415, "data_time": 0.03669, "loss_rpn_cls": 0.03415, "loss_rpn_bbox": 0.04178, "s0.loss_cls": 0.26836, "s0.acc": 92.98926, "s0.loss_bbox": 0.10096, "s1.loss_cls": 0.12983, "s1.acc": 92.98706, "s1.loss_bbox": 0.08087, "s2.loss_cls": 0.05929, "s2.acc": 93.35487, "s2.loss_bbox": 0.03992, "loss": 0.75516, "time": 1.85102}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.02, "memory": 26415, "data_time": 0.03658, "loss_rpn_cls": 0.02997, "loss_rpn_bbox": 0.05689, "s0.loss_cls": 0.28669, "s0.acc": 92.40332, "s0.loss_bbox": 0.10853, "s1.loss_cls": 0.14049, "s1.acc": 92.16689, "s1.loss_bbox": 0.09111, "s2.loss_cls": 0.06411, "s2.acc": 92.85264, "s2.loss_bbox": 0.04736, "loss": 0.82515, "time": 1.85406}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.02, "memory": 26415, "data_time": 0.03651, "loss_rpn_cls": 0.03362, "loss_rpn_bbox": 0.05231, "s0.loss_cls": 0.30559, "s0.acc": 91.72461, "s0.loss_bbox": 0.12354, "s1.loss_cls": 0.14826, "s1.acc": 91.73195, "s1.loss_bbox": 0.10244, "s2.loss_cls": 0.06705, "s2.acc": 92.78822, "s2.loss_bbox": 0.05071, "loss": 0.88351, "time": 1.82248}
{"mode": "val", "epoch": 3, "iter": 971, "lr": 0.02, "bbox_mAP": 0.074, "bbox_mAP_50": 0.125, "bbox_mAP_75": 0.076, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.011, "bbox_mAP_l": 0.099, "bbox_mAP_copypaste": "0.074 0.125 0.076 0.000 0.011 0.099"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 26415, "data_time": 0.08162, "loss_rpn_cls": 0.03701, "loss_rpn_bbox": 0.05065, "s0.loss_cls": 0.27336, "s0.acc": 92.40527, "s0.loss_bbox": 0.11044, "s1.loss_cls": 0.13225, "s1.acc": 92.55875, "s1.loss_bbox": 0.0903, "s2.loss_cls": 0.05967, "s2.acc": 93.32981, "s2.loss_bbox": 0.04549, "loss": 0.79919, "time": 1.88222}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 26415, "data_time": 0.03665, "loss_rpn_cls": 0.03034, "loss_rpn_bbox": 0.04813, "s0.loss_cls": 0.28949, "s0.acc": 92.19141, "s0.loss_bbox": 0.11293, "s1.loss_cls": 0.13699, "s1.acc": 92.39211, "s1.loss_bbox": 0.09427, "s2.loss_cls": 0.06244, "s2.acc": 93.04349, "s2.loss_bbox": 0.04736, "loss": 0.82195, "time": 1.84838}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 26415, "data_time": 0.03626, "loss_rpn_cls": 0.0281, "loss_rpn_bbox": 0.04577, "s0.loss_cls": 0.2742, "s0.acc": 92.36914, "s0.loss_bbox": 0.10747, "s1.loss_cls": 0.13618, "s1.acc": 92.27384, "s1.loss_bbox": 0.09399, "s2.loss_cls": 0.06269, "s2.acc": 92.86387, "s2.loss_bbox": 0.0473, "loss": 0.7957, "time": 1.83057}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 26415, "data_time": 0.03676, "loss_rpn_cls": 0.02967, "loss_rpn_bbox": 0.0499, "s0.loss_cls": 0.2649, "s0.acc": 92.57324, "s0.loss_bbox": 0.10666, "s1.loss_cls": 0.13156, "s1.acc": 92.28124, "s1.loss_bbox": 0.09558, "s2.loss_cls": 0.06085, "s2.acc": 92.83921, "s2.loss_bbox": 0.04709, "loss": 0.78622, "time": 1.84883}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.02, "memory": 26415, "data_time": 0.03635, "loss_rpn_cls": 0.03417, "loss_rpn_bbox": 0.04226, "s0.loss_cls": 0.27212, "s0.acc": 92.5918, "s0.loss_bbox": 0.10178, "s1.loss_cls": 0.13241, "s1.acc": 92.59328, "s1.loss_bbox": 0.08573, "s2.loss_cls": 0.0623, "s2.acc": 93.01757, "s2.loss_bbox": 0.04523, "loss": 0.77601, "time": 1.83867}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.02, "memory": 26415, "data_time": 0.03703, "loss_rpn_cls": 0.02904, "loss_rpn_bbox": 0.04277, "s0.loss_cls": 0.26836, "s0.acc": 92.58203, "s0.loss_bbox": 0.11025, "s1.loss_cls": 0.12935, "s1.acc": 92.83571, "s1.loss_bbox": 0.09138, "s2.loss_cls": 0.05962, "s2.acc": 93.44088, "s2.loss_bbox": 0.04574, "loss": 0.77652, "time": 1.81453}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.02, "memory": 26415, "data_time": 0.03632, "loss_rpn_cls": 0.0312, "loss_rpn_bbox": 0.05482, "s0.loss_cls": 0.31058, "s0.acc": 91.31543, "s0.loss_bbox": 0.11807, "s1.loss_cls": 0.15399, "s1.acc": 91.23999, "s1.loss_bbox": 0.10323, "s2.loss_cls": 0.07134, "s2.acc": 91.9138, "s2.loss_bbox": 0.05208, "loss": 0.89531, "time": 1.84076}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.02, "memory": 26415, "data_time": 0.03679, "loss_rpn_cls": 0.0341, "loss_rpn_bbox": 0.04832, "s0.loss_cls": 0.28268, "s0.acc": 92.27051, "s0.loss_bbox": 0.1074, "s1.loss_cls": 0.13909, "s1.acc": 92.22408, "s1.loss_bbox": 0.09308, "s2.loss_cls": 0.06391, "s2.acc": 92.90211, "s2.loss_bbox": 0.04808, "loss": 0.81666, "time": 1.81717}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.02, "memory": 26415, "data_time": 0.03641, "loss_rpn_cls": 0.03244, "loss_rpn_bbox": 0.0537, "s0.loss_cls": 0.29274, "s0.acc": 91.84961, "s0.loss_bbox": 0.11986, "s1.loss_cls": 0.13931, "s1.acc": 91.97749, "s1.loss_bbox": 0.0951, "s2.loss_cls": 0.06381, "s2.acc": 92.65486, "s2.loss_bbox": 0.04542, "loss": 0.84238, "time": 1.83085}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.02, "memory": 26415, "data_time": 0.03628, "loss_rpn_cls": 0.03898, "loss_rpn_bbox": 0.0611, "s0.loss_cls": 0.28758, "s0.acc": 92.1084, "s0.loss_bbox": 0.12052, "s1.loss_cls": 0.13643, "s1.acc": 92.2979, "s1.loss_bbox": 0.0974, "s2.loss_cls": 0.06196, "s2.acc": 92.94885, "s2.loss_bbox": 0.0487, "loss": 0.85267, "time": 1.82638}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.02, "memory": 26415, "data_time": 0.03648, "loss_rpn_cls": 0.03603, "loss_rpn_bbox": 0.04997, "s0.loss_cls": 0.27492, "s0.acc": 92.44727, "s0.loss_bbox": 0.10411, "s1.loss_cls": 0.1346, "s1.acc": 92.41688, "s1.loss_bbox": 0.08663, "s2.loss_cls": 0.06217, "s2.acc": 92.94469, "s2.loss_bbox": 0.04391, "loss": 0.79234, "time": 1.81612}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.02, "memory": 26415, "data_time": 0.03697, "loss_rpn_cls": 0.03524, "loss_rpn_bbox": 0.05255, "s0.loss_cls": 0.29436, "s0.acc": 92.08496, "s0.loss_bbox": 0.11508, "s1.loss_cls": 0.14269, "s1.acc": 92.11593, "s1.loss_bbox": 0.09569, "s2.loss_cls": 0.06512, "s2.acc": 92.63148, "s2.loss_bbox": 0.04803, "loss": 0.84877, "time": 1.8275}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.02, "memory": 26415, "data_time": 0.03714, "loss_rpn_cls": 0.03252, "loss_rpn_bbox": 0.0483, "s0.loss_cls": 0.27833, "s0.acc": 92.30371, "s0.loss_bbox": 0.11158, "s1.loss_cls": 0.13475, "s1.acc": 92.29996, "s1.loss_bbox": 0.09178, "s2.loss_cls": 0.06072, "s2.acc": 93.15397, "s2.loss_bbox": 0.04344, "loss": 0.80141, "time": 1.81892}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.02, "memory": 26415, "data_time": 0.03629, "loss_rpn_cls": 0.03373, "loss_rpn_bbox": 0.0464, "s0.loss_cls": 0.27608, "s0.acc": 92.60156, "s0.loss_bbox": 0.10886, "s1.loss_cls": 0.13187, "s1.acc": 92.78595, "s1.loss_bbox": 0.08964, "s2.loss_cls": 0.05914, "s2.acc": 93.36509, "s2.loss_bbox": 0.0439, "loss": 0.78961, "time": 1.84414}
{"mode": "train", "epoch": 4, "iter": 750, "lr": 0.02, "memory": 26415, "data_time": 0.0363, "loss_rpn_cls": 0.02989, "loss_rpn_bbox": 0.0494, "s0.loss_cls": 0.26469, "s0.acc": 92.69141, "s0.loss_bbox": 0.10126, "s1.loss_cls": 0.12968, "s1.acc": 92.69458, "s1.loss_bbox": 0.08941, "s2.loss_cls": 0.05921, "s2.acc": 93.32021, "s2.loss_bbox": 0.04555, "loss": 0.76907, "time": 1.83103}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.02, "memory": 26415, "data_time": 0.03627, "loss_rpn_cls": 0.03145, "loss_rpn_bbox": 0.04471, "s0.loss_cls": 0.27279, "s0.acc": 92.66699, "s0.loss_bbox": 0.10242, "s1.loss_cls": 0.13549, "s1.acc": 92.36274, "s1.loss_bbox": 0.08808, "s2.loss_cls": 0.06293, "s2.acc": 92.83065, "s2.loss_bbox": 0.04451, "loss": 0.78237, "time": 1.84126}
{"mode": "train", "epoch": 4, "iter": 850, "lr": 0.02, "memory": 26415, "data_time": 0.03619, "loss_rpn_cls": 0.03379, "loss_rpn_bbox": 0.05439, "s0.loss_cls": 0.30119, "s0.acc": 91.92871, "s0.loss_bbox": 0.11878, "s1.loss_cls": 0.14421, "s1.acc": 92.07871, "s1.loss_bbox": 0.09664, "s2.loss_cls": 0.06444, "s2.acc": 93.02552, "s2.loss_bbox": 0.04772, "loss": 0.86115, "time": 1.80792}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.02, "memory": 26415, "data_time": 0.0364, "loss_rpn_cls": 0.03542, "loss_rpn_bbox": 0.04733, "s0.loss_cls": 0.30556, "s0.acc": 91.74707, "s0.loss_bbox": 0.11377, "s1.loss_cls": 0.14713, "s1.acc": 91.72125, "s1.loss_bbox": 0.09464, "s2.loss_cls": 0.06693, "s2.acc": 92.27633, "s2.loss_bbox": 0.04821, "loss": 0.85899, "time": 1.84044}
{"mode": "train", "epoch": 4, "iter": 950, "lr": 0.02, "memory": 26415, "data_time": 0.03666, "loss_rpn_cls": 0.03403, "loss_rpn_bbox": 0.06079, "s0.loss_cls": 0.30776, "s0.acc": 91.59766, "s0.loss_bbox": 0.1234, "s1.loss_cls": 0.14847, "s1.acc": 91.64158, "s1.loss_bbox": 0.10126, "s2.loss_cls": 0.06777, "s2.acc": 92.38178, "s2.loss_bbox": 0.04915, "loss": 0.89264, "time": 1.8122}
{"mode": "val", "epoch": 4, "iter": 971, "lr": 0.02, "bbox_mAP": 0.105, "bbox_mAP_50": 0.168, "bbox_mAP_75": 0.108, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.008, "bbox_mAP_l": 0.134, "bbox_mAP_copypaste": "0.105 0.168 0.108 0.000 0.008 0.134"}
