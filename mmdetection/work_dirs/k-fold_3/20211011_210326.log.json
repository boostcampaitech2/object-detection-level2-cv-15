{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+6eb41ac", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        groups=32,\n        base_width=4,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d')),\n    neck=dict(\n        type='NASFPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        stack_times=7),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\ntrain_json = 'train_3.json'\nval_json = 'val_3.json'\ntest_json = 'test.json'\nimg_norm_cfg = dict(\n    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.0625,\n        scale_limit=0.0,\n        rotate_limit=0,\n        interpolation=1,\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.2),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='RGBShift',\n                r_shift_limit=10,\n                g_shift_limit=10,\n                b_shift_limit=10,\n                p=1.0),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=20,\n                sat_shift_limit=30,\n                val_shift_limit=20,\n                p=1.0)\n        ],\n        p=0.1),\n    dict(type='JpegCompression', quality_lower=85, quality_upper=95, p=0.2),\n    dict(type='ChannelShuffle', p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='ShiftScaleRotate',\n                shift_limit=0.0625,\n                scale_limit=0.0,\n                rotate_limit=0,\n                interpolation=1,\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.2),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(\n                        type='RGBShift',\n                        r_shift_limit=10,\n                        g_shift_limit=10,\n                        b_shift_limit=10,\n                        p=1.0),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=20,\n                        sat_shift_limit=30,\n                        val_shift_limit=20,\n                        p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='JpegCompression',\n                quality_lower=85,\n                quality_upper=95,\n                p=0.2),\n            dict(type='ChannelShuffle', p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.651, 117.4, 110.08],\n        std=[54.035, 53.37, 54.784],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='ShiftScaleRotate',\n                        shift_limit=0.0625,\n                        scale_limit=0.0,\n                        rotate_limit=0,\n                        interpolation=1,\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                r_shift_limit=10,\n                                g_shift_limit=10,\n                                b_shift_limit=10,\n                                p=1.0),\n                            dict(\n                                type='HueSaturationValue',\n                                hue_shift_limit=20,\n                                sat_shift_limit=30,\n                                val_shift_limit=20,\n                                p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='JpegCompression',\n                        quality_lower=85,\n                        quality_upper=95,\n                        p=0.2),\n                    dict(type='ChannelShuffle', p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nindex = 3\nwandb_runname = 'mmdet_K-Fold_3'\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='garbage_ObjectDetection',\n                entity='falling90',\n                name='mmdet_K-Fold_3'))\n    ])\nwork_dir = './work_dirs/k-fold_3'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "k-fold_3.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0005, "memory": 20363, "data_time": 0.05692, "loss_rpn_cls": 0.60116, "loss_rpn_bbox": 0.05221, "s0.loss_cls": 0.81174, "s0.acc": 80.17871, "s0.loss_bbox": 0.07765, "s1.loss_cls": 0.41289, "s1.acc": 73.30371, "s1.loss_bbox": 0.03119, "s2.loss_cls": 0.18011, "s2.acc": 82.58008, "s2.loss_bbox": 0.00504, "loss": 2.17198, "time": 1.8986}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 20363, "data_time": 0.01047, "loss_rpn_cls": 0.19478, "loss_rpn_bbox": 0.04235, "s0.loss_cls": 0.31233, "s0.acc": 94.7002, "s0.loss_bbox": 0.12575, "s1.loss_cls": 0.08901, "s1.acc": 97.61621, "s1.loss_bbox": 0.03675, "s2.loss_cls": 0.02979, "s2.acc": 98.73047, "s2.loss_bbox": 0.00563, "loss": 0.83638, "time": 1.84553}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0015, "memory": 20363, "data_time": 0.01029, "loss_rpn_cls": 0.1524, "loss_rpn_bbox": 0.04613, "s0.loss_cls": 0.34769, "s0.acc": 93.3457, "s0.loss_bbox": 0.15766, "s1.loss_cls": 0.0991, "s1.acc": 96.75586, "s1.loss_bbox": 0.05355, "s2.loss_cls": 0.03016, "s2.acc": 98.40625, "s2.loss_bbox": 0.00795, "loss": 0.89465, "time": 1.8376}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.002, "memory": 20411, "data_time": 0.01022, "loss_rpn_cls": 0.11934, "loss_rpn_bbox": 0.03868, "s0.loss_cls": 0.31701, "s0.acc": 93.53418, "s0.loss_bbox": 0.14606, "s1.loss_cls": 0.09597, "s1.acc": 96.6543, "s1.loss_bbox": 0.05545, "s2.loss_cls": 0.02968, "s2.acc": 98.32715, "s2.loss_bbox": 0.01005, "loss": 0.81224, "time": 1.84057}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0025, "memory": 20411, "data_time": 0.01057, "loss_rpn_cls": 0.12559, "loss_rpn_bbox": 0.03985, "s0.loss_cls": 0.31942, "s0.acc": 94.38281, "s0.loss_bbox": 0.12235, "s1.loss_cls": 0.10503, "s1.acc": 96.77539, "s1.loss_bbox": 0.05329, "s2.loss_cls": 0.03207, "s2.acc": 98.39844, "s2.loss_bbox": 0.00936, "loss": 0.80695, "time": 1.84045}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.003, "memory": 20411, "data_time": 0.01061, "loss_rpn_cls": 0.13005, "loss_rpn_bbox": 0.04204, "s0.loss_cls": 0.31236, "s0.acc": 94.10645, "s0.loss_bbox": 0.12664, "s1.loss_cls": 0.10117, "s1.acc": 96.56738, "s1.loss_bbox": 0.0547, "s2.loss_cls": 0.03261, "s2.acc": 98.17188, "s2.loss_bbox": 0.01107, "loss": 0.81063, "time": 1.83876}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0035, "memory": 20411, "data_time": 0.01108, "loss_rpn_cls": 0.12792, "loss_rpn_bbox": 0.04856, "s0.loss_cls": 0.29854, "s0.acc": 94.62988, "s0.loss_bbox": 0.11504, "s1.loss_cls": 0.09622, "s1.acc": 96.85449, "s1.loss_bbox": 0.048, "s2.loss_cls": 0.03169, "s2.acc": 98.27637, "s2.loss_bbox": 0.00947, "loss": 0.77543, "time": 1.84438}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.004, "memory": 20411, "data_time": 0.01069, "loss_rpn_cls": 0.12499, "loss_rpn_bbox": 0.04234, "s0.loss_cls": 0.33469, "s0.acc": 93.78711, "s0.loss_bbox": 0.13813, "s1.loss_cls": 0.10126, "s1.acc": 96.66797, "s1.loss_bbox": 0.05249, "s2.loss_cls": 0.03198, "s2.acc": 98.24023, "s2.loss_bbox": 0.00958, "loss": 0.83545, "time": 1.84319}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0045, "memory": 20411, "data_time": 0.01091, "loss_rpn_cls": 0.1386, "loss_rpn_bbox": 0.05056, "s0.loss_cls": 0.29567, "s0.acc": 94.2998, "s0.loss_bbox": 0.12249, "s1.loss_cls": 0.09052, "s1.acc": 96.99902, "s1.loss_bbox": 0.04506, "s2.loss_cls": 0.02888, "s2.acc": 98.39746, "s2.loss_bbox": 0.00747, "loss": 0.77925, "time": 1.84282}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.005, "memory": 20411, "data_time": 0.01111, "loss_rpn_cls": 0.12545, "loss_rpn_bbox": 0.04473, "s0.loss_cls": 0.29614, "s0.acc": 94.46094, "s0.loss_bbox": 0.11426, "s1.loss_cls": 0.09676, "s1.acc": 96.74316, "s1.loss_bbox": 0.04844, "s2.loss_cls": 0.03225, "s2.acc": 98.15527, "s2.loss_bbox": 0.01034, "loss": 0.76837, "time": 1.84328}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00549, "memory": 20411, "data_time": 0.01134, "loss_rpn_cls": 0.1031, "loss_rpn_bbox": 0.04439, "s0.loss_cls": 0.3153, "s0.acc": 93.54883, "s0.loss_bbox": 0.13552, "s1.loss_cls": 0.10678, "s1.acc": 96.07031, "s1.loss_bbox": 0.06312, "s2.loss_cls": 0.03388, "s2.acc": 97.88672, "s2.loss_bbox": 0.01359, "loss": 0.81567, "time": 1.84988}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00599, "memory": 20411, "data_time": 0.01144, "loss_rpn_cls": 0.10915, "loss_rpn_bbox": 0.04456, "s0.loss_cls": 0.39716, "s0.acc": 92.13672, "s0.loss_bbox": 0.17299, "s1.loss_cls": 0.13313, "s1.acc": 95.30273, "s1.loss_bbox": 0.07906, "s2.loss_cls": 0.04064, "s2.acc": 97.60449, "s2.loss_bbox": 0.01686, "loss": 0.99356, "time": 1.8465}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00649, "memory": 20411, "data_time": 0.01189, "loss_rpn_cls": 0.09191, "loss_rpn_bbox": 0.03685, "s0.loss_cls": 0.37602, "s0.acc": 92.16406, "s0.loss_bbox": 0.16875, "s1.loss_cls": 0.13174, "s1.acc": 94.875, "s1.loss_bbox": 0.08622, "s2.loss_cls": 0.04263, "s2.acc": 97.19922, "s2.loss_bbox": 0.02175, "loss": 0.95589, "time": 1.84715}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00699, "memory": 20411, "data_time": 0.01142, "loss_rpn_cls": 0.07823, "loss_rpn_bbox": 0.03924, "s0.loss_cls": 0.36612, "s0.acc": 91.81738, "s0.loss_bbox": 0.16672, "s1.loss_cls": 0.13969, "s1.acc": 94.23633, "s1.loss_bbox": 0.0953, "s2.loss_cls": 0.04673, "s2.acc": 96.66797, "s2.loss_bbox": 0.02599, "loss": 0.95803, "time": 1.84639}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00749, "memory": 20411, "data_time": 0.01152, "loss_rpn_cls": 0.09219, "loss_rpn_bbox": 0.04949, "s0.loss_cls": 0.37528, "s0.acc": 91.64355, "s0.loss_bbox": 0.16549, "s1.loss_cls": 0.14253, "s1.acc": 93.89062, "s1.loss_bbox": 0.09356, "s2.loss_cls": 0.05162, "s2.acc": 96.02246, "s2.loss_bbox": 0.02976, "loss": 0.99992, "time": 1.84924}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00799, "memory": 20411, "data_time": 0.01184, "loss_rpn_cls": 0.10096, "loss_rpn_bbox": 0.04325, "s0.loss_cls": 0.39033, "s0.acc": 91.47461, "s0.loss_bbox": 0.17078, "s1.loss_cls": 0.14938, "s1.acc": 93.79004, "s1.loss_bbox": 0.09906, "s2.loss_cls": 0.05023, "s2.acc": 96.16797, "s2.loss_bbox": 0.02907, "loss": 1.03306, "time": 1.85152}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00849, "memory": 20411, "data_time": 0.01169, "loss_rpn_cls": 0.10323, "loss_rpn_bbox": 0.04423, "s0.loss_cls": 0.4111, "s0.acc": 90.85449, "s0.loss_bbox": 0.17969, "s1.loss_cls": 0.15747, "s1.acc": 93.29492, "s1.loss_bbox": 0.09911, "s2.loss_cls": 0.0572, "s2.acc": 95.50293, "s2.loss_bbox": 0.0326, "loss": 1.08462, "time": 1.84906}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00899, "memory": 20411, "data_time": 0.0117, "loss_rpn_cls": 0.09535, "loss_rpn_bbox": 0.04498, "s0.loss_cls": 0.36044, "s0.acc": 91.94336, "s0.loss_bbox": 0.15085, "s1.loss_cls": 0.14824, "s1.acc": 93.41992, "s1.loss_bbox": 0.09617, "s2.loss_cls": 0.05685, "s2.acc": 95.0625, "s2.loss_bbox": 0.03603, "loss": 0.9889, "time": 1.85004}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00949, "memory": 20411, "data_time": 0.01189, "loss_rpn_cls": 0.07843, "loss_rpn_bbox": 0.03962, "s0.loss_cls": 0.36602, "s0.acc": 91.73145, "s0.loss_bbox": 0.15285, "s1.loss_cls": 0.15073, "s1.acc": 93.22266, "s1.loss_bbox": 0.09981, "s2.loss_cls": 0.05797, "s2.acc": 95.03906, "s2.loss_bbox": 0.03712, "loss": 0.98255, "time": 1.84978}
{"mode": "val", "epoch": 1, "iter": 976, "lr": 0.00976, "bbox_mAP": 0.021, "bbox_mAP_50": 0.04, "bbox_mAP_75": 0.021, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.026, "bbox_mAP_copypaste": "0.021 0.040 0.021 0.000 0.000 0.026"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 20411, "data_time": 0.06016, "loss_rpn_cls": 0.07426, "loss_rpn_bbox": 0.04091, "s0.loss_cls": 0.36641, "s0.acc": 91.63867, "s0.loss_bbox": 0.1533, "s1.loss_cls": 0.15201, "s1.acc": 92.87012, "s1.loss_bbox": 0.10184, "s2.loss_cls": 0.0585, "s2.acc": 94.7334, "s2.loss_bbox": 0.03863, "loss": 0.98587, "time": 1.90028}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 20411, "data_time": 0.01148, "loss_rpn_cls": 0.08861, "loss_rpn_bbox": 0.04197, "s0.loss_cls": 0.39895, "s0.acc": 91.11133, "s0.loss_bbox": 0.16258, "s1.loss_cls": 0.16607, "s1.acc": 92.53418, "s1.loss_bbox": 0.10649, "s2.loss_cls": 0.0634, "s2.acc": 94.46875, "s2.loss_bbox": 0.03974, "loss": 1.06781, "time": 1.84873}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 20411, "data_time": 0.0112, "loss_rpn_cls": 0.07234, "loss_rpn_bbox": 0.03907, "s0.loss_cls": 0.36714, "s0.acc": 91.49902, "s0.loss_bbox": 0.15296, "s1.loss_cls": 0.15347, "s1.acc": 92.68945, "s1.loss_bbox": 0.10652, "s2.loss_cls": 0.05912, "s2.acc": 94.51953, "s2.loss_bbox": 0.04136, "loss": 0.99197, "time": 1.84957}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 20411, "data_time": 0.01133, "loss_rpn_cls": 0.0645, "loss_rpn_bbox": 0.04012, "s0.loss_cls": 0.35659, "s0.acc": 91.41113, "s0.loss_bbox": 0.14578, "s1.loss_cls": 0.16023, "s1.acc": 92.18848, "s1.loss_bbox": 0.10815, "s2.loss_cls": 0.06453, "s2.acc": 93.75488, "s2.loss_bbox": 0.04378, "loss": 0.98367, "time": 1.84893}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 20411, "data_time": 0.01143, "loss_rpn_cls": 0.08222, "loss_rpn_bbox": 0.04138, "s0.loss_cls": 0.35273, "s0.acc": 91.41406, "s0.loss_bbox": 0.13906, "s1.loss_cls": 0.15826, "s1.acc": 92.12305, "s1.loss_bbox": 0.10417, "s2.loss_cls": 0.06415, "s2.acc": 93.75977, "s2.loss_bbox": 0.04407, "loss": 0.98604, "time": 1.85267}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 20411, "data_time": 0.01109, "loss_rpn_cls": 0.08234, "loss_rpn_bbox": 0.04881, "s0.loss_cls": 0.38996, "s0.acc": 90.62988, "s0.loss_bbox": 0.1573, "s1.loss_cls": 0.17572, "s1.acc": 91.36579, "s1.loss_bbox": 0.12079, "s2.loss_cls": 0.06915, "s2.acc": 93.40307, "s2.loss_bbox": 0.04755, "loss": 1.09162, "time": 1.85163}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 20411, "data_time": 0.01139, "loss_rpn_cls": 0.08162, "loss_rpn_bbox": 0.0485, "s0.loss_cls": 0.39055, "s0.acc": 90.78809, "s0.loss_bbox": 0.1531, "s1.loss_cls": 0.17457, "s1.acc": 91.50442, "s1.loss_bbox": 0.10929, "s2.loss_cls": 0.06991, "s2.acc": 93.16171, "s2.loss_bbox": 0.04494, "loss": 1.07248, "time": 1.85286}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 20411, "data_time": 0.01154, "loss_rpn_cls": 0.07752, "loss_rpn_bbox": 0.04016, "s0.loss_cls": 0.40213, "s0.acc": 90.20703, "s0.loss_bbox": 0.15853, "s1.loss_cls": 0.182, "s1.acc": 90.82204, "s1.loss_bbox": 0.12037, "s2.loss_cls": 0.07551, "s2.acc": 92.39121, "s2.loss_bbox": 0.05249, "loss": 1.1087, "time": 1.84957}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "memory": 20411, "data_time": 0.01208, "loss_rpn_cls": 0.06709, "loss_rpn_bbox": 0.03879, "s0.loss_cls": 0.35444, "s0.acc": 91.06934, "s0.loss_bbox": 0.14027, "s1.loss_cls": 0.16536, "s1.acc": 91.55762, "s1.loss_bbox": 0.10897, "s2.loss_cls": 0.06921, "s2.acc": 93.10645, "s2.loss_bbox": 0.04792, "loss": 0.99206, "time": 1.85086}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.01, "memory": 20411, "data_time": 0.01196, "loss_rpn_cls": 0.07932, "loss_rpn_bbox": 0.03941, "s0.loss_cls": 0.39019, "s0.acc": 90.94141, "s0.loss_bbox": 0.14657, "s1.loss_cls": 0.17584, "s1.acc": 91.67504, "s1.loss_bbox": 0.10994, "s2.loss_cls": 0.07072, "s2.acc": 93.35999, "s2.loss_bbox": 0.0464, "loss": 1.0584, "time": 1.85977}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.01, "memory": 20411, "data_time": 0.01202, "loss_rpn_cls": 0.08514, "loss_rpn_bbox": 0.0431, "s0.loss_cls": 0.40279, "s0.acc": 90.39355, "s0.loss_bbox": 0.15785, "s1.loss_cls": 0.17924, "s1.acc": 91.16402, "s1.loss_bbox": 0.11731, "s2.loss_cls": 0.07253, "s2.acc": 92.78704, "s2.loss_bbox": 0.05022, "loss": 1.1082, "time": 1.86996}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 20411, "data_time": 0.0124, "loss_rpn_cls": 0.08408, "loss_rpn_bbox": 0.03887, "s0.loss_cls": 0.37155, "s0.acc": 91.06543, "s0.loss_bbox": 0.14198, "s1.loss_cls": 0.17473, "s1.acc": 91.40912, "s1.loss_bbox": 0.11241, "s2.loss_cls": 0.0731, "s2.acc": 93.02705, "s2.loss_bbox": 0.04823, "loss": 1.04494, "time": 1.85945}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.01, "memory": 20411, "data_time": 0.01238, "loss_rpn_cls": 0.06218, "loss_rpn_bbox": 0.03544, "s0.loss_cls": 0.36144, "s0.acc": 90.88672, "s0.loss_bbox": 0.13064, "s1.loss_cls": 0.17644, "s1.acc": 90.5933, "s1.loss_bbox": 0.11129, "s2.loss_cls": 0.07754, "s2.acc": 91.75736, "s2.loss_bbox": 0.05371, "loss": 1.00868, "time": 1.85364}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 20411, "data_time": 0.013, "loss_rpn_cls": 0.08178, "loss_rpn_bbox": 0.04249, "s0.loss_cls": 0.39099, "s0.acc": 90.36621, "s0.loss_bbox": 0.14699, "s1.loss_cls": 0.18327, "s1.acc": 90.63866, "s1.loss_bbox": 0.1192, "s2.loss_cls": 0.07806, "s2.acc": 91.94805, "s2.loss_bbox": 0.05326, "loss": 1.09604, "time": 1.85899}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.01, "memory": 20411, "data_time": 0.01278, "loss_rpn_cls": 0.08611, "loss_rpn_bbox": 0.04359, "s0.loss_cls": 0.36767, "s0.acc": 91.19043, "s0.loss_bbox": 0.12931, "s1.loss_cls": 0.17183, "s1.acc": 91.35842, "s1.loss_bbox": 0.10448, "s2.loss_cls": 0.07398, "s2.acc": 92.40919, "s2.loss_bbox": 0.04891, "loss": 1.02587, "time": 1.86209}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 20411, "data_time": 0.01316, "loss_rpn_cls": 0.07466, "loss_rpn_bbox": 0.03636, "s0.loss_cls": 0.40107, "s0.acc": 89.9668, "s0.loss_bbox": 0.15646, "s1.loss_cls": 0.18284, "s1.acc": 90.64419, "s1.loss_bbox": 0.11864, "s2.loss_cls": 0.076, "s2.acc": 92.31344, "s2.loss_bbox": 0.05077, "loss": 1.09679, "time": 1.86013}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.01, "memory": 20411, "data_time": 0.01279, "loss_rpn_cls": 0.08192, "loss_rpn_bbox": 0.03838, "s0.loss_cls": 0.39046, "s0.acc": 90.45117, "s0.loss_bbox": 0.14666, "s1.loss_cls": 0.18884, "s1.acc": 90.33603, "s1.loss_bbox": 0.12129, "s2.loss_cls": 0.08158, "s2.acc": 91.59155, "s2.loss_bbox": 0.05563, "loss": 1.10476, "time": 1.85716}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 20411, "data_time": 0.01318, "loss_rpn_cls": 0.06675, "loss_rpn_bbox": 0.04066, "s0.loss_cls": 0.36042, "s0.acc": 90.83496, "s0.loss_bbox": 0.13741, "s1.loss_cls": 0.17048, "s1.acc": 91.04782, "s1.loss_bbox": 0.10902, "s2.loss_cls": 0.07336, "s2.acc": 92.31911, "s2.loss_bbox": 0.05191, "loss": 1.01001, "time": 1.8532}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.01, "memory": 20411, "data_time": 0.01303, "loss_rpn_cls": 0.06252, "loss_rpn_bbox": 0.03756, "s0.loss_cls": 0.37493, "s0.acc": 90.54395, "s0.loss_bbox": 0.13678, "s1.loss_cls": 0.18833, "s1.acc": 90.17317, "s1.loss_bbox": 0.11893, "s2.loss_cls": 0.08325, "s2.acc": 91.29826, "s2.loss_bbox": 0.05913, "loss": 1.06142, "time": 1.86249}
