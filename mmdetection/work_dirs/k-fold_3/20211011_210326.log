2021-10-11 12:03:27,761 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+6eb41ac
------------------------------------------------------------

2021-10-11 12:03:28,366 - mmdet - INFO - Distributed training: False
2021-10-11 12:03:29,065 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        groups=32,
        base_width=4,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d')),
    neck=dict(
        type='NASFPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        stack_times=7),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
train_json = 'train_3.json'
val_json = 'val_3.json'
test_json = 'test.json'
img_norm_cfg = dict(
    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)
albu_train_transforms = [
    dict(
        type='ShiftScaleRotate',
        shift_limit=0.0625,
        scale_limit=0.0,
        rotate_limit=0,
        interpolation=1,
        p=0.5),
    dict(
        type='RandomBrightnessContrast',
        brightness_limit=[0.1, 0.3],
        contrast_limit=[0.1, 0.3],
        p=0.2),
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='RGBShift',
                r_shift_limit=10,
                g_shift_limit=10,
                b_shift_limit=10,
                p=1.0),
            dict(
                type='HueSaturationValue',
                hue_shift_limit=20,
                sat_shift_limit=30,
                val_shift_limit=20,
                p=1.0)
        ],
        p=0.1),
    dict(type='JpegCompression', quality_lower=85, quality_upper=95, p=0.2),
    dict(type='ChannelShuffle', p=0.1)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='ShiftScaleRotate',
                shift_limit=0.0625,
                scale_limit=0.0,
                rotate_limit=0,
                interpolation=1,
                p=0.5),
            dict(
                type='RandomBrightnessContrast',
                brightness_limit=[0.1, 0.3],
                contrast_limit=[0.1, 0.3],
                p=0.2),
            dict(
                type='OneOf',
                transforms=[
                    dict(
                        type='RGBShift',
                        r_shift_limit=10,
                        g_shift_limit=10,
                        b_shift_limit=10,
                        p=1.0),
                    dict(
                        type='HueSaturationValue',
                        hue_shift_limit=20,
                        sat_shift_limit=30,
                        val_shift_limit=20,
                        p=1.0)
                ],
                p=0.1),
            dict(
                type='JpegCompression',
                quality_lower=85,
                quality_upper=95,
                p=0.2),
            dict(type='ChannelShuffle', p=0.1)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.651, 117.4, 110.08],
        std=[54.035, 53.37, 54.784],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.651, 117.4, 110.08],
                std=[54.035, 53.37, 54.784],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_3.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='ShiftScaleRotate',
                        shift_limit=0.0625,
                        scale_limit=0.0,
                        rotate_limit=0,
                        interpolation=1,
                        p=0.5),
                    dict(
                        type='RandomBrightnessContrast',
                        brightness_limit=[0.1, 0.3],
                        contrast_limit=[0.1, 0.3],
                        p=0.2),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='RGBShift',
                                r_shift_limit=10,
                                g_shift_limit=10,
                                b_shift_limit=10,
                                p=1.0),
                            dict(
                                type='HueSaturationValue',
                                hue_shift_limit=20,
                                sat_shift_limit=30,
                                val_shift_limit=20,
                                p=1.0)
                        ],
                        p=0.1),
                    dict(
                        type='JpegCompression',
                        quality_lower=85,
                        quality_upper=95,
                        p=0.2),
                    dict(type='ChannelShuffle', p=0.1)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.651, 117.4, 110.08],
                std=[54.035, 53.37, 54.784],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_3.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.651, 117.4, 110.08],
                        std=[54.035, 53.37, 54.784],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.651, 117.4, 110.08],
                        std=[54.035, 53.37, 54.784],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
index = 3
wandb_runname = 'mmdet_K-Fold_3'
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            interval=1000,
            init_kwargs=dict(
                project='garbage_ObjectDetection',
                entity='falling90',
                name='mmdet_K-Fold_3'))
    ])
work_dir = './work_dirs/k-fold_3'
gpu_ids = range(0, 1)

2021-10-11 12:03:30,866 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_32x4d'}
2021-10-11 12:03:31,074 - mmdet - INFO - initialize NASFPN with init_cfg {'type': 'Caffe2Xavier', 'layer': 'Conv2d'}
2021-10-11 12:03:31,312 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-11 12:03:31,320 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-11 12:03:31,638 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-11 12:03:31,959 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.extra_downsamples.0.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.extra_downsamples.0.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.0.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.0.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.1.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.1.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.2.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.2.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.3.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.3.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.4.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.4.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.5.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.5.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.gp_64_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.gp_64_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.sum_44_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.sum_44_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.sum_43_3.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.sum_43_3.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.sum_34_4.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.sum_34_4.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.sum_55_5.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.sum_55_5.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.sum_77_7.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.sum_77_7.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_stages.6.gp_75_6.out_conv.conv.weight - torch.Size([256, 256, 3, 3]): 
Caffe2XavierInit: a=1, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.fpn_stages.6.gp_75_6.out_conv.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([5, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([20, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([20]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-11 12:03:35,792 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/k-fold_3
2021-10-11 12:03:35,793 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-11 12:03:35,793 - mmdet - INFO - workflow: [('train', 1)], max: 30 epochs
2021-10-11 12:05:16,739 - mmdet - INFO - Epoch [1][50/977]	lr: 4.995e-04, eta: 15:25:52, time: 1.899, data_time: 0.057, memory: 20363, loss_rpn_cls: 0.6012, loss_rpn_bbox: 0.0522, s0.loss_cls: 0.8117, s0.acc: 80.1787, s0.loss_bbox: 0.0776, s1.loss_cls: 0.4129, s1.acc: 73.3037, s1.loss_bbox: 0.0312, s2.loss_cls: 0.1801, s2.acc: 82.5801, s2.loss_bbox: 0.0050, loss: 2.1720
2021-10-11 12:06:49,016 - mmdet - INFO - Epoch [1][100/977]	lr: 9.990e-04, eta: 15:11:22, time: 1.846, data_time: 0.010, memory: 20363, loss_rpn_cls: 0.1948, loss_rpn_bbox: 0.0423, s0.loss_cls: 0.3123, s0.acc: 94.7002, s0.loss_bbox: 0.1258, s1.loss_cls: 0.0890, s1.acc: 97.6162, s1.loss_bbox: 0.0367, s2.loss_cls: 0.0298, s2.acc: 98.7305, s2.loss_bbox: 0.0056, loss: 0.8364
2021-10-11 12:08:20,896 - mmdet - INFO - Epoch [1][150/977]	lr: 1.499e-03, eta: 15:04:14, time: 1.838, data_time: 0.010, memory: 20363, loss_rpn_cls: 0.1524, loss_rpn_bbox: 0.0461, s0.loss_cls: 0.3477, s0.acc: 93.3457, s0.loss_bbox: 0.1577, s1.loss_cls: 0.0991, s1.acc: 96.7559, s1.loss_bbox: 0.0535, s2.loss_cls: 0.0302, s2.acc: 98.4062, s2.loss_bbox: 0.0080, loss: 0.8946
2021-10-11 12:09:52,925 - mmdet - INFO - Epoch [1][200/977]	lr: 1.998e-03, eta: 15:00:15, time: 1.841, data_time: 0.010, memory: 20411, loss_rpn_cls: 0.1193, loss_rpn_bbox: 0.0387, s0.loss_cls: 0.3170, s0.acc: 93.5342, s0.loss_bbox: 0.1461, s1.loss_cls: 0.0960, s1.acc: 96.6543, s1.loss_bbox: 0.0554, s2.loss_cls: 0.0297, s2.acc: 98.3271, s2.loss_bbox: 0.0100, loss: 0.8122
2021-10-11 12:11:24,949 - mmdet - INFO - Epoch [1][250/977]	lr: 2.498e-03, eta: 14:57:15, time: 1.840, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1256, loss_rpn_bbox: 0.0399, s0.loss_cls: 0.3194, s0.acc: 94.3828, s0.loss_bbox: 0.1223, s1.loss_cls: 0.1050, s1.acc: 96.7754, s1.loss_bbox: 0.0533, s2.loss_cls: 0.0321, s2.acc: 98.3984, s2.loss_bbox: 0.0094, loss: 0.8070
2021-10-11 12:12:56,888 - mmdet - INFO - Epoch [1][300/977]	lr: 2.997e-03, eta: 14:54:35, time: 1.839, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1300, loss_rpn_bbox: 0.0420, s0.loss_cls: 0.3124, s0.acc: 94.1064, s0.loss_bbox: 0.1266, s1.loss_cls: 0.1012, s1.acc: 96.5674, s1.loss_bbox: 0.0547, s2.loss_cls: 0.0326, s2.acc: 98.1719, s2.loss_bbox: 0.0111, loss: 0.8106
2021-10-11 12:14:29,107 - mmdet - INFO - Epoch [1][350/977]	lr: 3.497e-03, eta: 14:52:39, time: 1.844, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1279, loss_rpn_bbox: 0.0486, s0.loss_cls: 0.2985, s0.acc: 94.6299, s0.loss_bbox: 0.1150, s1.loss_cls: 0.0962, s1.acc: 96.8545, s1.loss_bbox: 0.0480, s2.loss_cls: 0.0317, s2.acc: 98.2764, s2.loss_bbox: 0.0095, loss: 0.7754
2021-10-11 12:16:01,267 - mmdet - INFO - Epoch [1][400/977]	lr: 3.996e-03, eta: 14:50:44, time: 1.843, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1250, loss_rpn_bbox: 0.0423, s0.loss_cls: 0.3347, s0.acc: 93.7871, s0.loss_bbox: 0.1381, s1.loss_cls: 0.1013, s1.acc: 96.6680, s1.loss_bbox: 0.0525, s2.loss_cls: 0.0320, s2.acc: 98.2402, s2.loss_bbox: 0.0096, loss: 0.8355
2021-10-11 12:17:33,409 - mmdet - INFO - Epoch [1][450/977]	lr: 4.496e-03, eta: 14:48:52, time: 1.843, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1386, loss_rpn_bbox: 0.0506, s0.loss_cls: 0.2957, s0.acc: 94.2998, s0.loss_bbox: 0.1225, s1.loss_cls: 0.0905, s1.acc: 96.9990, s1.loss_bbox: 0.0451, s2.loss_cls: 0.0289, s2.acc: 98.3975, s2.loss_bbox: 0.0075, loss: 0.7792
2021-10-11 12:19:05,573 - mmdet - INFO - Epoch [1][500/977]	lr: 4.995e-03, eta: 14:47:07, time: 1.843, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1255, loss_rpn_bbox: 0.0447, s0.loss_cls: 0.2961, s0.acc: 94.4609, s0.loss_bbox: 0.1143, s1.loss_cls: 0.0968, s1.acc: 96.7432, s1.loss_bbox: 0.0484, s2.loss_cls: 0.0322, s2.acc: 98.1553, s2.loss_bbox: 0.0103, loss: 0.7684
2021-10-11 12:20:38,068 - mmdet - INFO - Epoch [1][550/977]	lr: 5.495e-03, eta: 14:45:40, time: 1.850, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1031, loss_rpn_bbox: 0.0444, s0.loss_cls: 0.3153, s0.acc: 93.5488, s0.loss_bbox: 0.1355, s1.loss_cls: 0.1068, s1.acc: 96.0703, s1.loss_bbox: 0.0631, s2.loss_cls: 0.0339, s2.acc: 97.8867, s2.loss_bbox: 0.0136, loss: 0.8157
2021-10-11 12:22:10,393 - mmdet - INFO - Epoch [1][600/977]	lr: 5.994e-03, eta: 14:44:05, time: 1.847, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.1092, loss_rpn_bbox: 0.0446, s0.loss_cls: 0.3972, s0.acc: 92.1367, s0.loss_bbox: 0.1730, s1.loss_cls: 0.1331, s1.acc: 95.3027, s1.loss_bbox: 0.0791, s2.loss_cls: 0.0406, s2.acc: 97.6045, s2.loss_bbox: 0.0169, loss: 0.9936
2021-10-11 12:23:42,752 - mmdet - INFO - Epoch [1][650/977]	lr: 6.494e-03, eta: 14:42:32, time: 1.847, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0919, loss_rpn_bbox: 0.0369, s0.loss_cls: 0.3760, s0.acc: 92.1641, s0.loss_bbox: 0.1688, s1.loss_cls: 0.1317, s1.acc: 94.8750, s1.loss_bbox: 0.0862, s2.loss_cls: 0.0426, s2.acc: 97.1992, s2.loss_bbox: 0.0218, loss: 0.9559
2021-10-11 12:25:15,071 - mmdet - INFO - Epoch [1][700/977]	lr: 6.993e-03, eta: 14:40:57, time: 1.846, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0782, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.3661, s0.acc: 91.8174, s0.loss_bbox: 0.1667, s1.loss_cls: 0.1397, s1.acc: 94.2363, s1.loss_bbox: 0.0953, s2.loss_cls: 0.0467, s2.acc: 96.6680, s2.loss_bbox: 0.0260, loss: 0.9580
2021-10-11 12:26:47,534 - mmdet - INFO - Epoch [1][750/977]	lr: 7.493e-03, eta: 14:39:28, time: 1.849, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0922, loss_rpn_bbox: 0.0495, s0.loss_cls: 0.3753, s0.acc: 91.6436, s0.loss_bbox: 0.1655, s1.loss_cls: 0.1425, s1.acc: 93.8906, s1.loss_bbox: 0.0936, s2.loss_cls: 0.0516, s2.acc: 96.0225, s2.loss_bbox: 0.0298, loss: 0.9999
2021-10-11 12:28:20,111 - mmdet - INFO - Epoch [1][800/977]	lr: 7.992e-03, eta: 14:38:02, time: 1.852, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.1010, loss_rpn_bbox: 0.0432, s0.loss_cls: 0.3903, s0.acc: 91.4746, s0.loss_bbox: 0.1708, s1.loss_cls: 0.1494, s1.acc: 93.7900, s1.loss_bbox: 0.0991, s2.loss_cls: 0.0502, s2.acc: 96.1680, s2.loss_bbox: 0.0291, loss: 1.0331
2021-10-11 12:29:52,565 - mmdet - INFO - Epoch [1][850/977]	lr: 8.492e-03, eta: 14:36:32, time: 1.849, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.1032, loss_rpn_bbox: 0.0442, s0.loss_cls: 0.4111, s0.acc: 90.8545, s0.loss_bbox: 0.1797, s1.loss_cls: 0.1575, s1.acc: 93.2949, s1.loss_bbox: 0.0991, s2.loss_cls: 0.0572, s2.acc: 95.5029, s2.loss_bbox: 0.0326, loss: 1.0846
2021-10-11 12:31:25,067 - mmdet - INFO - Epoch [1][900/977]	lr: 8.991e-03, eta: 14:35:03, time: 1.850, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0953, loss_rpn_bbox: 0.0450, s0.loss_cls: 0.3604, s0.acc: 91.9434, s0.loss_bbox: 0.1508, s1.loss_cls: 0.1482, s1.acc: 93.4199, s1.loss_bbox: 0.0962, s2.loss_cls: 0.0568, s2.acc: 95.0625, s2.loss_bbox: 0.0360, loss: 0.9889
2021-10-11 12:32:57,557 - mmdet - INFO - Epoch [1][950/977]	lr: 9.491e-03, eta: 14:33:33, time: 1.850, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0784, loss_rpn_bbox: 0.0396, s0.loss_cls: 0.3660, s0.acc: 91.7314, s0.loss_bbox: 0.1529, s1.loss_cls: 0.1507, s1.acc: 93.2227, s1.loss_bbox: 0.0998, s2.loss_cls: 0.0580, s2.acc: 95.0391, s2.loss_bbox: 0.0371, loss: 0.9825
2021-10-11 12:33:47,439 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-11 12:36:31,002 - mmdet - INFO - Evaluating bbox...
2021-10-11 12:36:35,046 - mmdet - INFO - Exp name: k-fold_3.py
2021-10-11 12:36:35,048 - mmdet - INFO - Epoch(val) [1][976]	bbox_mAP: 0.0210, bbox_mAP_50: 0.0400, bbox_mAP_75: 0.0210, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0260, bbox_mAP_copypaste: 0.021 0.040 0.021 0.000 0.000 0.026
2021-10-11 12:38:10,081 - mmdet - INFO - Epoch [2][50/977]	lr: 1.000e-02, eta: 14:09:28, time: 1.900, data_time: 0.060, memory: 20411, loss_rpn_cls: 0.0743, loss_rpn_bbox: 0.0409, s0.loss_cls: 0.3664, s0.acc: 91.6387, s0.loss_bbox: 0.1533, s1.loss_cls: 0.1520, s1.acc: 92.8701, s1.loss_bbox: 0.1018, s2.loss_cls: 0.0585, s2.acc: 94.7334, s2.loss_bbox: 0.0386, loss: 0.9859
2021-10-11 12:39:42,518 - mmdet - INFO - Epoch [2][100/977]	lr: 1.000e-02, eta: 14:08:59, time: 1.849, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0886, loss_rpn_bbox: 0.0420, s0.loss_cls: 0.3990, s0.acc: 91.1113, s0.loss_bbox: 0.1626, s1.loss_cls: 0.1661, s1.acc: 92.5342, s1.loss_bbox: 0.1065, s2.loss_cls: 0.0634, s2.acc: 94.4688, s2.loss_bbox: 0.0397, loss: 1.0678
2021-10-11 12:41:14,999 - mmdet - INFO - Epoch [2][150/977]	lr: 1.000e-02, eta: 14:08:26, time: 1.850, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0723, loss_rpn_bbox: 0.0391, s0.loss_cls: 0.3671, s0.acc: 91.4990, s0.loss_bbox: 0.1530, s1.loss_cls: 0.1535, s1.acc: 92.6895, s1.loss_bbox: 0.1065, s2.loss_cls: 0.0591, s2.acc: 94.5195, s2.loss_bbox: 0.0414, loss: 0.9920
2021-10-11 12:42:47,446 - mmdet - INFO - Epoch [2][200/977]	lr: 1.000e-02, eta: 14:07:46, time: 1.849, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0645, loss_rpn_bbox: 0.0401, s0.loss_cls: 0.3566, s0.acc: 91.4111, s0.loss_bbox: 0.1458, s1.loss_cls: 0.1602, s1.acc: 92.1885, s1.loss_bbox: 0.1081, s2.loss_cls: 0.0645, s2.acc: 93.7549, s2.loss_bbox: 0.0438, loss: 0.9837
2021-10-11 12:44:20,080 - mmdet - INFO - Epoch [2][250/977]	lr: 1.000e-02, eta: 14:07:07, time: 1.853, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0822, loss_rpn_bbox: 0.0414, s0.loss_cls: 0.3527, s0.acc: 91.4141, s0.loss_bbox: 0.1391, s1.loss_cls: 0.1583, s1.acc: 92.1230, s1.loss_bbox: 0.1042, s2.loss_cls: 0.0641, s2.acc: 93.7598, s2.loss_bbox: 0.0441, loss: 0.9860
2021-10-11 12:45:52,663 - mmdet - INFO - Epoch [2][300/977]	lr: 1.000e-02, eta: 14:06:22, time: 1.852, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0823, loss_rpn_bbox: 0.0488, s0.loss_cls: 0.3900, s0.acc: 90.6299, s0.loss_bbox: 0.1573, s1.loss_cls: 0.1757, s1.acc: 91.3658, s1.loss_bbox: 0.1208, s2.loss_cls: 0.0691, s2.acc: 93.4031, s2.loss_bbox: 0.0476, loss: 1.0916
2021-10-11 12:47:25,307 - mmdet - INFO - Epoch [2][350/977]	lr: 1.000e-02, eta: 14:05:35, time: 1.853, data_time: 0.011, memory: 20411, loss_rpn_cls: 0.0816, loss_rpn_bbox: 0.0485, s0.loss_cls: 0.3905, s0.acc: 90.7881, s0.loss_bbox: 0.1531, s1.loss_cls: 0.1746, s1.acc: 91.5044, s1.loss_bbox: 0.1093, s2.loss_cls: 0.0699, s2.acc: 93.1617, s2.loss_bbox: 0.0449, loss: 1.0725
2021-10-11 12:48:57,786 - mmdet - INFO - Epoch [2][400/977]	lr: 1.000e-02, eta: 14:04:42, time: 1.850, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0775, loss_rpn_bbox: 0.0402, s0.loss_cls: 0.4021, s0.acc: 90.2070, s0.loss_bbox: 0.1585, s1.loss_cls: 0.1820, s1.acc: 90.8220, s1.loss_bbox: 0.1204, s2.loss_cls: 0.0755, s2.acc: 92.3912, s2.loss_bbox: 0.0525, loss: 1.1087
2021-10-11 12:50:30,331 - mmdet - INFO - Epoch [2][450/977]	lr: 1.000e-02, eta: 14:03:46, time: 1.851, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0671, loss_rpn_bbox: 0.0388, s0.loss_cls: 0.3544, s0.acc: 91.0693, s0.loss_bbox: 0.1403, s1.loss_cls: 0.1654, s1.acc: 91.5576, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0692, s2.acc: 93.1064, s2.loss_bbox: 0.0479, loss: 0.9921
2021-10-11 12:52:03,320 - mmdet - INFO - Epoch [2][500/977]	lr: 1.000e-02, eta: 14:02:57, time: 1.860, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0793, loss_rpn_bbox: 0.0394, s0.loss_cls: 0.3902, s0.acc: 90.9414, s0.loss_bbox: 0.1466, s1.loss_cls: 0.1758, s1.acc: 91.6750, s1.loss_bbox: 0.1099, s2.loss_cls: 0.0707, s2.acc: 93.3600, s2.loss_bbox: 0.0464, loss: 1.0584
2021-10-11 12:53:36,820 - mmdet - INFO - Epoch [2][550/977]	lr: 1.000e-02, eta: 14:02:14, time: 1.870, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0851, loss_rpn_bbox: 0.0431, s0.loss_cls: 0.4028, s0.acc: 90.3936, s0.loss_bbox: 0.1579, s1.loss_cls: 0.1792, s1.acc: 91.1640, s1.loss_bbox: 0.1173, s2.loss_cls: 0.0725, s2.acc: 92.7870, s2.loss_bbox: 0.0502, loss: 1.1082
2021-10-11 12:55:09,793 - mmdet - INFO - Epoch [2][600/977]	lr: 1.000e-02, eta: 14:01:19, time: 1.859, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0841, loss_rpn_bbox: 0.0389, s0.loss_cls: 0.3715, s0.acc: 91.0654, s0.loss_bbox: 0.1420, s1.loss_cls: 0.1747, s1.acc: 91.4091, s1.loss_bbox: 0.1124, s2.loss_cls: 0.0731, s2.acc: 93.0271, s2.loss_bbox: 0.0482, loss: 1.0449
2021-10-11 12:56:42,476 - mmdet - INFO - Epoch [2][650/977]	lr: 1.000e-02, eta: 14:00:16, time: 1.854, data_time: 0.012, memory: 20411, loss_rpn_cls: 0.0622, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.3614, s0.acc: 90.8867, s0.loss_bbox: 0.1306, s1.loss_cls: 0.1764, s1.acc: 90.5933, s1.loss_bbox: 0.1113, s2.loss_cls: 0.0775, s2.acc: 91.7574, s2.loss_bbox: 0.0537, loss: 1.0087
2021-10-11 12:58:15,426 - mmdet - INFO - Epoch [2][700/977]	lr: 1.000e-02, eta: 13:59:17, time: 1.859, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0818, loss_rpn_bbox: 0.0425, s0.loss_cls: 0.3910, s0.acc: 90.3662, s0.loss_bbox: 0.1470, s1.loss_cls: 0.1833, s1.acc: 90.6387, s1.loss_bbox: 0.1192, s2.loss_cls: 0.0781, s2.acc: 91.9480, s2.loss_bbox: 0.0533, loss: 1.0960
2021-10-11 12:59:48,531 - mmdet - INFO - Epoch [2][750/977]	lr: 1.000e-02, eta: 13:58:17, time: 1.862, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0861, loss_rpn_bbox: 0.0436, s0.loss_cls: 0.3677, s0.acc: 91.1904, s0.loss_bbox: 0.1293, s1.loss_cls: 0.1718, s1.acc: 91.3584, s1.loss_bbox: 0.1045, s2.loss_cls: 0.0740, s2.acc: 92.4092, s2.loss_bbox: 0.0489, loss: 1.0259
2021-10-11 13:01:21,539 - mmdet - INFO - Epoch [2][800/977]	lr: 1.000e-02, eta: 13:57:14, time: 1.860, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0747, loss_rpn_bbox: 0.0364, s0.loss_cls: 0.4011, s0.acc: 89.9668, s0.loss_bbox: 0.1565, s1.loss_cls: 0.1828, s1.acc: 90.6442, s1.loss_bbox: 0.1186, s2.loss_cls: 0.0760, s2.acc: 92.3134, s2.loss_bbox: 0.0508, loss: 1.0968
2021-10-11 13:02:54,398 - mmdet - INFO - Epoch [2][850/977]	lr: 1.000e-02, eta: 13:56:08, time: 1.857, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0819, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.3905, s0.acc: 90.4512, s0.loss_bbox: 0.1467, s1.loss_cls: 0.1888, s1.acc: 90.3360, s1.loss_bbox: 0.1213, s2.loss_cls: 0.0816, s2.acc: 91.5916, s2.loss_bbox: 0.0556, loss: 1.1048
2021-10-11 13:04:27,059 - mmdet - INFO - Epoch [2][900/977]	lr: 1.000e-02, eta: 13:54:57, time: 1.853, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0667, loss_rpn_bbox: 0.0407, s0.loss_cls: 0.3604, s0.acc: 90.8350, s0.loss_bbox: 0.1374, s1.loss_cls: 0.1705, s1.acc: 91.0478, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0734, s2.acc: 92.3191, s2.loss_bbox: 0.0519, loss: 1.0100
2021-10-11 13:06:00,184 - mmdet - INFO - Epoch [2][950/977]	lr: 1.000e-02, eta: 13:53:51, time: 1.862, data_time: 0.013, memory: 20411, loss_rpn_cls: 0.0625, loss_rpn_bbox: 0.0376, s0.loss_cls: 0.3749, s0.acc: 90.5439, s0.loss_bbox: 0.1368, s1.loss_cls: 0.1883, s1.acc: 90.1732, s1.loss_bbox: 0.1189, s2.loss_cls: 0.0832, s2.acc: 91.2983, s2.loss_bbox: 0.0591, loss: 1.0614
2021-10-11 13:06:50,312 - mmdet - INFO - Saving checkpoint at 2 epochs
