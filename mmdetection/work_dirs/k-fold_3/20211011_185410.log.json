{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+6eb41ac", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        groups=32,\n        base_width=4,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\ntrain_json = 'train_3.json'\nval_json = 'val_3.json'\ntest_json = 'test.json'\nimg_norm_cfg = dict(\n    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.0625,\n        scale_limit=0.0,\n        rotate_limit=0,\n        interpolation=1,\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.2),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='RGBShift',\n                r_shift_limit=10,\n                g_shift_limit=10,\n                b_shift_limit=10,\n                p=1.0),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=20,\n                sat_shift_limit=30,\n                val_shift_limit=20,\n                p=1.0)\n        ],\n        p=0.1),\n    dict(type='JpegCompression', quality_lower=85, quality_upper=95, p=0.2),\n    dict(type='ChannelShuffle', p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='ShiftScaleRotate',\n                shift_limit=0.0625,\n                scale_limit=0.0,\n                rotate_limit=0,\n                interpolation=1,\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.2),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(\n                        type='RGBShift',\n                        r_shift_limit=10,\n                        g_shift_limit=10,\n                        b_shift_limit=10,\n                        p=1.0),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=20,\n                        sat_shift_limit=30,\n                        val_shift_limit=20,\n                        p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='JpegCompression',\n                quality_lower=85,\n                quality_upper=95,\n                p=0.2),\n            dict(type='ChannelShuffle', p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.651, 117.4, 110.08],\n        std=[54.035, 53.37, 54.784],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='ShiftScaleRotate',\n                        shift_limit=0.0625,\n                        scale_limit=0.0,\n                        rotate_limit=0,\n                        interpolation=1,\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                r_shift_limit=10,\n                                g_shift_limit=10,\n                                b_shift_limit=10,\n                                p=1.0),\n                            dict(\n                                type='HueSaturationValue',\n                                hue_shift_limit=20,\n                                sat_shift_limit=30,\n                                val_shift_limit=20,\n                                p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='JpegCompression',\n                        quality_lower=85,\n                        quality_upper=95,\n                        p=0.2),\n                    dict(type='ChannelShuffle', p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nindex = 3\nwandb_runname = 'mmdet_K-Fold_3'\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='garbage_ObjectDetection',\n                entity='falling90',\n                name='mmdet_K-Fold_3'))\n    ])\nwork_dir = './work_dirs/k-fold_3'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "k-fold_3.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 25185, "data_time": 0.07301, "loss_rpn_cls": 0.58641, "loss_rpn_bbox": 0.04608, "s0.loss_cls": 0.58816, "s0.acc": 85.95166, "s0.loss_bbox": 0.06428, "s1.loss_cls": 0.23689, "s1.acc": 87.82227, "s1.loss_bbox": 0.0227, "s2.loss_cls": 0.12579, "s2.acc": 87.21729, "s2.loss_bbox": 0.00332, "loss": 1.67362, "time": 1.82318}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 25185, "data_time": 0.01892, "loss_rpn_cls": 0.15944, "loss_rpn_bbox": 0.04623, "s0.loss_cls": 0.31844, "s0.acc": 93.60352, "s0.loss_bbox": 0.14798, "s1.loss_cls": 0.09754, "s1.acc": 96.65674, "s1.loss_bbox": 0.05566, "s2.loss_cls": 0.02974, "s2.acc": 98.33545, "s2.loss_bbox": 0.00927, "loss": 0.86431, "time": 1.77174}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 25185, "data_time": 0.01929, "loss_rpn_cls": 0.12488, "loss_rpn_bbox": 0.04192, "s0.loss_cls": 0.27567, "s0.acc": 94.50977, "s0.loss_bbox": 0.11896, "s1.loss_cls": 0.08843, "s1.acc": 96.77637, "s1.loss_bbox": 0.05094, "s2.loss_cls": 0.02814, "s2.acc": 98.24365, "s2.loss_bbox": 0.01097, "loss": 0.73989, "time": 1.78266}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 25185, "data_time": 0.01932, "loss_rpn_cls": 0.11504, "loss_rpn_bbox": 0.04641, "s0.loss_cls": 0.26756, "s0.acc": 94.32031, "s0.loss_bbox": 0.11968, "s1.loss_cls": 0.0914, "s1.acc": 96.5127, "s1.loss_bbox": 0.05501, "s2.loss_cls": 0.02968, "s2.acc": 98.07031, "s2.loss_bbox": 0.01196, "loss": 0.73673, "time": 1.77221}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 25185, "data_time": 0.01939, "loss_rpn_cls": 0.10223, "loss_rpn_bbox": 0.04487, "s0.loss_cls": 0.3632, "s0.acc": 91.52051, "s0.loss_bbox": 0.17745, "s1.loss_cls": 0.13704, "s1.acc": 93.90967, "s1.loss_bbox": 0.10055, "s2.loss_cls": 0.04711, "s2.acc": 96.40234, "s2.loss_bbox": 0.02852, "loss": 1.00096, "time": 1.77571}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 25185, "data_time": 0.01963, "loss_rpn_cls": 0.09612, "loss_rpn_bbox": 0.04812, "s0.loss_cls": 0.37809, "s0.acc": 91.20947, "s0.loss_bbox": 0.17356, "s1.loss_cls": 0.15359, "s1.acc": 92.94482, "s1.loss_bbox": 0.11099, "s2.loss_cls": 0.05812, "s2.acc": 94.9834, "s2.loss_bbox": 0.04021, "loss": 1.05881, "time": 1.78352}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 25185, "data_time": 0.01927, "loss_rpn_cls": 0.06873, "loss_rpn_bbox": 0.046, "s0.loss_cls": 0.3702, "s0.acc": 90.69482, "s0.loss_bbox": 0.17304, "s1.loss_cls": 0.16523, "s1.acc": 91.74705, "s1.loss_bbox": 0.12518, "s2.loss_cls": 0.06539, "s2.acc": 93.76454, "s2.loss_bbox": 0.04965, "loss": 1.06343, "time": 1.78273}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 25185, "data_time": 0.01904, "loss_rpn_cls": 0.07317, "loss_rpn_bbox": 0.04097, "s0.loss_cls": 0.38226, "s0.acc": 90.92432, "s0.loss_bbox": 0.15704, "s1.loss_cls": 0.17317, "s1.acc": 91.49707, "s1.loss_bbox": 0.11968, "s2.loss_cls": 0.06881, "s2.acc": 93.34473, "s2.loss_bbox": 0.05167, "loss": 1.06678, "time": 1.77501}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 25185, "data_time": 0.01959, "loss_rpn_cls": 0.06147, "loss_rpn_bbox": 0.03632, "s0.loss_cls": 0.34838, "s0.acc": 91.28564, "s0.loss_bbox": 0.15109, "s1.loss_cls": 0.16288, "s1.acc": 91.67025, "s1.loss_bbox": 0.1186, "s2.loss_cls": 0.06757, "s2.acc": 93.26796, "s2.loss_bbox": 0.05287, "loss": 0.99919, "time": 1.77545}
{"mode": "val", "epoch": 1, "iter": 976, "lr": 0.00976, "bbox_mAP": 0.053, "bbox_mAP_50": 0.099, "bbox_mAP_75": 0.052, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.005, "bbox_mAP_l": 0.067, "bbox_mAP_copypaste": "0.053 0.099 0.052 0.001 0.005 0.067"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.0754, "loss_rpn_cls": 0.06437, "loss_rpn_bbox": 0.03744, "s0.loss_cls": 0.35301, "s0.acc": 91.27832, "s0.loss_bbox": 0.14156, "s1.loss_cls": 0.17246, "s1.acc": 91.23276, "s1.loss_bbox": 0.11979, "s2.loss_cls": 0.07419, "s2.acc": 92.50073, "s2.loss_bbox": 0.05697, "loss": 1.0198, "time": 1.84309}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.01914, "loss_rpn_cls": 0.068, "loss_rpn_bbox": 0.04333, "s0.loss_cls": 0.35784, "s0.acc": 90.69287, "s0.loss_bbox": 0.1438, "s1.loss_cls": 0.17661, "s1.acc": 90.55796, "s1.loss_bbox": 0.1245, "s2.loss_cls": 0.07849, "s2.acc": 91.57155, "s2.loss_bbox": 0.0621, "loss": 1.05466, "time": 1.78409}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.01912, "loss_rpn_cls": 0.06384, "loss_rpn_bbox": 0.04136, "s0.loss_cls": 0.36512, "s0.acc": 90.50537, "s0.loss_bbox": 0.15075, "s1.loss_cls": 0.17675, "s1.acc": 90.4476, "s1.loss_bbox": 0.1297, "s2.loss_cls": 0.0786, "s2.acc": 91.54421, "s2.loss_bbox": 0.06321, "loss": 1.06934, "time": 1.78114}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.01951, "loss_rpn_cls": 0.05816, "loss_rpn_bbox": 0.0414, "s0.loss_cls": 0.32466, "s0.acc": 91.67676, "s0.loss_bbox": 0.13214, "s1.loss_cls": 0.15727, "s1.acc": 91.69138, "s1.loss_bbox": 0.11249, "s2.loss_cls": 0.06862, "s2.acc": 92.66691, "s2.loss_bbox": 0.05556, "loss": 0.9503, "time": 1.77992}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01953, "loss_rpn_cls": 0.06387, "loss_rpn_bbox": 0.04178, "s0.loss_cls": 0.36071, "s0.acc": 90.52588, "s0.loss_bbox": 0.15348, "s1.loss_cls": 0.17074, "s1.acc": 90.75402, "s1.loss_bbox": 0.12917, "s2.loss_cls": 0.07515, "s2.acc": 91.94445, "s2.loss_bbox": 0.06259, "loss": 1.05749, "time": 1.78322}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.01924, "loss_rpn_cls": 0.06797, "loss_rpn_bbox": 0.03934, "s0.loss_cls": 0.35502, "s0.acc": 90.7207, "s0.loss_bbox": 0.13808, "s1.loss_cls": 0.17777, "s1.acc": 90.31255, "s1.loss_bbox": 0.12167, "s2.loss_cls": 0.07974, "s2.acc": 91.27504, "s2.loss_bbox": 0.06068, "loss": 1.04026, "time": 1.78054}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.01936, "loss_rpn_cls": 0.05675, "loss_rpn_bbox": 0.03496, "s0.loss_cls": 0.32088, "s0.acc": 91.50781, "s0.loss_bbox": 0.11855, "s1.loss_cls": 0.16298, "s1.acc": 90.99016, "s1.loss_bbox": 0.10719, "s2.loss_cls": 0.07681, "s2.acc": 91.50332, "s2.loss_bbox": 0.05803, "loss": 0.93614, "time": 1.78405}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.01946, "loss_rpn_cls": 0.05503, "loss_rpn_bbox": 0.04183, "s0.loss_cls": 0.35128, "s0.acc": 90.34766, "s0.loss_bbox": 0.1428, "s1.loss_cls": 0.1785, "s1.acc": 89.96971, "s1.loss_bbox": 0.12836, "s2.loss_cls": 0.08143, "s2.acc": 90.85146, "s2.loss_bbox": 0.06474, "loss": 1.04397, "time": 1.78519}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.01946, "loss_rpn_cls": 0.05085, "loss_rpn_bbox": 0.04181, "s0.loss_cls": 0.31644, "s0.acc": 91.24658, "s0.loss_bbox": 0.13216, "s1.loss_cls": 0.15877, "s1.acc": 90.97994, "s1.loss_bbox": 0.11636, "s2.loss_cls": 0.07327, "s2.acc": 91.49766, "s2.loss_bbox": 0.05783, "loss": 0.94748, "time": 1.785}
{"mode": "val", "epoch": 2, "iter": 976, "lr": 0.01, "bbox_mAP": 0.121, "bbox_mAP_50": 0.202, "bbox_mAP_75": 0.125, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.017, "bbox_mAP_l": 0.147, "bbox_mAP_copypaste": "0.121 0.202 0.125 0.005 0.017 0.147"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.07244, "loss_rpn_cls": 0.05436, "loss_rpn_bbox": 0.03842, "s0.loss_cls": 0.31506, "s0.acc": 91.31982, "s0.loss_bbox": 0.13298, "s1.loss_cls": 0.15451, "s1.acc": 91.21282, "s1.loss_bbox": 0.11637, "s2.loss_cls": 0.07135, "s2.acc": 91.71959, "s2.loss_bbox": 0.06016, "loss": 0.9432, "time": 1.83008}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.01919, "loss_rpn_cls": 0.05522, "loss_rpn_bbox": 0.04048, "s0.loss_cls": 0.33358, "s0.acc": 90.62793, "s0.loss_bbox": 0.14017, "s1.loss_cls": 0.16594, "s1.acc": 90.38051, "s1.loss_bbox": 0.12781, "s2.loss_cls": 0.07591, "s2.acc": 91.13533, "s2.loss_bbox": 0.06602, "loss": 1.00511, "time": 1.77823}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.0194, "loss_rpn_cls": 0.04822, "loss_rpn_bbox": 0.03878, "s0.loss_cls": 0.31943, "s0.acc": 91.12842, "s0.loss_bbox": 0.12722, "s1.loss_cls": 0.16164, "s1.acc": 90.69041, "s1.loss_bbox": 0.11239, "s2.loss_cls": 0.07607, "s2.acc": 91.12275, "s2.loss_bbox": 0.06046, "loss": 0.9442, "time": 1.78628}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.01903, "loss_rpn_cls": 0.04372, "loss_rpn_bbox": 0.03809, "s0.loss_cls": 0.31554, "s0.acc": 91.06982, "s0.loss_bbox": 0.12267, "s1.loss_cls": 0.15893, "s1.acc": 90.64286, "s1.loss_bbox": 0.11046, "s2.loss_cls": 0.07484, "s2.acc": 91.1674, "s2.loss_bbox": 0.05883, "loss": 0.92308, "time": 1.77697}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01917, "loss_rpn_cls": 0.04749, "loss_rpn_bbox": 0.03516, "s0.loss_cls": 0.30818, "s0.acc": 91.29639, "s0.loss_bbox": 0.12391, "s1.loss_cls": 0.15684, "s1.acc": 90.77849, "s1.loss_bbox": 0.11324, "s2.loss_cls": 0.07391, "s2.acc": 91.39434, "s2.loss_bbox": 0.06045, "loss": 0.91918, "time": 1.78269}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.01901, "loss_rpn_cls": 0.05169, "loss_rpn_bbox": 0.03671, "s0.loss_cls": 0.32442, "s0.acc": 90.77637, "s0.loss_bbox": 0.13251, "s1.loss_cls": 0.16261, "s1.acc": 90.47113, "s1.loss_bbox": 0.12077, "s2.loss_cls": 0.07557, "s2.acc": 91.24776, "s2.loss_bbox": 0.0624, "loss": 0.96669, "time": 1.78095}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.01934, "loss_rpn_cls": 0.04659, "loss_rpn_bbox": 0.03238, "s0.loss_cls": 0.32243, "s0.acc": 90.99268, "s0.loss_bbox": 0.12237, "s1.loss_cls": 0.16116, "s1.acc": 90.84102, "s1.loss_bbox": 0.11057, "s2.loss_cls": 0.0765, "s2.acc": 91.26618, "s2.loss_bbox": 0.06188, "loss": 0.93389, "time": 1.78232}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.01987, "loss_rpn_cls": 0.04398, "loss_rpn_bbox": 0.03318, "s0.loss_cls": 0.29117, "s0.acc": 91.72656, "s0.loss_bbox": 0.11055, "s1.loss_cls": 0.14958, "s1.acc": 91.22386, "s1.loss_bbox": 0.10354, "s2.loss_cls": 0.07198, "s2.acc": 91.34014, "s2.loss_bbox": 0.05628, "loss": 0.86026, "time": 1.78536}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.02264, "loss_rpn_cls": 0.03932, "loss_rpn_bbox": 0.03233, "s0.loss_cls": 0.30333, "s0.acc": 91.2876, "s0.loss_bbox": 0.12179, "s1.loss_cls": 0.15418, "s1.acc": 90.88867, "s1.loss_bbox": 0.11306, "s2.loss_cls": 0.07397, "s2.acc": 91.2913, "s2.loss_bbox": 0.06158, "loss": 0.89955, "time": 1.78823}
{"mode": "val", "epoch": 3, "iter": 976, "lr": 0.01, "bbox_mAP": 0.14, "bbox_mAP_50": 0.226, "bbox_mAP_75": 0.152, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.025, "bbox_mAP_l": 0.168, "bbox_mAP_copypaste": "0.140 0.226 0.152 0.009 0.025 0.168"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.07201, "loss_rpn_cls": 0.04563, "loss_rpn_bbox": 0.03656, "s0.loss_cls": 0.31626, "s0.acc": 90.99365, "s0.loss_bbox": 0.13228, "s1.loss_cls": 0.1545, "s1.acc": 90.99805, "s1.loss_bbox": 0.11778, "s2.loss_cls": 0.07147, "s2.acc": 91.64058, "s2.loss_bbox": 0.06301, "loss": 0.93749, "time": 1.84139}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.01954, "loss_rpn_cls": 0.04483, "loss_rpn_bbox": 0.03587, "s0.loss_cls": 0.28197, "s0.acc": 91.87939, "s0.loss_bbox": 0.11471, "s1.loss_cls": 0.14105, "s1.acc": 91.8566, "s1.loss_bbox": 0.10637, "s2.loss_cls": 0.06665, "s2.acc": 92.12993, "s2.loss_bbox": 0.05785, "loss": 0.84931, "time": 1.77354}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.01965, "loss_rpn_cls": 0.04351, "loss_rpn_bbox": 0.03711, "s0.loss_cls": 0.30792, "s0.acc": 91.19434, "s0.loss_bbox": 0.11778, "s1.loss_cls": 0.15516, "s1.acc": 90.83903, "s1.loss_bbox": 0.10814, "s2.loss_cls": 0.07443, "s2.acc": 91.07502, "s2.loss_bbox": 0.0599, "loss": 0.90395, "time": 1.77634}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.01963, "loss_rpn_cls": 0.04027, "loss_rpn_bbox": 0.03471, "s0.loss_cls": 0.28821, "s0.acc": 91.39014, "s0.loss_bbox": 0.11965, "s1.loss_cls": 0.14821, "s1.acc": 91.02549, "s1.loss_bbox": 0.11151, "s2.loss_cls": 0.07169, "s2.acc": 91.10311, "s2.loss_bbox": 0.06121, "loss": 0.87546, "time": 1.77831}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01996, "loss_rpn_cls": 0.03994, "loss_rpn_bbox": 0.0377, "s0.loss_cls": 0.29115, "s0.acc": 91.53174, "s0.loss_bbox": 0.11577, "s1.loss_cls": 0.14386, "s1.acc": 91.31954, "s1.loss_bbox": 0.10464, "s2.loss_cls": 0.06874, "s2.acc": 91.65519, "s2.loss_bbox": 0.05724, "loss": 0.85905, "time": 1.77812}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.02031, "loss_rpn_cls": 0.03608, "loss_rpn_bbox": 0.02821, "s0.loss_cls": 0.29146, "s0.acc": 91.59375, "s0.loss_bbox": 0.10788, "s1.loss_cls": 0.14642, "s1.acc": 91.21424, "s1.loss_bbox": 0.09968, "s2.loss_cls": 0.0709, "s2.acc": 91.52307, "s2.loss_bbox": 0.05652, "loss": 0.83715, "time": 1.7835}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.02008, "loss_rpn_cls": 0.04052, "loss_rpn_bbox": 0.033, "s0.loss_cls": 0.28214, "s0.acc": 91.64111, "s0.loss_bbox": 0.11316, "s1.loss_cls": 0.14393, "s1.acc": 91.32074, "s1.loss_bbox": 0.10299, "s2.loss_cls": 0.07056, "s2.acc": 91.30073, "s2.loss_bbox": 0.05823, "loss": 0.84452, "time": 1.78253}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.02009, "loss_rpn_cls": 0.04362, "loss_rpn_bbox": 0.03384, "s0.loss_cls": 0.30306, "s0.acc": 91.08691, "s0.loss_bbox": 0.12147, "s1.loss_cls": 0.15094, "s1.acc": 91.05307, "s1.loss_bbox": 0.1092, "s2.loss_cls": 0.0711, "s2.acc": 91.48506, "s2.loss_bbox": 0.05819, "loss": 0.89143, "time": 1.77753}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.02027, "loss_rpn_cls": 0.0378, "loss_rpn_bbox": 0.03279, "s0.loss_cls": 0.29639, "s0.acc": 91.36523, "s0.loss_bbox": 0.11839, "s1.loss_cls": 0.1504, "s1.acc": 91.03108, "s1.loss_bbox": 0.10956, "s2.loss_cls": 0.07229, "s2.acc": 91.19519, "s2.loss_bbox": 0.06002, "loss": 0.87764, "time": 1.77967}
{"mode": "val", "epoch": 4, "iter": 976, "lr": 0.01, "bbox_mAP": 0.196, "bbox_mAP_50": 0.303, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.036, "bbox_mAP_l": 0.235, "bbox_mAP_copypaste": "0.196 0.303 0.206 0.011 0.036 0.235"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.07135, "loss_rpn_cls": 0.03972, "loss_rpn_bbox": 0.03356, "s0.loss_cls": 0.28617, "s0.acc": 91.51221, "s0.loss_bbox": 0.11584, "s1.loss_cls": 0.14108, "s1.acc": 91.5987, "s1.loss_bbox": 0.10641, "s2.loss_cls": 0.06651, "s2.acc": 91.91755, "s2.loss_bbox": 0.05776, "loss": 0.84705, "time": 1.8318}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.01972, "loss_rpn_cls": 0.03686, "loss_rpn_bbox": 0.03467, "s0.loss_cls": 0.26607, "s0.acc": 92.08984, "s0.loss_bbox": 0.10379, "s1.loss_cls": 0.13491, "s1.acc": 91.74599, "s1.loss_bbox": 0.09517, "s2.loss_cls": 0.06573, "s2.acc": 91.81519, "s2.loss_bbox": 0.05453, "loss": 0.79173, "time": 1.78229}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.01991, "loss_rpn_cls": 0.03776, "loss_rpn_bbox": 0.0369, "s0.loss_cls": 0.28297, "s0.acc": 91.46533, "s0.loss_bbox": 0.11769, "s1.loss_cls": 0.1403, "s1.acc": 91.26283, "s1.loss_bbox": 0.10891, "s2.loss_cls": 0.06744, "s2.acc": 91.51362, "s2.loss_bbox": 0.06005, "loss": 0.85201, "time": 1.7791}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.0198, "loss_rpn_cls": 0.03728, "loss_rpn_bbox": 0.0281, "s0.loss_cls": 0.27675, "s0.acc": 91.74707, "s0.loss_bbox": 0.11071, "s1.loss_cls": 0.14082, "s1.acc": 91.42845, "s1.loss_bbox": 0.10224, "s2.loss_cls": 0.0668, "s2.acc": 91.83829, "s2.loss_bbox": 0.05791, "loss": 0.82062, "time": 1.78108}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01959, "loss_rpn_cls": 0.03764, "loss_rpn_bbox": 0.03523, "s0.loss_cls": 0.30127, "s0.acc": 91.10254, "s0.loss_bbox": 0.12571, "s1.loss_cls": 0.15136, "s1.acc": 90.77843, "s1.loss_bbox": 0.11439, "s2.loss_cls": 0.07311, "s2.acc": 91.20436, "s2.loss_bbox": 0.06207, "loss": 0.90079, "time": 1.78242}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.01977, "loss_rpn_cls": 0.03933, "loss_rpn_bbox": 0.03551, "s0.loss_cls": 0.3082, "s0.acc": 90.81445, "s0.loss_bbox": 0.1242, "s1.loss_cls": 0.15156, "s1.acc": 90.79316, "s1.loss_bbox": 0.11249, "s2.loss_cls": 0.07194, "s2.acc": 91.23151, "s2.loss_bbox": 0.06304, "loss": 0.90628, "time": 1.77669}
{"mode": "train", "epoch": 5, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.02018, "loss_rpn_cls": 0.03033, "loss_rpn_bbox": 0.02488, "s0.loss_cls": 0.24611, "s0.acc": 92.72705, "s0.loss_bbox": 0.09268, "s1.loss_cls": 0.12767, "s1.acc": 92.20039, "s1.loss_bbox": 0.09007, "s2.loss_cls": 0.06235, "s2.acc": 92.40214, "s2.loss_bbox": 0.0546, "loss": 0.7287, "time": 1.78045}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.01977, "loss_rpn_cls": 0.0333, "loss_rpn_bbox": 0.03026, "s0.loss_cls": 0.27007, "s0.acc": 92.00684, "s0.loss_bbox": 0.10966, "s1.loss_cls": 0.13417, "s1.acc": 91.89222, "s1.loss_bbox": 0.09924, "s2.loss_cls": 0.06511, "s2.acc": 92.04666, "s2.loss_bbox": 0.05764, "loss": 0.79947, "time": 1.7854}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.01994, "loss_rpn_cls": 0.04513, "loss_rpn_bbox": 0.03319, "s0.loss_cls": 0.2858, "s0.acc": 91.59277, "s0.loss_bbox": 0.11313, "s1.loss_cls": 0.14588, "s1.acc": 91.34065, "s1.loss_bbox": 0.10471, "s2.loss_cls": 0.07119, "s2.acc": 91.50306, "s2.loss_bbox": 0.05912, "loss": 0.85815, "time": 1.77891}
{"mode": "val", "epoch": 5, "iter": 976, "lr": 0.01, "bbox_mAP": 0.233, "bbox_mAP_50": 0.349, "bbox_mAP_75": 0.256, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.071, "bbox_mAP_l": 0.278, "bbox_mAP_copypaste": "0.233 0.349 0.256 0.008 0.071 0.278"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.07214, "loss_rpn_cls": 0.03151, "loss_rpn_bbox": 0.03369, "s0.loss_cls": 0.28721, "s0.acc": 91.28906, "s0.loss_bbox": 0.11859, "s1.loss_cls": 0.1425, "s1.acc": 91.18113, "s1.loss_bbox": 0.10781, "s2.loss_cls": 0.06825, "s2.acc": 91.52058, "s2.loss_bbox": 0.06025, "loss": 0.84981, "time": 1.83196}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.01934, "loss_rpn_cls": 0.03515, "loss_rpn_bbox": 0.03628, "s0.loss_cls": 0.2812, "s0.acc": 91.41748, "s0.loss_bbox": 0.11786, "s1.loss_cls": 0.1386, "s1.acc": 91.34702, "s1.loss_bbox": 0.10503, "s2.loss_cls": 0.06658, "s2.acc": 91.58161, "s2.loss_bbox": 0.0582, "loss": 0.83891, "time": 1.78406}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.01899, "loss_rpn_cls": 0.03308, "loss_rpn_bbox": 0.03111, "s0.loss_cls": 0.25863, "s0.acc": 92.05713, "s0.loss_bbox": 0.1056, "s1.loss_cls": 0.12984, "s1.acc": 91.89357, "s1.loss_bbox": 0.09802, "s2.loss_cls": 0.06266, "s2.acc": 92.13312, "s2.loss_bbox": 0.05624, "loss": 0.77519, "time": 1.77558}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.01955, "loss_rpn_cls": 0.0348, "loss_rpn_bbox": 0.03039, "s0.loss_cls": 0.2519, "s0.acc": 92.33691, "s0.loss_bbox": 0.10448, "s1.loss_cls": 0.12576, "s1.acc": 92.23297, "s1.loss_bbox": 0.09775, "s2.loss_cls": 0.06085, "s2.acc": 92.1808, "s2.loss_bbox": 0.05528, "loss": 0.76122, "time": 1.78267}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01932, "loss_rpn_cls": 0.03069, "loss_rpn_bbox": 0.0294, "s0.loss_cls": 0.25925, "s0.acc": 92.16211, "s0.loss_bbox": 0.10117, "s1.loss_cls": 0.13087, "s1.acc": 91.82207, "s1.loss_bbox": 0.09535, "s2.loss_cls": 0.06322, "s2.acc": 92.12179, "s2.loss_bbox": 0.05441, "loss": 0.76437, "time": 1.77818}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.0201, "loss_rpn_cls": 0.04004, "loss_rpn_bbox": 0.02931, "s0.loss_cls": 0.27377, "s0.acc": 91.83203, "s0.loss_bbox": 0.10057, "s1.loss_cls": 0.13906, "s1.acc": 91.45778, "s1.loss_bbox": 0.09805, "s2.loss_cls": 0.06826, "s2.acc": 91.46714, "s2.loss_bbox": 0.05887, "loss": 0.80794, "time": 1.78902}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.02006, "loss_rpn_cls": 0.03343, "loss_rpn_bbox": 0.03019, "s0.loss_cls": 0.25196, "s0.acc": 92.34326, "s0.loss_bbox": 0.10714, "s1.loss_cls": 0.12454, "s1.acc": 92.30856, "s1.loss_bbox": 0.09615, "s2.loss_cls": 0.06054, "s2.acc": 92.47807, "s2.loss_bbox": 0.05441, "loss": 0.75836, "time": 1.78148}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.01938, "loss_rpn_cls": 0.03401, "loss_rpn_bbox": 0.03077, "s0.loss_cls": 0.24918, "s0.acc": 92.51562, "s0.loss_bbox": 0.10087, "s1.loss_cls": 0.12328, "s1.acc": 92.34959, "s1.loss_bbox": 0.09433, "s2.loss_cls": 0.06012, "s2.acc": 92.40511, "s2.loss_bbox": 0.0548, "loss": 0.74737, "time": 1.78032}
{"mode": "train", "epoch": 6, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.02, "loss_rpn_cls": 0.0403, "loss_rpn_bbox": 0.03114, "s0.loss_cls": 0.26051, "s0.acc": 92.23389, "s0.loss_bbox": 0.10408, "s1.loss_cls": 0.13045, "s1.acc": 92.15519, "s1.loss_bbox": 0.09701, "s2.loss_cls": 0.0634, "s2.acc": 92.37546, "s2.loss_bbox": 0.05542, "loss": 0.7823, "time": 1.78139}
{"mode": "val", "epoch": 6, "iter": 976, "lr": 0.01, "bbox_mAP": 0.266, "bbox_mAP_50": 0.389, "bbox_mAP_75": 0.286, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.064, "bbox_mAP_l": 0.316, "bbox_mAP_copypaste": "0.266 0.389 0.286 0.010 0.064 0.316"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.06994, "loss_rpn_cls": 0.02696, "loss_rpn_bbox": 0.03247, "s0.loss_cls": 0.23143, "s0.acc": 92.79834, "s0.loss_bbox": 0.09869, "s1.loss_cls": 0.1157, "s1.acc": 92.83271, "s1.loss_bbox": 0.09431, "s2.loss_cls": 0.0573, "s2.acc": 92.86586, "s2.loss_bbox": 0.05359, "loss": 0.71045, "time": 1.82669}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 25185, "data_time": 0.0191, "loss_rpn_cls": 0.03425, "loss_rpn_bbox": 0.03247, "s0.loss_cls": 0.25042, "s0.acc": 92.32373, "s0.loss_bbox": 0.1052, "s1.loss_cls": 0.12229, "s1.acc": 92.4358, "s1.loss_bbox": 0.09604, "s2.loss_cls": 0.06008, "s2.acc": 92.4474, "s2.loss_bbox": 0.05636, "loss": 0.7571, "time": 1.7818}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.01, "memory": 25185, "data_time": 0.01895, "loss_rpn_cls": 0.03352, "loss_rpn_bbox": 0.0325, "s0.loss_cls": 0.26988, "s0.acc": 91.66064, "s0.loss_bbox": 0.11364, "s1.loss_cls": 0.13212, "s1.acc": 91.71051, "s1.loss_bbox": 0.10469, "s2.loss_cls": 0.06467, "s2.acc": 91.87227, "s2.loss_bbox": 0.06044, "loss": 0.81147, "time": 1.78189}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.01, "memory": 25185, "data_time": 0.01917, "loss_rpn_cls": 0.02959, "loss_rpn_bbox": 0.02673, "s0.loss_cls": 0.24106, "s0.acc": 92.84521, "s0.loss_bbox": 0.09627, "s1.loss_cls": 0.11942, "s1.acc": 92.7022, "s1.loss_bbox": 0.09053, "s2.loss_cls": 0.05798, "s2.acc": 93.03829, "s2.loss_bbox": 0.05219, "loss": 0.71378, "time": 1.78009}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.01, "memory": 25185, "data_time": 0.01905, "loss_rpn_cls": 0.03249, "loss_rpn_bbox": 0.03164, "s0.loss_cls": 0.25664, "s0.acc": 92.24463, "s0.loss_bbox": 0.10715, "s1.loss_cls": 0.12704, "s1.acc": 92.17019, "s1.loss_bbox": 0.09948, "s2.loss_cls": 0.06219, "s2.acc": 92.24339, "s2.loss_bbox": 0.05513, "loss": 0.77176, "time": 1.77674}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.01, "memory": 25185, "data_time": 0.01903, "loss_rpn_cls": 0.03499, "loss_rpn_bbox": 0.03477, "s0.loss_cls": 0.26621, "s0.acc": 91.99756, "s0.loss_bbox": 0.11215, "s1.loss_cls": 0.13014, "s1.acc": 92.12309, "s1.loss_bbox": 0.10106, "s2.loss_cls": 0.0619, "s2.acc": 92.40745, "s2.loss_bbox": 0.05706, "loss": 0.79828, "time": 1.77594}
{"mode": "train", "epoch": 7, "iter": 350, "lr": 0.01, "memory": 25185, "data_time": 0.01929, "loss_rpn_cls": 0.03002, "loss_rpn_bbox": 0.02831, "s0.loss_cls": 0.25687, "s0.acc": 92.2251, "s0.loss_bbox": 0.09835, "s1.loss_cls": 0.12769, "s1.acc": 92.22761, "s1.loss_bbox": 0.09029, "s2.loss_cls": 0.06209, "s2.acc": 92.32786, "s2.loss_bbox": 0.05287, "loss": 0.74649, "time": 1.7761}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.01, "memory": 25185, "data_time": 0.01922, "loss_rpn_cls": 0.03058, "loss_rpn_bbox": 0.03, "s0.loss_cls": 0.24533, "s0.acc": 92.61182, "s0.loss_bbox": 0.09612, "s1.loss_cls": 0.12159, "s1.acc": 92.5121, "s1.loss_bbox": 0.08804, "s2.loss_cls": 0.05965, "s2.acc": 92.76876, "s2.loss_bbox": 0.05207, "loss": 0.72337, "time": 1.77337}
{"mode": "train", "epoch": 7, "iter": 450, "lr": 0.01, "memory": 25185, "data_time": 0.01911, "loss_rpn_cls": 0.02927, "loss_rpn_bbox": 0.02893, "s0.loss_cls": 0.25869, "s0.acc": 91.97119, "s0.loss_bbox": 0.10545, "s1.loss_cls": 0.13136, "s1.acc": 91.59529, "s1.loss_bbox": 0.0998, "s2.loss_cls": 0.06411, "s2.acc": 91.80628, "s2.loss_bbox": 0.05712, "loss": 0.77473, "time": 1.77549}
{"mode": "val", "epoch": 7, "iter": 976, "lr": 0.01, "bbox_mAP": 0.27, "bbox_mAP_50": 0.407, "bbox_mAP_75": 0.305, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.06, "bbox_mAP_l": 0.323, "bbox_mAP_copypaste": "0.270 0.407 0.305 0.009 0.060 0.323"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 25185, "data_time": 0.07382, "loss_rpn_cls": 0.02894, "loss_rpn_bbox": 0.03282, "s0.loss_cls": 0.24623, "s0.acc": 92.30078, "s0.loss_bbox": 0.10449, "s1.loss_cls": 0.12108, "s1.acc": 92.27147, "s1.loss_bbox": 0.09615, "s2.loss_cls": 0.05948, "s2.acc": 92.35613, "s2.loss_bbox": 0.0579, "loss": 0.7471, "time": 1.83771}
