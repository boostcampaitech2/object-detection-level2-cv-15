{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+6eb41ac", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\ntrain_json = 'train_2.json'\nval_json = 'val_2.json'\ntest_json = 'test.json'\nimg_norm_cfg = dict(\n    mean=[123.651, 117.4, 110.08], std=[54.035, 53.37, 54.784], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Mosaic',\n        img_scale=(1024, 1024),\n        center_ratio_range=(0.5, 1.5),\n        min_bbox_size=0,\n        pad_val=114),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.651, 117.4, 110.08],\n        std=[54.035, 53.37, 54.784],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntrain_dataset = dict(\n    type='MultiImageMixDataset',\n    dataset=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True)\n        ],\n        filter_empty_gt=False),\n    pipeline=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Mosaic',\n            img_scale=(1024, 1024),\n            center_ratio_range=(0.5, 1.5),\n            min_bbox_size=0,\n            pad_val=114),\n        dict(type='RandomFlip', flip_ratio=0.5),\n        dict(\n            type='Normalize',\n            mean=[123.651, 117.4, 110.08],\n            std=[54.035, 53.37, 54.784],\n            to_rgb=True),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ],\n    dynamic_scale=(1024, 1024))\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='MultiImageMixDataset',\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='/opt/ml/detection/dataset/train_2.json',\n            img_prefix='/opt/ml/detection/dataset/',\n            classes=[\n                'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile', to_float32=True),\n                dict(type='LoadAnnotations', with_bbox=True)\n            ],\n            filter_empty_gt=False),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Mosaic',\n                img_scale=(1024, 1024),\n                center_ratio_range=(0.5, 1.5),\n                min_bbox_size=0,\n                pad_val=114),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.651, 117.4, 110.08],\n                std=[54.035, 53.37, 54.784],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        dynamic_scale=(1024, 1024)),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_2.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.651, 117.4, 110.08],\n                        std=[54.035, 53.37, 54.784],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nindex = 2\nwandb_runname = 'mmdet_K-Fold_2'\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='garbage_ObjectDetection',\n                entity='falling90',\n                name='mmdet_K-Fold_2'))\n    ])\nwork_dir = './work_dirs/k-fold_2'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "k-fold_2.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 26411, "data_time": 0.09753, "loss_rpn_cls": 0.67467, "loss_rpn_bbox": 0.1344, "s0.loss_cls": 0.61561, "s0.acc": 85.32422, "s0.loss_bbox": 0.08689, "s1.loss_cls": 0.39512, "s1.acc": 82.42969, "s1.loss_bbox": 0.03084, "s2.loss_cls": 0.22099, "s2.acc": 78.49805, "s2.loss_bbox": 0.00832, "loss": 2.16684, "time": 1.97769}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 26411, "data_time": 0.03882, "loss_rpn_cls": 0.45127, "loss_rpn_bbox": 0.12884, "s0.loss_cls": 0.49051, "s0.acc": 90.12988, "s0.loss_bbox": 0.18441, "s1.loss_cls": 0.1676, "s1.acc": 94.20898, "s1.loss_bbox": 0.06115, "s2.loss_cls": 0.06402, "s2.acc": 96.05469, "s2.loss_bbox": 0.00983, "loss": 1.55764, "time": 1.92366}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 26411, "data_time": 0.03813, "loss_rpn_cls": 0.34868, "loss_rpn_bbox": 0.13266, "s0.loss_cls": 0.35686, "s0.acc": 92.81641, "s0.loss_bbox": 0.09934, "s1.loss_cls": 0.13284, "s1.acc": 94.89062, "s1.loss_bbox": 0.03414, "s2.loss_cls": 0.05457, "s2.acc": 95.94238, "s2.loss_bbox": 0.00586, "loss": 1.16494, "time": 1.8774}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 26411, "data_time": 0.03883, "loss_rpn_cls": 0.30495, "loss_rpn_bbox": 0.12784, "s0.loss_cls": 0.34232, "s0.acc": 92.60742, "s0.loss_bbox": 0.11342, "s1.loss_cls": 0.12512, "s1.acc": 94.9541, "s1.loss_bbox": 0.04031, "s2.loss_cls": 0.04975, "s2.acc": 96.10156, "s2.loss_bbox": 0.00678, "loss": 1.11048, "time": 1.93099}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 26411, "data_time": 0.03883, "loss_rpn_cls": 0.24783, "loss_rpn_bbox": 0.14703, "s0.loss_cls": 0.45347, "s0.acc": 89.18848, "s0.loss_bbox": 0.18946, "s1.loss_cls": 0.16415, "s1.acc": 92.96289, "s1.loss_bbox": 0.07918, "s2.loss_cls": 0.05981, "s2.acc": 95.20996, "s2.loss_bbox": 0.0166, "loss": 1.35753, "time": 1.918}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 26411, "data_time": 0.03787, "loss_rpn_cls": 0.2616, "loss_rpn_bbox": 0.13714, "s0.loss_cls": 0.58282, "s0.acc": 86.68652, "s0.loss_bbox": 0.25755, "s1.loss_cls": 0.20169, "s1.acc": 91.69629, "s1.loss_bbox": 0.10387, "s2.loss_cls": 0.07124, "s2.acc": 94.61816, "s2.loss_bbox": 0.02251, "loss": 1.63841, "time": 1.87925}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 26411, "data_time": 0.03914, "loss_rpn_cls": 0.25702, "loss_rpn_bbox": 0.14234, "s0.loss_cls": 0.61318, "s0.acc": 85.64551, "s0.loss_bbox": 0.27703, "s1.loss_cls": 0.22323, "s1.acc": 90.58594, "s1.loss_bbox": 0.12757, "s2.loss_cls": 0.07966, "s2.acc": 94.01562, "s2.loss_bbox": 0.03085, "loss": 1.75087, "time": 1.94092}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 26411, "data_time": 0.03785, "loss_rpn_cls": 0.21235, "loss_rpn_bbox": 0.12762, "s0.loss_cls": 0.604, "s0.acc": 85.77441, "s0.loss_bbox": 0.27958, "s1.loss_cls": 0.21417, "s1.acc": 90.65723, "s1.loss_bbox": 0.12986, "s2.loss_cls": 0.07724, "s2.acc": 93.88086, "s2.loss_bbox": 0.03601, "loss": 1.68082, "time": 1.85822}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 26411, "data_time": 0.03968, "loss_rpn_cls": 0.24541, "loss_rpn_bbox": 0.15542, "s0.loss_cls": 0.57351, "s0.acc": 85.89844, "s0.loss_bbox": 0.24318, "s1.loss_cls": 0.22384, "s1.acc": 89.31152, "s1.loss_bbox": 0.12828, "s2.loss_cls": 0.08829, "s2.acc": 92.39648, "s2.loss_bbox": 0.04011, "loss": 1.69802, "time": 1.937}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 26411, "data_time": 0.03905, "loss_rpn_cls": 0.22794, "loss_rpn_bbox": 0.13048, "s0.loss_cls": 0.57282, "s0.acc": 86.84082, "s0.loss_bbox": 0.25108, "s1.loss_cls": 0.20672, "s1.acc": 91.10156, "s1.loss_bbox": 0.11828, "s2.loss_cls": 0.07607, "s2.acc": 94.03223, "s2.loss_bbox": 0.03129, "loss": 1.61469, "time": 1.93028}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 26411, "data_time": 0.03895, "loss_rpn_cls": 0.26506, "loss_rpn_bbox": 0.13668, "s0.loss_cls": 0.53518, "s0.acc": 87.39258, "s0.loss_bbox": 0.23008, "s1.loss_cls": 0.19511, "s1.acc": 91.28809, "s1.loss_bbox": 0.10676, "s2.loss_cls": 0.0736, "s2.acc": 93.89746, "s2.loss_bbox": 0.02919, "loss": 1.57167, "time": 1.90191}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 26411, "data_time": 0.03952, "loss_rpn_cls": 0.22617, "loss_rpn_bbox": 0.13613, "s0.loss_cls": 0.61068, "s0.acc": 85.47461, "s0.loss_bbox": 0.26783, "s1.loss_cls": 0.22824, "s1.acc": 89.42676, "s1.loss_bbox": 0.13677, "s2.loss_cls": 0.08649, "s2.acc": 92.61523, "s2.loss_bbox": 0.04072, "loss": 1.73302, "time": 1.928}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 26411, "data_time": 0.03968, "loss_rpn_cls": 0.26583, "loss_rpn_bbox": 0.1304, "s0.loss_cls": 0.61785, "s0.acc": 85.52637, "s0.loss_bbox": 0.25639, "s1.loss_cls": 0.24358, "s1.acc": 89.11914, "s1.loss_bbox": 0.13762, "s2.loss_cls": 0.09154, "s2.acc": 92.35059, "s2.loss_bbox": 0.04021, "loss": 1.78342, "time": 1.94279}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 26411, "data_time": 0.0371, "loss_rpn_cls": 0.2173, "loss_rpn_bbox": 0.13089, "s0.loss_cls": 0.63605, "s0.acc": 84.44434, "s0.loss_bbox": 0.28231, "s1.loss_cls": 0.25134, "s1.acc": 88.08008, "s1.loss_bbox": 0.15677, "s2.loss_cls": 0.09605, "s2.acc": 91.32031, "s2.loss_bbox": 0.05125, "loss": 1.82197, "time": 1.85398}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 26411, "data_time": 0.03952, "loss_rpn_cls": 0.2207, "loss_rpn_bbox": 0.12078, "s0.loss_cls": 0.62133, "s0.acc": 84.33398, "s0.loss_bbox": 0.25985, "s1.loss_cls": 0.25648, "s1.acc": 87.47771, "s1.loss_bbox": 0.15367, "s2.loss_cls": 0.10118, "s2.acc": 90.43127, "s2.loss_bbox": 0.05621, "loss": 1.79019, "time": 1.90885}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 26411, "data_time": 0.03796, "loss_rpn_cls": 0.22627, "loss_rpn_bbox": 0.13155, "s0.loss_cls": 0.60133, "s0.acc": 85.32715, "s0.loss_bbox": 0.25375, "s1.loss_cls": 0.23683, "s1.acc": 88.46411, "s1.loss_bbox": 0.13429, "s2.loss_cls": 0.09419, "s2.acc": 91.2738, "s2.loss_bbox": 0.04566, "loss": 1.72388, "time": 1.86053}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 26411, "data_time": 0.03929, "loss_rpn_cls": 0.18641, "loss_rpn_bbox": 0.12539, "s0.loss_cls": 0.60148, "s0.acc": 85.16016, "s0.loss_bbox": 0.24962, "s1.loss_cls": 0.24878, "s1.acc": 87.76562, "s1.loss_bbox": 0.15303, "s2.loss_cls": 0.10016, "s2.acc": 90.6123, "s2.loss_bbox": 0.05646, "loss": 1.72133, "time": 1.90704}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 26411, "data_time": 0.03877, "loss_rpn_cls": 0.23889, "loss_rpn_bbox": 0.12432, "s0.loss_cls": 0.54966, "s0.acc": 86.67383, "s0.loss_bbox": 0.2301, "s1.loss_cls": 0.2179, "s1.acc": 89.60253, "s1.loss_bbox": 0.12607, "s2.loss_cls": 0.08802, "s2.acc": 91.86678, "s2.loss_bbox": 0.04556, "loss": 1.62052, "time": 1.91137}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 26411, "data_time": 0.03792, "loss_rpn_cls": 0.22034, "loss_rpn_bbox": 0.13454, "s0.loss_cls": 0.61862, "s0.acc": 84.62305, "s0.loss_bbox": 0.25721, "s1.loss_cls": 0.25373, "s1.acc": 87.43566, "s1.loss_bbox": 0.14946, "s2.loss_cls": 0.10232, "s2.acc": 90.0258, "s2.loss_bbox": 0.05424, "loss": 1.79045, "time": 1.8659}
{"mode": "val", "epoch": 1, "iter": 981, "lr": 0.01, "bbox_mAP": 0.044, "bbox_mAP_50": 0.084, "bbox_mAP_75": 0.045, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.056, "bbox_mAP_copypaste": "0.044 0.084 0.045 0.000 0.004 0.056"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 26411, "data_time": 0.09616, "loss_rpn_cls": 0.21111, "loss_rpn_bbox": 0.1322, "s0.loss_cls": 0.60157, "s0.acc": 84.18945, "s0.loss_bbox": 0.26092, "s1.loss_cls": 0.25121, "s1.acc": 86.71952, "s1.loss_bbox": 0.15671, "s2.loss_cls": 0.10472, "s2.acc": 89.25993, "s2.loss_bbox": 0.06121, "loss": 1.77965, "time": 1.97037}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 26411, "data_time": 0.04033, "loss_rpn_cls": 0.19937, "loss_rpn_bbox": 0.13817, "s0.loss_cls": 0.5814, "s0.acc": 85.00098, "s0.loss_bbox": 0.24979, "s1.loss_cls": 0.24026, "s1.acc": 87.27768, "s1.loss_bbox": 0.14969, "s2.loss_cls": 0.09875, "s2.acc": 89.7551, "s2.loss_bbox": 0.05762, "loss": 1.71506, "time": 1.96509}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 26411, "data_time": 0.03851, "loss_rpn_cls": 0.24403, "loss_rpn_bbox": 0.12902, "s0.loss_cls": 0.59525, "s0.acc": 85.34766, "s0.loss_bbox": 0.25281, "s1.loss_cls": 0.23624, "s1.acc": 88.51647, "s1.loss_bbox": 0.13034, "s2.loss_cls": 0.096, "s2.acc": 90.97689, "s2.loss_bbox": 0.04394, "loss": 1.72762, "time": 1.9375}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 26411, "data_time": 0.0383, "loss_rpn_cls": 0.1923, "loss_rpn_bbox": 0.1256, "s0.loss_cls": 0.58059, "s0.acc": 85.49902, "s0.loss_bbox": 0.2405, "s1.loss_cls": 0.23947, "s1.acc": 88.12549, "s1.loss_bbox": 0.14416, "s2.loss_cls": 0.0959, "s2.acc": 90.77421, "s2.loss_bbox": 0.05149, "loss": 1.66999, "time": 1.9021}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 26411, "data_time": 0.03842, "loss_rpn_cls": 0.22653, "loss_rpn_bbox": 0.12479, "s0.loss_cls": 0.61072, "s0.acc": 84.57324, "s0.loss_bbox": 0.25701, "s1.loss_cls": 0.24594, "s1.acc": 87.4288, "s1.loss_bbox": 0.14768, "s2.loss_cls": 0.10034, "s2.acc": 90.06038, "s2.loss_bbox": 0.0531, "loss": 1.7661, "time": 1.88488}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 26411, "data_time": 0.03988, "loss_rpn_cls": 0.21688, "loss_rpn_bbox": 0.12517, "s0.loss_cls": 0.59702, "s0.acc": 84.43457, "s0.loss_bbox": 0.24806, "s1.loss_cls": 0.25222, "s1.acc": 86.70239, "s1.loss_bbox": 0.15138, "s2.loss_cls": 0.10528, "s2.acc": 89.21206, "s2.loss_bbox": 0.05917, "loss": 1.75517, "time": 1.94387}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 26411, "data_time": 0.03879, "loss_rpn_cls": 0.20086, "loss_rpn_bbox": 0.11654, "s0.loss_cls": 0.62681, "s0.acc": 84.17188, "s0.loss_bbox": 0.27057, "s1.loss_cls": 0.24908, "s1.acc": 87.62813, "s1.loss_bbox": 0.15251, "s2.loss_cls": 0.09796, "s2.acc": 90.38385, "s2.loss_bbox": 0.05382, "loss": 1.76816, "time": 1.93227}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 26411, "data_time": 0.03844, "loss_rpn_cls": 0.20644, "loss_rpn_bbox": 0.12175, "s0.loss_cls": 0.60217, "s0.acc": 84.17871, "s0.loss_bbox": 0.24596, "s1.loss_cls": 0.25074, "s1.acc": 86.55806, "s1.loss_bbox": 0.15462, "s2.loss_cls": 0.10505, "s2.acc": 88.91812, "s2.loss_bbox": 0.06166, "loss": 1.74838, "time": 1.90638}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "memory": 26411, "data_time": 0.03893, "loss_rpn_cls": 0.19419, "loss_rpn_bbox": 0.11769, "s0.loss_cls": 0.51637, "s0.acc": 86.41309, "s0.loss_bbox": 0.2302, "s1.loss_cls": 0.21235, "s1.acc": 88.56197, "s1.loss_bbox": 0.12974, "s2.loss_cls": 0.09198, "s2.acc": 89.92174, "s2.loss_bbox": 0.05345, "loss": 1.54596, "time": 1.95154}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.01, "memory": 26411, "data_time": 0.03943, "loss_rpn_cls": 0.19885, "loss_rpn_bbox": 0.1234, "s0.loss_cls": 0.59622, "s0.acc": 84.33984, "s0.loss_bbox": 0.25702, "s1.loss_cls": 0.24887, "s1.acc": 86.83865, "s1.loss_bbox": 0.15335, "s2.loss_cls": 0.10496, "s2.acc": 89.02808, "s2.loss_bbox": 0.06068, "loss": 1.74336, "time": 1.93911}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.01, "memory": 26411, "data_time": 0.03836, "loss_rpn_cls": 0.2028, "loss_rpn_bbox": 0.12347, "s0.loss_cls": 0.55637, "s0.acc": 85.37598, "s0.loss_bbox": 0.23267, "s1.loss_cls": 0.23158, "s1.acc": 87.51871, "s1.loss_bbox": 0.14213, "s2.loss_cls": 0.09709, "s2.acc": 89.45309, "s2.loss_bbox": 0.05679, "loss": 1.64291, "time": 1.90274}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 26411, "data_time": 0.03995, "loss_rpn_cls": 0.20988, "loss_rpn_bbox": 0.1252, "s0.loss_cls": 0.60229, "s0.acc": 84.4668, "s0.loss_bbox": 0.25519, "s1.loss_cls": 0.24446, "s1.acc": 87.35511, "s1.loss_bbox": 0.13975, "s2.loss_cls": 0.10082, "s2.acc": 89.71311, "s2.loss_bbox": 0.05246, "loss": 1.73005, "time": 1.98904}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.01, "memory": 26411, "data_time": 0.03909, "loss_rpn_cls": 0.225, "loss_rpn_bbox": 0.1248, "s0.loss_cls": 0.59235, "s0.acc": 85.29688, "s0.loss_bbox": 0.24137, "s1.loss_cls": 0.23798, "s1.acc": 87.90156, "s1.loss_bbox": 0.13578, "s2.loss_cls": 0.09705, "s2.acc": 90.20308, "s2.loss_bbox": 0.05046, "loss": 1.70478, "time": 1.94715}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 26411, "data_time": 0.03833, "loss_rpn_cls": 0.2214, "loss_rpn_bbox": 0.13643, "s0.loss_cls": 0.61559, "s0.acc": 83.77051, "s0.loss_bbox": 0.25954, "s1.loss_cls": 0.25509, "s1.acc": 86.1482, "s1.loss_bbox": 0.15524, "s2.loss_cls": 0.10662, "s2.acc": 88.33205, "s2.loss_bbox": 0.06143, "loss": 1.81133, "time": 1.89769}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.01, "memory": 26411, "data_time": 0.03836, "loss_rpn_cls": 0.19812, "loss_rpn_bbox": 0.119, "s0.loss_cls": 0.56423, "s0.acc": 84.66309, "s0.loss_bbox": 0.24452, "s1.loss_cls": 0.23321, "s1.acc": 87.10894, "s1.loss_bbox": 0.14044, "s2.loss_cls": 0.09571, "s2.acc": 89.62568, "s2.loss_bbox": 0.05324, "loss": 1.64846, "time": 1.8956}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 26411, "data_time": 0.03971, "loss_rpn_cls": 0.20777, "loss_rpn_bbox": 0.12613, "s0.loss_cls": 0.60021, "s0.acc": 83.91113, "s0.loss_bbox": 0.25676, "s1.loss_cls": 0.25678, "s1.acc": 85.95786, "s1.loss_bbox": 0.15984, "s2.loss_cls": 0.10879, "s2.acc": 88.04354, "s2.loss_bbox": 0.06512, "loss": 1.7814, "time": 1.94968}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.01, "memory": 26411, "data_time": 0.03811, "loss_rpn_cls": 0.19679, "loss_rpn_bbox": 0.12288, "s0.loss_cls": 0.56663, "s0.acc": 85.64258, "s0.loss_bbox": 0.24552, "s1.loss_cls": 0.22602, "s1.acc": 88.32724, "s1.loss_bbox": 0.13909, "s2.loss_cls": 0.0912, "s2.acc": 90.60472, "s2.loss_bbox": 0.05016, "loss": 1.63829, "time": 1.88076}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 26411, "data_time": 0.03891, "loss_rpn_cls": 0.17487, "loss_rpn_bbox": 0.11774, "s0.loss_cls": 0.57987, "s0.acc": 84.12109, "s0.loss_bbox": 0.25658, "s1.loss_cls": 0.24078, "s1.acc": 86.47071, "s1.loss_bbox": 0.15893, "s2.loss_cls": 0.10204, "s2.acc": 88.34475, "s2.loss_bbox": 0.06604, "loss": 1.69685, "time": 1.94435}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.01, "memory": 26411, "data_time": 0.03792, "loss_rpn_cls": 0.18728, "loss_rpn_bbox": 0.12182, "s0.loss_cls": 0.60458, "s0.acc": 83.77148, "s0.loss_bbox": 0.26324, "s1.loss_cls": 0.25042, "s1.acc": 86.14319, "s1.loss_bbox": 0.15804, "s2.loss_cls": 0.10507, "s2.acc": 88.17378, "s2.loss_bbox": 0.06231, "loss": 1.75277, "time": 1.88968}
{"mode": "val", "epoch": 2, "iter": 981, "lr": 0.01, "bbox_mAP": 0.081, "bbox_mAP_50": 0.129, "bbox_mAP_75": 0.087, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.099, "bbox_mAP_copypaste": "0.081 0.129 0.087 0.000 0.013 0.099"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01, "memory": 26411, "data_time": 0.0968, "loss_rpn_cls": 0.20404, "loss_rpn_bbox": 0.11573, "s0.loss_cls": 0.55852, "s0.acc": 85.16504, "s0.loss_bbox": 0.23027, "s1.loss_cls": 0.23464, "s1.acc": 87.35249, "s1.loss_bbox": 0.13315, "s2.loss_cls": 0.09885, "s2.acc": 89.23398, "s2.loss_bbox": 0.05261, "loss": 1.62781, "time": 1.99905}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 26411, "data_time": 0.0384, "loss_rpn_cls": 0.16652, "loss_rpn_bbox": 0.12209, "s0.loss_cls": 0.5642, "s0.acc": 85.07617, "s0.loss_bbox": 0.23348, "s1.loss_cls": 0.23271, "s1.acc": 87.22488, "s1.loss_bbox": 0.14291, "s2.loss_cls": 0.09994, "s2.acc": 88.85496, "s2.loss_bbox": 0.0593, "loss": 1.62115, "time": 1.93585}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 26411, "data_time": 0.03847, "loss_rpn_cls": 0.20403, "loss_rpn_bbox": 0.11564, "s0.loss_cls": 0.53072, "s0.acc": 85.38672, "s0.loss_bbox": 0.22927, "s1.loss_cls": 0.21816, "s1.acc": 87.66711, "s1.loss_bbox": 0.13456, "s2.loss_cls": 0.09235, "s2.acc": 89.60409, "s2.loss_bbox": 0.05486, "loss": 1.57961, "time": 1.96552}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 26411, "data_time": 0.03927, "loss_rpn_cls": 0.19214, "loss_rpn_bbox": 0.12282, "s0.loss_cls": 0.54784, "s0.acc": 85.02344, "s0.loss_bbox": 0.23079, "s1.loss_cls": 0.22564, "s1.acc": 87.57792, "s1.loss_bbox": 0.13523, "s2.loss_cls": 0.09486, "s2.acc": 89.52648, "s2.loss_bbox": 0.05218, "loss": 1.60151, "time": 1.94752}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.01, "memory": 26411, "data_time": 0.03871, "loss_rpn_cls": 0.19638, "loss_rpn_bbox": 0.11584, "s0.loss_cls": 0.54009, "s0.acc": 85.86328, "s0.loss_bbox": 0.22794, "s1.loss_cls": 0.21649, "s1.acc": 88.52917, "s1.loss_bbox": 0.12509, "s2.loss_cls": 0.08954, "s2.acc": 90.49603, "s2.loss_bbox": 0.04676, "loss": 1.55812, "time": 1.96457}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "memory": 26411, "data_time": 0.03737, "loss_rpn_cls": 0.22288, "loss_rpn_bbox": 0.12557, "s0.loss_cls": 0.57718, "s0.acc": 84.22656, "s0.loss_bbox": 0.23961, "s1.loss_cls": 0.24059, "s1.acc": 86.54343, "s1.loss_bbox": 0.14446, "s2.loss_cls": 0.10173, "s2.acc": 88.3868, "s2.loss_bbox": 0.05782, "loss": 1.70985, "time": 1.92139}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.01, "memory": 26411, "data_time": 0.0386, "loss_rpn_cls": 0.1812, "loss_rpn_bbox": 0.10318, "s0.loss_cls": 0.54349, "s0.acc": 84.82617, "s0.loss_bbox": 0.22563, "s1.loss_cls": 0.22814, "s1.acc": 86.94912, "s1.loss_bbox": 0.1398, "s2.loss_cls": 0.09886, "s2.acc": 88.43204, "s2.loss_bbox": 0.05921, "loss": 1.57952, "time": 1.98513}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.01, "memory": 26411, "data_time": 0.03927, "loss_rpn_cls": 0.19894, "loss_rpn_bbox": 0.11942, "s0.loss_cls": 0.5644, "s0.acc": 84.53613, "s0.loss_bbox": 0.24603, "s1.loss_cls": 0.23522, "s1.acc": 86.74555, "s1.loss_bbox": 0.14507, "s2.loss_cls": 0.1001, "s2.acc": 88.80862, "s2.loss_bbox": 0.0562, "loss": 1.66536, "time": 1.96577}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.01, "memory": 26411, "data_time": 0.03869, "loss_rpn_cls": 0.2007, "loss_rpn_bbox": 0.12802, "s0.loss_cls": 0.58891, "s0.acc": 83.98926, "s0.loss_bbox": 0.24767, "s1.loss_cls": 0.24676, "s1.acc": 86.44565, "s1.loss_bbox": 0.15033, "s2.loss_cls": 0.10539, "s2.acc": 88.38911, "s2.loss_bbox": 0.05921, "loss": 1.727, "time": 1.96516}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.01, "memory": 26411, "data_time": 0.03816, "loss_rpn_cls": 0.17682, "loss_rpn_bbox": 0.1165, "s0.loss_cls": 0.55949, "s0.acc": 84.53906, "s0.loss_bbox": 0.24586, "s1.loss_cls": 0.23236, "s1.acc": 86.96991, "s1.loss_bbox": 0.14861, "s2.loss_cls": 0.09693, "s2.acc": 89.13834, "s2.loss_bbox": 0.05902, "loss": 1.6356, "time": 1.89687}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.01, "memory": 26411, "data_time": 0.03926, "loss_rpn_cls": 0.17181, "loss_rpn_bbox": 0.12332, "s0.loss_cls": 0.58896, "s0.acc": 83.42285, "s0.loss_bbox": 0.2583, "s1.loss_cls": 0.24657, "s1.acc": 85.50267, "s1.loss_bbox": 0.15528, "s2.loss_cls": 0.10669, "s2.acc": 87.04952, "s2.loss_bbox": 0.06524, "loss": 1.71618, "time": 1.97955}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.01, "memory": 26411, "data_time": 0.03764, "loss_rpn_cls": 0.20541, "loss_rpn_bbox": 0.13696, "s0.loss_cls": 0.57746, "s0.acc": 84.52051, "s0.loss_bbox": 0.25429, "s1.loss_cls": 0.22994, "s1.acc": 87.32361, "s1.loss_bbox": 0.13816, "s2.loss_cls": 0.09529, "s2.acc": 89.4452, "s2.loss_bbox": 0.05231, "loss": 1.68981, "time": 1.91442}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.01, "memory": 26411, "data_time": 0.03907, "loss_rpn_cls": 0.20015, "loss_rpn_bbox": 0.11712, "s0.loss_cls": 0.52458, "s0.acc": 86.41992, "s0.loss_bbox": 0.20763, "s1.loss_cls": 0.21301, "s1.acc": 88.71265, "s1.loss_bbox": 0.1177, "s2.loss_cls": 0.08785, "s2.acc": 90.65822, "s2.loss_bbox": 0.04282, "loss": 1.51085, "time": 1.95142}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.01, "memory": 26411, "data_time": 0.0375, "loss_rpn_cls": 0.22151, "loss_rpn_bbox": 0.13057, "s0.loss_cls": 0.57262, "s0.acc": 84.84668, "s0.loss_bbox": 0.25384, "s1.loss_cls": 0.2335, "s1.acc": 87.36528, "s1.loss_bbox": 0.14027, "s2.loss_cls": 0.09599, "s2.acc": 89.48855, "s2.loss_bbox": 0.05298, "loss": 1.70127, "time": 1.8878}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.01, "memory": 26411, "data_time": 0.03838, "loss_rpn_cls": 0.17754, "loss_rpn_bbox": 0.11182, "s0.loss_cls": 0.56425, "s0.acc": 84.53613, "s0.loss_bbox": 0.2402, "s1.loss_cls": 0.24216, "s1.acc": 86.28097, "s1.loss_bbox": 0.15627, "s2.loss_cls": 0.10225, "s2.acc": 88.39588, "s2.loss_bbox": 0.06331, "loss": 1.6578, "time": 1.99747}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.01, "memory": 26411, "data_time": 0.03769, "loss_rpn_cls": 0.1964, "loss_rpn_bbox": 0.11893, "s0.loss_cls": 0.58659, "s0.acc": 83.4043, "s0.loss_bbox": 0.26181, "s1.loss_cls": 0.24587, "s1.acc": 85.72453, "s1.loss_bbox": 0.15631, "s2.loss_cls": 0.10455, "s2.acc": 87.47628, "s2.loss_bbox": 0.06358, "loss": 1.73404, "time": 1.91902}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.01, "memory": 26411, "data_time": 0.03833, "loss_rpn_cls": 0.18759, "loss_rpn_bbox": 0.10459, "s0.loss_cls": 0.54615, "s0.acc": 85.41113, "s0.loss_bbox": 0.22538, "s1.loss_cls": 0.22585, "s1.acc": 87.49785, "s1.loss_bbox": 0.13286, "s2.loss_cls": 0.09453, "s2.acc": 89.37619, "s2.loss_bbox": 0.05263, "loss": 1.5696, "time": 1.97076}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.01, "memory": 26411, "data_time": 0.03774, "loss_rpn_cls": 0.20108, "loss_rpn_bbox": 0.12361, "s0.loss_cls": 0.58048, "s0.acc": 84.31152, "s0.loss_bbox": 0.25517, "s1.loss_cls": 0.23494, "s1.acc": 87.06326, "s1.loss_bbox": 0.14342, "s2.loss_cls": 0.09819, "s2.acc": 89.17317, "s2.loss_bbox": 0.05548, "loss": 1.69237, "time": 1.90198}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.01, "memory": 26411, "data_time": 0.03915, "loss_rpn_cls": 0.21572, "loss_rpn_bbox": 0.13229, "s0.loss_cls": 0.60419, "s0.acc": 83.42871, "s0.loss_bbox": 0.25691, "s1.loss_cls": 0.25216, "s1.acc": 85.53119, "s1.loss_bbox": 0.1493, "s2.loss_cls": 0.10679, "s2.acc": 87.53926, "s2.loss_bbox": 0.06052, "loss": 1.77788, "time": 1.96377}
{"mode": "val", "epoch": 3, "iter": 981, "lr": 0.01, "bbox_mAP": 0.092, "bbox_mAP_50": 0.146, "bbox_mAP_75": 0.098, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.01, "bbox_mAP_l": 0.115, "bbox_mAP_copypaste": "0.092 0.146 0.098 0.000 0.010 0.115"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 26411, "data_time": 0.09582, "loss_rpn_cls": 0.18997, "loss_rpn_bbox": 0.12304, "s0.loss_cls": 0.55476, "s0.acc": 84.29688, "s0.loss_bbox": 0.24206, "s1.loss_cls": 0.23145, "s1.acc": 86.4265, "s1.loss_bbox": 0.14766, "s2.loss_cls": 0.0989, "s2.acc": 88.26085, "s2.loss_bbox": 0.05862, "loss": 1.64646, "time": 2.0489}
