2021-10-04 00:16:52,847 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+2577e37
------------------------------------------------------------

2021-10-04 00:16:53,357 - mmdet - INFO - Distributed training: False
2021-10-04 00:16:53,936 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(type='FocalLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '../dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../dataset/test.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/final3'
gpu_ids = range(0, 1)

2021-10-04 00:16:54,669 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2021-10-04 00:16:54,903 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-04 00:16:54,929 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-04 00:16:54,937 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-04 00:16:55,255 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-04 00:16:55,572 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-04 00:16:58,960 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/final3
2021-10-04 00:16:58,961 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-10-04 00:16:58,961 - mmdet - INFO - workflow: [('train', 1)], max: 5 epochs
2021-10-04 00:17:30,224 - mmdet - INFO - Epoch [1][50/1221]	lr: 9.890e-05, eta: 1:02:54, time: 0.623, data_time: 0.056, memory: 6669, loss_rpn_cls: 196.5947, loss_rpn_bbox: 1.1472, s0.loss_cls: 1.2685, s0.acc: 79.5205, s0.loss_bbox: 0.2382, s1.loss_cls: 0.5658, s1.acc: 71.4111, s1.loss_bbox: 0.0959, s2.loss_cls: 0.2654, s2.acc: 83.0469, s2.loss_bbox: 0.0269, loss: 200.2025
2021-10-04 00:17:59,145 - mmdet - INFO - Epoch [1][100/1221]	lr: 1.988e-04, eta: 1:00:08, time: 0.578, data_time: 0.012, memory: 6669, loss_rpn_cls: 1.7734, loss_rpn_bbox: 0.4781, s0.loss_cls: 0.0774, s0.acc: 94.6729, s0.loss_bbox: 0.1219, s1.loss_cls: 0.0359, s1.acc: 97.9697, s1.loss_bbox: 0.0371, s2.loss_cls: 0.0116, s2.acc: 98.7969, s2.loss_bbox: 0.0104, loss: 2.5458
2021-10-04 00:18:27,649 - mmdet - INFO - Epoch [1][150/1221]	lr: 2.987e-04, eta: 0:58:37, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 1.5868, loss_rpn_bbox: 0.6030, s0.loss_cls: 0.0986, s0.acc: 94.6328, s0.loss_bbox: 0.1309, s1.loss_cls: 0.0228, s1.acc: 97.8281, s1.loss_bbox: 0.0351, s2.loss_cls: 0.0097, s2.acc: 98.6982, s2.loss_bbox: 0.0089, loss: 2.4957
2021-10-04 00:18:56,443 - mmdet - INFO - Epoch [1][200/1221]	lr: 3.986e-04, eta: 0:57:45, time: 0.576, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.8072, loss_rpn_bbox: 0.4813, s0.loss_cls: 0.0602, s0.acc: 94.4941, s0.loss_bbox: 0.1290, s1.loss_cls: 0.0179, s1.acc: 97.4365, s1.loss_bbox: 0.0401, s2.loss_cls: 0.0064, s2.acc: 98.6934, s2.loss_bbox: 0.0058, loss: 1.5478
2021-10-04 00:19:25,220 - mmdet - INFO - Epoch [1][250/1221]	lr: 4.985e-04, eta: 0:57:03, time: 0.576, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7488, loss_rpn_bbox: 0.4763, s0.loss_cls: 0.0638, s0.acc: 93.3877, s0.loss_bbox: 0.1552, s1.loss_cls: 0.0188, s1.acc: 96.9521, s1.loss_bbox: 0.0468, s2.loss_cls: 0.0067, s2.acc: 98.3965, s2.loss_bbox: 0.0068, loss: 1.5232
2021-10-04 00:19:53,905 - mmdet - INFO - Epoch [1][300/1221]	lr: 5.984e-04, eta: 0:56:23, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7506, loss_rpn_bbox: 0.4716, s0.loss_cls: 0.0614, s0.acc: 93.5752, s0.loss_bbox: 0.1521, s1.loss_cls: 0.0179, s1.acc: 97.0771, s1.loss_bbox: 0.0461, s2.loss_cls: 0.0059, s2.acc: 98.5107, s2.loss_bbox: 0.0065, loss: 1.5121
2021-10-04 00:20:22,755 - mmdet - INFO - Epoch [1][350/1221]	lr: 6.983e-04, eta: 0:55:49, time: 0.577, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.9472, loss_rpn_bbox: 0.5128, s0.loss_cls: 0.0748, s0.acc: 92.8301, s0.loss_bbox: 0.1702, s1.loss_cls: 0.0242, s1.acc: 96.6270, s1.loss_bbox: 0.0528, s2.loss_cls: 0.0080, s2.acc: 98.2383, s2.loss_bbox: 0.0083, loss: 1.7983
2021-10-04 00:20:51,311 - mmdet - INFO - Epoch [1][400/1221]	lr: 7.982e-04, eta: 0:55:12, time: 0.571, data_time: 0.013, memory: 6669, loss_rpn_cls: 1.1216, loss_rpn_bbox: 0.6522, s0.loss_cls: 0.0817, s0.acc: 94.4307, s0.loss_bbox: 0.1435, s1.loss_cls: 0.0217, s1.acc: 97.9736, s1.loss_bbox: 0.0347, s2.loss_cls: 0.0075, s2.acc: 98.8389, s2.loss_bbox: 0.0069, loss: 2.0697
2021-10-04 00:21:20,015 - mmdet - INFO - Epoch [1][450/1221]	lr: 8.981e-04, eta: 0:54:39, time: 0.574, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.8604, loss_rpn_bbox: 0.5571, s0.loss_cls: 0.0634, s0.acc: 94.2617, s0.loss_bbox: 0.1441, s1.loss_cls: 0.0197, s1.acc: 97.3799, s1.loss_bbox: 0.0395, s2.loss_cls: 0.0072, s2.acc: 98.5752, s2.loss_bbox: 0.0055, loss: 1.6969
2021-10-04 00:21:48,494 - mmdet - INFO - Epoch [1][500/1221]	lr: 9.980e-04, eta: 0:54:04, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7362, loss_rpn_bbox: 0.4840, s0.loss_cls: 0.0602, s0.acc: 93.5840, s0.loss_bbox: 0.1572, s1.loss_cls: 0.0187, s1.acc: 97.0537, s1.loss_bbox: 0.0476, s2.loss_cls: 0.0061, s2.acc: 98.5332, s2.loss_bbox: 0.0068, loss: 1.5169
2021-10-04 00:22:16,902 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.000e-03, eta: 0:53:30, time: 0.568, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.8016, loss_rpn_bbox: 0.4579, s0.loss_cls: 0.0610, s0.acc: 93.7129, s0.loss_bbox: 0.1502, s1.loss_cls: 0.0178, s1.acc: 97.1748, s1.loss_bbox: 0.0457, s2.loss_cls: 0.0057, s2.acc: 98.6172, s2.loss_bbox: 0.0058, loss: 1.5456
2021-10-04 00:22:45,407 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.000e-03, eta: 0:52:57, time: 0.570, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.7188, loss_rpn_bbox: 0.4878, s0.loss_cls: 0.0597, s0.acc: 93.2734, s0.loss_bbox: 0.1560, s1.loss_cls: 0.0188, s1.acc: 96.6572, s1.loss_bbox: 0.0557, s2.loss_cls: 0.0061, s2.acc: 98.3965, s2.loss_bbox: 0.0082, loss: 1.5110
2021-10-04 00:23:13,999 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.000e-03, eta: 0:52:26, time: 0.572, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.7722, loss_rpn_bbox: 0.4693, s0.loss_cls: 0.0604, s0.acc: 93.3945, s0.loss_bbox: 0.1481, s1.loss_cls: 0.0193, s1.acc: 96.4805, s1.loss_bbox: 0.0584, s2.loss_cls: 0.0062, s2.acc: 98.2861, s2.loss_bbox: 0.0094, loss: 1.5434
2021-10-04 00:23:42,756 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.000e-03, eta: 0:51:57, time: 0.575, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6994, loss_rpn_bbox: 0.4456, s0.loss_cls: 0.0583, s0.acc: 93.3916, s0.loss_bbox: 0.1406, s1.loss_cls: 0.0207, s1.acc: 96.0283, s1.loss_bbox: 0.0663, s2.loss_cls: 0.0069, s2.acc: 98.0059, s2.loss_bbox: 0.0131, loss: 1.4509
2021-10-04 00:24:11,444 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.000e-03, eta: 0:51:27, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6931, loss_rpn_bbox: 0.4478, s0.loss_cls: 0.0612, s0.acc: 93.0391, s0.loss_bbox: 0.1525, s1.loss_cls: 0.0208, s1.acc: 96.0859, s1.loss_bbox: 0.0639, s2.loss_cls: 0.0068, s2.acc: 97.9736, s2.loss_bbox: 0.0124, loss: 1.4584
2021-10-04 00:24:40,348 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.000e-03, eta: 0:50:58, time: 0.578, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6725, loss_rpn_bbox: 0.4815, s0.loss_cls: 0.0582, s0.acc: 93.3203, s0.loss_bbox: 0.1437, s1.loss_cls: 0.0209, s1.acc: 95.9863, s1.loss_bbox: 0.0650, s2.loss_cls: 0.0069, s2.acc: 97.8623, s2.loss_bbox: 0.0143, loss: 1.4631
2021-10-04 00:25:09,291 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.000e-03, eta: 0:50:30, time: 0.579, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6686, loss_rpn_bbox: 0.4803, s0.loss_cls: 0.0588, s0.acc: 93.1504, s0.loss_bbox: 0.1469, s1.loss_cls: 0.0216, s1.acc: 95.8584, s1.loss_bbox: 0.0689, s2.loss_cls: 0.0070, s2.acc: 97.8467, s2.loss_bbox: 0.0150, loss: 1.4673
2021-10-04 00:25:37,896 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.000e-03, eta: 0:50:00, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6848, loss_rpn_bbox: 0.4717, s0.loss_cls: 0.0612, s0.acc: 92.8281, s0.loss_bbox: 0.1543, s1.loss_cls: 0.0223, s1.acc: 95.6094, s1.loss_bbox: 0.0717, s2.loss_cls: 0.0074, s2.acc: 97.6172, s2.loss_bbox: 0.0162, loss: 1.4896
2021-10-04 00:26:06,565 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.000e-03, eta: 0:49:30, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6711, loss_rpn_bbox: 0.4827, s0.loss_cls: 0.0544, s0.acc: 93.7080, s0.loss_bbox: 0.1346, s1.loss_cls: 0.0199, s1.acc: 95.9854, s1.loss_bbox: 0.0653, s2.loss_cls: 0.0067, s2.acc: 97.7646, s2.loss_bbox: 0.0161, loss: 1.4507
2021-10-04 00:26:35,254 - mmdet - INFO - Exp name: final3.py
2021-10-04 00:26:35,255 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.000e-03, eta: 0:49:01, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6766, loss_rpn_bbox: 0.5193, s0.loss_cls: 0.0610, s0.acc: 92.8242, s0.loss_bbox: 0.1512, s1.loss_cls: 0.0227, s1.acc: 95.4316, s1.loss_bbox: 0.0749, s2.loss_cls: 0.0077, s2.acc: 97.5664, s2.loss_bbox: 0.0163, loss: 1.5296
2021-10-04 00:27:03,862 - mmdet - INFO - Epoch [1][1050/1221]	lr: 1.000e-03, eta: 0:48:31, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6836, loss_rpn_bbox: 0.4692, s0.loss_cls: 0.0548, s0.acc: 93.6943, s0.loss_bbox: 0.1302, s1.loss_cls: 0.0205, s1.acc: 95.8477, s1.loss_bbox: 0.0673, s2.loss_cls: 0.0070, s2.acc: 97.6768, s2.loss_bbox: 0.0166, loss: 1.4492
2021-10-04 00:27:32,705 - mmdet - INFO - Epoch [1][1100/1221]	lr: 1.000e-03, eta: 0:48:03, time: 0.577, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6851, loss_rpn_bbox: 0.4729, s0.loss_cls: 0.0522, s0.acc: 93.9375, s0.loss_bbox: 0.1247, s1.loss_cls: 0.0194, s1.acc: 96.0479, s1.loss_bbox: 0.0639, s2.loss_cls: 0.0067, s2.acc: 97.8359, s2.loss_bbox: 0.0149, loss: 1.4397
2021-10-04 00:28:01,337 - mmdet - INFO - Epoch [1][1150/1221]	lr: 1.000e-03, eta: 0:47:33, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6571, loss_rpn_bbox: 0.4552, s0.loss_cls: 0.0599, s0.acc: 92.6660, s0.loss_bbox: 0.1514, s1.loss_cls: 0.0231, s1.acc: 95.0635, s1.loss_bbox: 0.0813, s2.loss_cls: 0.0080, s2.acc: 97.2354, s2.loss_bbox: 0.0209, loss: 1.4570
2021-10-04 00:28:30,042 - mmdet - INFO - Epoch [1][1200/1221]	lr: 1.000e-03, eta: 0:47:04, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6434, loss_rpn_bbox: 0.4618, s0.loss_cls: 0.0585, s0.acc: 92.8467, s0.loss_bbox: 0.1454, s1.loss_cls: 0.0228, s1.acc: 95.0752, s1.loss_bbox: 0.0806, s2.loss_cls: 0.0081, s2.acc: 97.1934, s2.loss_bbox: 0.0210, loss: 1.4416
2021-10-04 00:28:42,065 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-04 00:34:34,784 - mmdet - INFO - Evaluating bbox...
2021-10-04 00:35:17,826 - mmdet - INFO - Exp name: final3.py
2021-10-04 00:35:17,830 - mmdet - INFO - Epoch(val) [1][4883]	bbox_mAP: 0.0060, bbox_mAP_50: 0.0180, bbox_mAP_75: 0.0030, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0080, bbox_mAP_copypaste: 0.006 0.018 0.003 0.000 0.000 0.008
2021-10-04 00:35:48,857 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.000e-03, eta: 0:45:45, time: 0.618, data_time: 0.056, memory: 6669, loss_rpn_cls: 0.6487, loss_rpn_bbox: 0.4232, s0.loss_cls: 0.0574, s0.acc: 92.8350, s0.loss_bbox: 0.1439, s1.loss_cls: 0.0223, s1.acc: 95.0088, s1.loss_bbox: 0.0783, s2.loss_cls: 0.0081, s2.acc: 96.9570, s2.loss_bbox: 0.0233, loss: 1.4053
2021-10-04 00:36:17,549 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.000e-03, eta: 0:45:18, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6781, loss_rpn_bbox: 0.4401, s0.loss_cls: 0.0659, s0.acc: 92.1279, s0.loss_bbox: 0.1581, s1.loss_cls: 0.0261, s1.acc: 94.5283, s1.loss_bbox: 0.0858, s2.loss_cls: 0.0094, s2.acc: 96.7109, s2.loss_bbox: 0.0237, loss: 1.4871
2021-10-04 00:36:46,256 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.000e-03, eta: 0:44:50, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6291, loss_rpn_bbox: 0.4809, s0.loss_cls: 0.0631, s0.acc: 92.0879, s0.loss_bbox: 0.1647, s1.loss_cls: 0.0243, s1.acc: 94.6484, s1.loss_bbox: 0.0854, s2.loss_cls: 0.0089, s2.acc: 96.7910, s2.loss_bbox: 0.0237, loss: 1.4799
2021-10-04 00:37:14,854 - mmdet - INFO - Epoch [2][200/1221]	lr: 1.000e-03, eta: 0:44:23, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6458, loss_rpn_bbox: 0.4659, s0.loss_cls: 0.0631, s0.acc: 92.3457, s0.loss_bbox: 0.1554, s1.loss_cls: 0.0242, s1.acc: 94.7373, s1.loss_bbox: 0.0852, s2.loss_cls: 0.0086, s2.acc: 96.9199, s2.loss_bbox: 0.0232, loss: 1.4713
2021-10-04 00:37:43,599 - mmdet - INFO - Epoch [2][250/1221]	lr: 1.000e-03, eta: 0:43:55, time: 0.575, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6101, loss_rpn_bbox: 0.4411, s0.loss_cls: 0.0602, s0.acc: 92.2998, s0.loss_bbox: 0.1538, s1.loss_cls: 0.0242, s1.acc: 94.3770, s1.loss_bbox: 0.0893, s2.loss_cls: 0.0090, s2.acc: 96.5537, s2.loss_bbox: 0.0264, loss: 1.4141
2021-10-04 00:38:12,291 - mmdet - INFO - Epoch [2][300/1221]	lr: 1.000e-03, eta: 0:43:27, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6136, loss_rpn_bbox: 0.4616, s0.loss_cls: 0.0623, s0.acc: 92.0332, s0.loss_bbox: 0.1537, s1.loss_cls: 0.0257, s1.acc: 93.8242, s1.loss_bbox: 0.0954, s2.loss_cls: 0.0097, s2.acc: 96.0537, s2.loss_bbox: 0.0306, loss: 1.4526
2021-10-04 00:38:40,962 - mmdet - INFO - Epoch [2][350/1221]	lr: 1.000e-03, eta: 0:43:00, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7308, loss_rpn_bbox: 0.4588, s0.loss_cls: 0.0568, s0.acc: 93.3359, s0.loss_bbox: 0.1335, s1.loss_cls: 0.0221, s1.acc: 95.3027, s1.loss_bbox: 0.0733, s2.loss_cls: 0.0083, s2.acc: 97.0215, s2.loss_bbox: 0.0224, loss: 1.5060
2021-10-04 00:39:09,627 - mmdet - INFO - Epoch [2][400/1221]	lr: 1.000e-03, eta: 0:42:32, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6532, loss_rpn_bbox: 0.4319, s0.loss_cls: 0.0594, s0.acc: 92.4990, s0.loss_bbox: 0.1475, s1.loss_cls: 0.0245, s1.acc: 94.4404, s1.loss_bbox: 0.0866, s2.loss_cls: 0.0089, s2.acc: 96.5605, s2.loss_bbox: 0.0265, loss: 1.4385
2021-10-04 00:39:38,942 - mmdet - INFO - Epoch [2][450/1221]	lr: 1.000e-03, eta: 0:42:06, time: 0.586, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6195, loss_rpn_bbox: 0.4574, s0.loss_cls: 0.0627, s0.acc: 92.1055, s0.loss_bbox: 0.1520, s1.loss_cls: 0.0257, s1.acc: 93.9238, s1.loss_bbox: 0.0937, s2.loss_cls: 0.0097, s2.acc: 96.1455, s2.loss_bbox: 0.0297, loss: 1.4503
2021-10-04 00:40:07,517 - mmdet - INFO - Epoch [2][500/1221]	lr: 1.000e-03, eta: 0:41:37, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7587, loss_rpn_bbox: 0.4878, s0.loss_cls: 0.0625, s0.acc: 92.7891, s0.loss_bbox: 0.1418, s1.loss_cls: 0.0248, s1.acc: 94.7900, s1.loss_bbox: 0.0803, s2.loss_cls: 0.0093, s2.acc: 96.7305, s2.loss_bbox: 0.0241, loss: 1.5892
2021-10-04 00:40:36,204 - mmdet - INFO - Epoch [2][550/1221]	lr: 1.000e-03, eta: 0:41:09, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.7048, loss_rpn_bbox: 0.4934, s0.loss_cls: 0.0596, s0.acc: 92.8184, s0.loss_bbox: 0.1387, s1.loss_cls: 0.0244, s1.acc: 94.6338, s1.loss_bbox: 0.0819, s2.loss_cls: 0.0093, s2.acc: 96.6279, s2.loss_bbox: 0.0246, loss: 1.5367
2021-10-04 00:41:04,854 - mmdet - INFO - Epoch [2][600/1221]	lr: 1.000e-03, eta: 0:40:41, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6357, loss_rpn_bbox: 0.4459, s0.loss_cls: 0.0628, s0.acc: 91.9023, s0.loss_bbox: 0.1554, s1.loss_cls: 0.0260, s1.acc: 93.7324, s1.loss_bbox: 0.0968, s2.loss_cls: 0.0100, s2.acc: 95.9854, s2.loss_bbox: 0.0307, loss: 1.4633
2021-10-04 00:41:33,531 - mmdet - INFO - Epoch [2][650/1221]	lr: 1.000e-03, eta: 0:40:13, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6223, loss_rpn_bbox: 0.4574, s0.loss_cls: 0.0631, s0.acc: 91.9307, s0.loss_bbox: 0.1509, s1.loss_cls: 0.0267, s1.acc: 93.5508, s1.loss_bbox: 0.0974, s2.loss_cls: 0.0105, s2.acc: 95.7285, s2.loss_bbox: 0.0332, loss: 1.4614
2021-10-04 00:42:02,163 - mmdet - INFO - Epoch [2][700/1221]	lr: 1.000e-03, eta: 0:39:45, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6272, loss_rpn_bbox: 0.4775, s0.loss_cls: 0.0517, s0.acc: 93.4121, s0.loss_bbox: 0.1256, s1.loss_cls: 0.0223, s1.acc: 94.5811, s1.loss_bbox: 0.0834, s2.loss_cls: 0.0086, s2.acc: 96.4180, s2.loss_bbox: 0.0286, loss: 1.4249
2021-10-04 00:42:30,832 - mmdet - INFO - Epoch [2][750/1221]	lr: 1.000e-03, eta: 0:39:17, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6040, loss_rpn_bbox: 0.4775, s0.loss_cls: 0.0594, s0.acc: 92.2500, s0.loss_bbox: 0.1470, s1.loss_cls: 0.0250, s1.acc: 93.7979, s1.loss_bbox: 0.0927, s2.loss_cls: 0.0098, s2.acc: 95.7520, s2.loss_bbox: 0.0327, loss: 1.4483
2021-10-04 00:42:59,487 - mmdet - INFO - Epoch [2][800/1221]	lr: 1.000e-03, eta: 0:38:48, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.6229, loss_rpn_bbox: 0.4451, s0.loss_cls: 0.0599, s0.acc: 92.0752, s0.loss_bbox: 0.1420, s1.loss_cls: 0.0269, s1.acc: 93.2588, s1.loss_bbox: 0.1001, s2.loss_cls: 0.0105, s2.acc: 95.3320, s2.loss_bbox: 0.0356, loss: 1.4431
2021-10-04 00:43:28,053 - mmdet - INFO - Epoch [2][850/1221]	lr: 1.000e-03, eta: 0:38:20, time: 0.571, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.6026, loss_rpn_bbox: 0.4154, s0.loss_cls: 0.0661, s0.acc: 91.2959, s0.loss_bbox: 0.1604, s1.loss_cls: 0.0289, s1.acc: 92.6934, s1.loss_bbox: 0.1091, s2.loss_cls: 0.0115, s2.acc: 95.0059, s2.loss_bbox: 0.0399, loss: 1.4337
2021-10-04 00:43:56,599 - mmdet - INFO - Epoch [2][900/1221]	lr: 1.000e-03, eta: 0:37:52, time: 0.571, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5930, loss_rpn_bbox: 0.4317, s0.loss_cls: 0.0598, s0.acc: 92.1602, s0.loss_bbox: 0.1401, s1.loss_cls: 0.0265, s1.acc: 93.2979, s1.loss_bbox: 0.0991, s2.loss_cls: 0.0104, s2.acc: 95.3184, s2.loss_bbox: 0.0365, loss: 1.3971
2021-10-04 00:44:25,112 - mmdet - INFO - Epoch [2][950/1221]	lr: 1.000e-03, eta: 0:37:23, time: 0.570, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5942, loss_rpn_bbox: 0.4295, s0.loss_cls: 0.0676, s0.acc: 90.7139, s0.loss_bbox: 0.1639, s1.loss_cls: 0.0302, s1.acc: 92.1152, s1.loss_bbox: 0.1178, s2.loss_cls: 0.0119, s2.acc: 94.5244, s2.loss_bbox: 0.0431, loss: 1.4581
2021-10-04 00:44:53,774 - mmdet - INFO - Epoch [2][1000/1221]	lr: 1.000e-03, eta: 0:36:55, time: 0.573, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5767, loss_rpn_bbox: 0.4386, s0.loss_cls: 0.0600, s0.acc: 91.9414, s0.loss_bbox: 0.1439, s1.loss_cls: 0.0271, s1.acc: 93.0430, s1.loss_bbox: 0.1010, s2.loss_cls: 0.0110, s2.acc: 94.9229, s2.loss_bbox: 0.0382, loss: 1.3965
2021-10-04 00:45:22,276 - mmdet - INFO - Epoch [2][1050/1221]	lr: 1.000e-03, eta: 0:36:26, time: 0.570, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5828, loss_rpn_bbox: 0.4174, s0.loss_cls: 0.0618, s0.acc: 91.6748, s0.loss_bbox: 0.1499, s1.loss_cls: 0.0272, s1.acc: 92.8018, s1.loss_bbox: 0.1081, s2.loss_cls: 0.0109, s2.acc: 94.9717, s2.loss_bbox: 0.0409, loss: 1.3989
2021-10-04 00:45:50,877 - mmdet - INFO - Epoch [2][1100/1221]	lr: 1.000e-03, eta: 0:35:58, time: 0.572, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.6085, loss_rpn_bbox: 0.4277, s0.loss_cls: 0.0643, s0.acc: 91.3438, s0.loss_bbox: 0.1538, s1.loss_cls: 0.0289, s1.acc: 92.5731, s1.loss_bbox: 0.1094, s2.loss_cls: 0.0118, s2.acc: 94.6250, s2.loss_bbox: 0.0428, loss: 1.4472
2021-10-04 00:46:19,553 - mmdet - INFO - Epoch [2][1150/1221]	lr: 1.000e-03, eta: 0:35:30, time: 0.574, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5855, loss_rpn_bbox: 0.4191, s0.loss_cls: 0.0603, s0.acc: 91.8105, s0.loss_bbox: 0.1430, s1.loss_cls: 0.0272, s1.acc: 92.8076, s1.loss_bbox: 0.1037, s2.loss_cls: 0.0113, s2.acc: 94.8164, s2.loss_bbox: 0.0398, loss: 1.3899
2021-10-04 00:46:48,203 - mmdet - INFO - Epoch [2][1200/1221]	lr: 1.000e-03, eta: 0:35:01, time: 0.573, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5926, loss_rpn_bbox: 0.4486, s0.loss_cls: 0.0592, s0.acc: 91.6748, s0.loss_bbox: 0.1468, s1.loss_cls: 0.0265, s1.acc: 92.8438, s1.loss_bbox: 0.1031, s2.loss_cls: 0.0111, s2.acc: 94.6475, s2.loss_bbox: 0.0417, loss: 1.4297
2021-10-04 00:47:00,146 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-10-04 00:52:53,706 - mmdet - INFO - Evaluating bbox...
2021-10-04 00:53:37,987 - mmdet - INFO - Exp name: final3.py
2021-10-04 00:53:37,988 - mmdet - INFO - Epoch(val) [2][4883]	bbox_mAP: 0.0220, bbox_mAP_50: 0.0470, bbox_mAP_75: 0.0180, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0030, bbox_mAP_l: 0.0280, bbox_mAP_copypaste: 0.022 0.047 0.018 0.000 0.003 0.028
2021-10-04 00:54:08,896 - mmdet - INFO - Epoch [3][50/1221]	lr: 1.000e-03, eta: 0:34:07, time: 0.616, data_time: 0.057, memory: 6669, loss_rpn_cls: 0.5758, loss_rpn_bbox: 0.4087, s0.loss_cls: 0.0568, s0.acc: 92.4492, s0.loss_bbox: 0.1299, s1.loss_cls: 0.0263, s1.acc: 93.0820, s1.loss_bbox: 0.0964, s2.loss_cls: 0.0109, s2.acc: 94.7461, s2.loss_bbox: 0.0387, loss: 1.3434
2021-10-04 00:54:37,407 - mmdet - INFO - Epoch [3][100/1221]	lr: 1.000e-03, eta: 0:33:39, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5653, loss_rpn_bbox: 0.4038, s0.loss_cls: 0.0604, s0.acc: 91.4941, s0.loss_bbox: 0.1461, s1.loss_cls: 0.0274, s1.acc: 92.4053, s1.loss_bbox: 0.1068, s2.loss_cls: 0.0115, s2.acc: 94.2959, s2.loss_bbox: 0.0433, loss: 1.3645
2021-10-04 00:55:05,910 - mmdet - INFO - Epoch [3][150/1221]	lr: 1.000e-03, eta: 0:33:11, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5597, loss_rpn_bbox: 0.4176, s0.loss_cls: 0.0651, s0.acc: 90.9326, s0.loss_bbox: 0.1551, s1.loss_cls: 0.0301, s1.acc: 91.8730, s1.loss_bbox: 0.1136, s2.loss_cls: 0.0125, s2.acc: 93.8184, s2.loss_bbox: 0.0468, loss: 1.4004
2021-10-04 00:55:34,450 - mmdet - INFO - Epoch [3][200/1221]	lr: 1.000e-03, eta: 0:32:42, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5638, loss_rpn_bbox: 0.4421, s0.loss_cls: 0.0644, s0.acc: 91.0059, s0.loss_bbox: 0.1560, s1.loss_cls: 0.0288, s1.acc: 92.1826, s1.loss_bbox: 0.1085, s2.loss_cls: 0.0118, s2.acc: 94.2480, s2.loss_bbox: 0.0422, loss: 1.4175
2021-10-04 00:56:03,007 - mmdet - INFO - Epoch [3][250/1221]	lr: 1.000e-03, eta: 0:32:14, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5838, loss_rpn_bbox: 0.4169, s0.loss_cls: 0.0612, s0.acc: 91.6465, s0.loss_bbox: 0.1420, s1.loss_cls: 0.0279, s1.acc: 92.4512, s1.loss_bbox: 0.1050, s2.loss_cls: 0.0119, s2.acc: 94.2090, s2.loss_bbox: 0.0440, loss: 1.3928
2021-10-04 00:56:31,526 - mmdet - INFO - Epoch [3][300/1221]	lr: 1.000e-03, eta: 0:31:46, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5760, loss_rpn_bbox: 0.4390, s0.loss_cls: 0.0596, s0.acc: 91.8535, s0.loss_bbox: 0.1320, s1.loss_cls: 0.0275, s1.acc: 92.3682, s1.loss_bbox: 0.1008, s2.loss_cls: 0.0116, s2.acc: 93.9209, s2.loss_bbox: 0.0432, loss: 1.3897
2021-10-04 00:57:00,145 - mmdet - INFO - Epoch [3][350/1221]	lr: 1.000e-03, eta: 0:31:18, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5607, loss_rpn_bbox: 0.4105, s0.loss_cls: 0.0609, s0.acc: 91.3682, s0.loss_bbox: 0.1453, s1.loss_cls: 0.0284, s1.acc: 92.2256, s1.loss_bbox: 0.1092, s2.loss_cls: 0.0120, s2.acc: 93.9993, s2.loss_bbox: 0.0447, loss: 1.3716
2021-10-04 00:57:28,734 - mmdet - INFO - Epoch [3][400/1221]	lr: 1.000e-03, eta: 0:30:50, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5710, loss_rpn_bbox: 0.3916, s0.loss_cls: 0.0654, s0.acc: 90.9961, s0.loss_bbox: 0.1524, s1.loss_cls: 0.0306, s1.acc: 91.6309, s1.loss_bbox: 0.1130, s2.loss_cls: 0.0128, s2.acc: 93.5176, s2.loss_bbox: 0.0480, loss: 1.3847
2021-10-04 00:57:57,143 - mmdet - INFO - Epoch [3][450/1221]	lr: 1.000e-03, eta: 0:30:22, time: 0.568, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5438, loss_rpn_bbox: 0.3784, s0.loss_cls: 0.0614, s0.acc: 91.0508, s0.loss_bbox: 0.1487, s1.loss_cls: 0.0286, s1.acc: 91.7843, s1.loss_bbox: 0.1121, s2.loss_cls: 0.0123, s2.acc: 93.5784, s2.loss_bbox: 0.0492, loss: 1.3344
2021-10-04 00:58:25,629 - mmdet - INFO - Epoch [3][500/1221]	lr: 1.000e-03, eta: 0:29:54, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5405, loss_rpn_bbox: 0.4014, s0.loss_cls: 0.0670, s0.acc: 90.4414, s0.loss_bbox: 0.1605, s1.loss_cls: 0.0307, s1.acc: 91.4951, s1.loss_bbox: 0.1165, s2.loss_cls: 0.0130, s2.acc: 93.3594, s2.loss_bbox: 0.0484, loss: 1.3779
2021-10-04 00:58:54,159 - mmdet - INFO - Epoch [3][550/1221]	lr: 1.000e-03, eta: 0:29:25, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5678, loss_rpn_bbox: 0.3726, s0.loss_cls: 0.0678, s0.acc: 90.5605, s0.loss_bbox: 0.1595, s1.loss_cls: 0.0311, s1.acc: 91.6051, s1.loss_bbox: 0.1159, s2.loss_cls: 0.0129, s2.acc: 93.5420, s2.loss_bbox: 0.0482, loss: 1.3758
2021-10-04 00:59:22,842 - mmdet - INFO - Epoch [3][600/1221]	lr: 1.000e-03, eta: 0:28:57, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5553, loss_rpn_bbox: 0.3672, s0.loss_cls: 0.0611, s0.acc: 91.1699, s0.loss_bbox: 0.1466, s1.loss_cls: 0.0282, s1.acc: 92.0330, s1.loss_bbox: 0.1050, s2.loss_cls: 0.0122, s2.acc: 93.6005, s2.loss_bbox: 0.0465, loss: 1.3221
2021-10-04 00:59:51,434 - mmdet - INFO - Epoch [3][650/1221]	lr: 1.000e-03, eta: 0:28:29, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5456, loss_rpn_bbox: 0.4149, s0.loss_cls: 0.0599, s0.acc: 91.3936, s0.loss_bbox: 0.1492, s1.loss_cls: 0.0272, s1.acc: 92.3564, s1.loss_bbox: 0.1032, s2.loss_cls: 0.0116, s2.acc: 93.9004, s2.loss_bbox: 0.0438, loss: 1.3555
2021-10-04 01:00:20,035 - mmdet - INFO - Epoch [3][700/1221]	lr: 1.000e-03, eta: 0:28:01, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5108, loss_rpn_bbox: 0.4149, s0.loss_cls: 0.0602, s0.acc: 91.2832, s0.loss_bbox: 0.1385, s1.loss_cls: 0.0276, s1.acc: 91.9382, s1.loss_bbox: 0.1051, s2.loss_cls: 0.0120, s2.acc: 93.5652, s2.loss_bbox: 0.0457, loss: 1.3148
2021-10-04 01:00:48,581 - mmdet - INFO - Epoch [3][750/1221]	lr: 1.000e-03, eta: 0:27:33, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5282, loss_rpn_bbox: 0.3793, s0.loss_cls: 0.0555, s0.acc: 91.7900, s0.loss_bbox: 0.1323, s1.loss_cls: 0.0254, s1.acc: 92.5347, s1.loss_bbox: 0.0965, s2.loss_cls: 0.0110, s2.acc: 93.9803, s2.loss_bbox: 0.0432, loss: 1.2713
2021-10-04 01:01:16,991 - mmdet - INFO - Epoch [3][800/1221]	lr: 1.000e-03, eta: 0:27:05, time: 0.568, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5108, loss_rpn_bbox: 0.4007, s0.loss_cls: 0.0603, s0.acc: 90.8652, s0.loss_bbox: 0.1462, s1.loss_cls: 0.0278, s1.acc: 91.5996, s1.loss_bbox: 0.1125, s2.loss_cls: 0.0122, s2.acc: 93.1855, s2.loss_bbox: 0.0502, loss: 1.3207
2021-10-04 01:01:45,494 - mmdet - INFO - Epoch [3][850/1221]	lr: 1.000e-03, eta: 0:26:36, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5360, loss_rpn_bbox: 0.3851, s0.loss_cls: 0.0613, s0.acc: 90.8633, s0.loss_bbox: 0.1500, s1.loss_cls: 0.0285, s1.acc: 91.4324, s1.loss_bbox: 0.1137, s2.loss_cls: 0.0123, s2.acc: 93.1641, s2.loss_bbox: 0.0501, loss: 1.3369
2021-10-04 01:02:14,091 - mmdet - INFO - Epoch [3][900/1221]	lr: 1.000e-03, eta: 0:26:08, time: 0.572, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5158, loss_rpn_bbox: 0.3836, s0.loss_cls: 0.0647, s0.acc: 90.1025, s0.loss_bbox: 0.1583, s1.loss_cls: 0.0307, s1.acc: 90.5650, s1.loss_bbox: 0.1202, s2.loss_cls: 0.0135, s2.acc: 92.2801, s2.loss_bbox: 0.0552, loss: 1.3419
2021-10-04 01:02:42,636 - mmdet - INFO - Epoch [3][950/1221]	lr: 1.000e-03, eta: 0:25:40, time: 0.571, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.5187, loss_rpn_bbox: 0.3901, s0.loss_cls: 0.0625, s0.acc: 90.4258, s0.loss_bbox: 0.1483, s1.loss_cls: 0.0300, s1.acc: 90.8590, s1.loss_bbox: 0.1185, s2.loss_cls: 0.0132, s2.acc: 92.4472, s2.loss_bbox: 0.0527, loss: 1.3340
2021-10-04 01:03:11,199 - mmdet - INFO - Epoch [3][1000/1221]	lr: 1.000e-03, eta: 0:25:12, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5366, loss_rpn_bbox: 0.4055, s0.loss_cls: 0.0610, s0.acc: 91.0762, s0.loss_bbox: 0.1390, s1.loss_cls: 0.0291, s1.acc: 91.4470, s1.loss_bbox: 0.1091, s2.loss_cls: 0.0125, s2.acc: 93.0641, s2.loss_bbox: 0.0468, loss: 1.3396
2021-10-04 01:03:39,943 - mmdet - INFO - Epoch [3][1050/1221]	lr: 1.000e-03, eta: 0:24:43, time: 0.575, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5331, loss_rpn_bbox: 0.3762, s0.loss_cls: 0.0594, s0.acc: 91.2051, s0.loss_bbox: 0.1364, s1.loss_cls: 0.0282, s1.acc: 91.6315, s1.loss_bbox: 0.1068, s2.loss_cls: 0.0120, s2.acc: 93.3144, s2.loss_bbox: 0.0468, loss: 1.2989
2021-10-04 01:04:08,601 - mmdet - INFO - Epoch [3][1100/1221]	lr: 1.000e-03, eta: 0:24:15, time: 0.573, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5324, loss_rpn_bbox: 0.3973, s0.loss_cls: 0.0690, s0.acc: 89.6426, s0.loss_bbox: 0.1663, s1.loss_cls: 0.0323, s1.acc: 90.3948, s1.loss_bbox: 0.1268, s2.loss_cls: 0.0141, s2.acc: 92.3126, s2.loss_bbox: 0.0557, loss: 1.3939
2021-10-04 01:04:37,091 - mmdet - INFO - Epoch [3][1150/1221]	lr: 1.000e-03, eta: 0:23:47, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4939, loss_rpn_bbox: 0.3390, s0.loss_cls: 0.0594, s0.acc: 90.7500, s0.loss_bbox: 0.1391, s1.loss_cls: 0.0281, s1.acc: 91.2071, s1.loss_bbox: 0.1126, s2.loss_cls: 0.0121, s2.acc: 92.7284, s2.loss_bbox: 0.0496, loss: 1.2339
2021-10-04 01:05:05,738 - mmdet - INFO - Epoch [3][1200/1221]	lr: 1.000e-03, eta: 0:23:19, time: 0.573, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.4857, loss_rpn_bbox: 0.3857, s0.loss_cls: 0.0657, s0.acc: 89.7695, s0.loss_bbox: 0.1521, s1.loss_cls: 0.0313, s1.acc: 90.3470, s1.loss_bbox: 0.1185, s2.loss_cls: 0.0140, s2.acc: 91.7311, s2.loss_bbox: 0.0562, loss: 1.3092
2021-10-04 01:05:17,719 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-10-04 01:11:09,686 - mmdet - INFO - Evaluating bbox...
2021-10-04 01:11:54,123 - mmdet - INFO - Exp name: final3.py
2021-10-04 01:11:54,124 - mmdet - INFO - Epoch(val) [3][4883]	bbox_mAP: 0.0300, bbox_mAP_50: 0.0620, bbox_mAP_75: 0.0250, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0040, bbox_mAP_l: 0.0370, bbox_mAP_copypaste: 0.030 0.062 0.025 0.000 0.004 0.037
2021-10-04 01:12:25,010 - mmdet - INFO - Epoch [4][50/1221]	lr: 1.000e-03, eta: 0:22:32, time: 0.616, data_time: 0.057, memory: 6669, loss_rpn_cls: 0.5108, loss_rpn_bbox: 0.3828, s0.loss_cls: 0.0562, s0.acc: 91.5273, s0.loss_bbox: 0.1260, s1.loss_cls: 0.0271, s1.acc: 91.7441, s1.loss_bbox: 0.1041, s2.loss_cls: 0.0123, s2.acc: 93.0068, s2.loss_bbox: 0.0486, loss: 1.2680
2021-10-04 01:12:53,543 - mmdet - INFO - Epoch [4][100/1221]	lr: 1.000e-03, eta: 0:22:04, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.5131, loss_rpn_bbox: 0.3452, s0.loss_cls: 0.0652, s0.acc: 90.4141, s0.loss_bbox: 0.1451, s1.loss_cls: 0.0308, s1.acc: 90.9829, s1.loss_bbox: 0.1126, s2.loss_cls: 0.0135, s2.acc: 92.3661, s2.loss_bbox: 0.0515, loss: 1.2771
2021-10-04 01:13:22,111 - mmdet - INFO - Epoch [4][150/1221]	lr: 1.000e-03, eta: 0:21:36, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4919, loss_rpn_bbox: 0.3500, s0.loss_cls: 0.0609, s0.acc: 90.3535, s0.loss_bbox: 0.1431, s1.loss_cls: 0.0296, s1.acc: 90.5673, s1.loss_bbox: 0.1173, s2.loss_cls: 0.0132, s2.acc: 92.0914, s2.loss_bbox: 0.0544, loss: 1.2605
2021-10-04 01:13:50,597 - mmdet - INFO - Epoch [4][200/1221]	lr: 1.000e-03, eta: 0:21:08, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4822, loss_rpn_bbox: 0.3344, s0.loss_cls: 0.0568, s0.acc: 91.3193, s0.loss_bbox: 0.1317, s1.loss_cls: 0.0270, s1.acc: 91.6957, s1.loss_bbox: 0.1021, s2.loss_cls: 0.0121, s2.acc: 93.0956, s2.loss_bbox: 0.0473, loss: 1.1936
2021-10-04 01:14:19,132 - mmdet - INFO - Epoch [4][250/1221]	lr: 1.000e-03, eta: 0:20:40, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4905, loss_rpn_bbox: 0.3725, s0.loss_cls: 0.0652, s0.acc: 89.8330, s0.loss_bbox: 0.1592, s1.loss_cls: 0.0311, s1.acc: 90.4833, s1.loss_bbox: 0.1252, s2.loss_cls: 0.0137, s2.acc: 91.9677, s2.loss_bbox: 0.0576, loss: 1.3151
2021-10-04 01:14:47,718 - mmdet - INFO - Epoch [4][300/1221]	lr: 1.000e-03, eta: 0:20:11, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4796, loss_rpn_bbox: 0.3774, s0.loss_cls: 0.0649, s0.acc: 89.9648, s0.loss_bbox: 0.1572, s1.loss_cls: 0.0309, s1.acc: 90.4550, s1.loss_bbox: 0.1172, s2.loss_cls: 0.0135, s2.acc: 92.0871, s2.loss_bbox: 0.0525, loss: 1.2932
2021-10-04 01:15:16,711 - mmdet - INFO - Epoch [4][350/1221]	lr: 1.000e-03, eta: 0:19:44, time: 0.580, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4983, loss_rpn_bbox: 0.3430, s0.loss_cls: 0.0622, s0.acc: 90.3018, s0.loss_bbox: 0.1476, s1.loss_cls: 0.0292, s1.acc: 90.9346, s1.loss_bbox: 0.1131, s2.loss_cls: 0.0130, s2.acc: 92.4902, s2.loss_bbox: 0.0512, loss: 1.2575
2021-10-04 01:15:45,407 - mmdet - INFO - Epoch [4][400/1221]	lr: 1.000e-03, eta: 0:19:15, time: 0.574, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4849, loss_rpn_bbox: 0.3389, s0.loss_cls: 0.0628, s0.acc: 90.1748, s0.loss_bbox: 0.1413, s1.loss_cls: 0.0298, s1.acc: 90.5829, s1.loss_bbox: 0.1141, s2.loss_cls: 0.0136, s2.acc: 91.9266, s2.loss_bbox: 0.0549, loss: 1.2403
2021-10-04 01:16:14,265 - mmdet - INFO - Epoch [4][450/1221]	lr: 1.000e-03, eta: 0:18:47, time: 0.577, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4824, loss_rpn_bbox: 0.3480, s0.loss_cls: 0.0603, s0.acc: 90.5820, s0.loss_bbox: 0.1416, s1.loss_cls: 0.0285, s1.acc: 91.0199, s1.loss_bbox: 0.1119, s2.loss_cls: 0.0129, s2.acc: 92.2986, s2.loss_bbox: 0.0515, loss: 1.2370
2021-10-04 01:16:42,706 - mmdet - INFO - Epoch [4][500/1221]	lr: 1.000e-03, eta: 0:18:19, time: 0.569, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4766, loss_rpn_bbox: 0.3750, s0.loss_cls: 0.0602, s0.acc: 90.6738, s0.loss_bbox: 0.1397, s1.loss_cls: 0.0287, s1.acc: 91.0350, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0128, s2.acc: 92.3827, s2.loss_bbox: 0.0518, loss: 1.2558
2021-10-04 01:17:11,231 - mmdet - INFO - Epoch [4][550/1221]	lr: 1.000e-03, eta: 0:17:51, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4789, loss_rpn_bbox: 0.3574, s0.loss_cls: 0.0601, s0.acc: 90.7949, s0.loss_bbox: 0.1362, s1.loss_cls: 0.0286, s1.acc: 91.1213, s1.loss_bbox: 0.1080, s2.loss_cls: 0.0129, s2.acc: 92.4039, s2.loss_bbox: 0.0508, loss: 1.2330
2021-10-04 01:17:39,633 - mmdet - INFO - Epoch [4][600/1221]	lr: 1.000e-03, eta: 0:17:23, time: 0.568, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4644, loss_rpn_bbox: 0.3542, s0.loss_cls: 0.0599, s0.acc: 90.7139, s0.loss_bbox: 0.1332, s1.loss_cls: 0.0286, s1.acc: 91.1762, s1.loss_bbox: 0.1068, s2.loss_cls: 0.0131, s2.acc: 92.2765, s2.loss_bbox: 0.0496, loss: 1.2098
2021-10-04 01:18:07,965 - mmdet - INFO - Epoch [4][650/1221]	lr: 1.000e-03, eta: 0:16:54, time: 0.567, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4884, loss_rpn_bbox: 0.3731, s0.loss_cls: 0.0567, s0.acc: 91.1416, s0.loss_bbox: 0.1234, s1.loss_cls: 0.0274, s1.acc: 91.3086, s1.loss_bbox: 0.1005, s2.loss_cls: 0.0124, s2.acc: 92.4415, s2.loss_bbox: 0.0479, loss: 1.2298
2021-10-04 01:18:36,576 - mmdet - INFO - Epoch [4][700/1221]	lr: 1.000e-03, eta: 0:16:26, time: 0.572, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4688, loss_rpn_bbox: 0.3551, s0.loss_cls: 0.0578, s0.acc: 90.9180, s0.loss_bbox: 0.1328, s1.loss_cls: 0.0280, s1.acc: 91.1328, s1.loss_bbox: 0.1053, s2.loss_cls: 0.0128, s2.acc: 92.2678, s2.loss_bbox: 0.0502, loss: 1.2107
2021-10-04 01:19:05,092 - mmdet - INFO - Epoch [4][750/1221]	lr: 1.000e-03, eta: 0:15:58, time: 0.570, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4594, loss_rpn_bbox: 0.3176, s0.loss_cls: 0.0580, s0.acc: 90.9541, s0.loss_bbox: 0.1329, s1.loss_cls: 0.0286, s1.acc: 91.0113, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0129, s2.acc: 92.2280, s2.loss_bbox: 0.0516, loss: 1.1701
2021-10-04 01:19:33,572 - mmdet - INFO - Epoch [4][800/1221]	lr: 1.000e-03, eta: 0:15:30, time: 0.570, data_time: 0.013, memory: 6669, loss_rpn_cls: 0.4646, loss_rpn_bbox: 0.3546, s0.loss_cls: 0.0606, s0.acc: 90.2266, s0.loss_bbox: 0.1451, s1.loss_cls: 0.0292, s1.acc: 90.5271, s1.loss_bbox: 0.1171, s2.loss_cls: 0.0131, s2.acc: 91.7698, s2.loss_bbox: 0.0549, loss: 1.2393
2021-10-04 01:20:02,105 - mmdet - INFO - Epoch [4][850/1221]	lr: 1.000e-03, eta: 0:15:01, time: 0.571, data_time: 0.012, memory: 6669, loss_rpn_cls: 0.4692, loss_rpn_bbox: 0.3223, s0.loss_cls: 0.0666, s0.acc: 89.6143, s0.loss_bbox: 0.1509, s1.loss_cls: 0.0321, s1.acc: 89.9327, s1.loss_bbox: 0.1206, s2.loss_cls: 0.0144, s2.acc: 91.3674, s2.loss_bbox: 0.0560, loss: 1.2322
2021-10-04 01:20:30,671 - mmdet - INFO - Epoch [4][900/1221]	lr: 1.000e-03, eta: 0:14:33, time: 0.571, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4604, loss_rpn_bbox: 0.2981, s0.loss_cls: 0.0590, s0.acc: 90.6240, s0.loss_bbox: 0.1313, s1.loss_cls: 0.0292, s1.acc: 90.6570, s1.loss_bbox: 0.1122, s2.loss_cls: 0.0136, s2.acc: 91.7007, s2.loss_bbox: 0.0555, loss: 1.1592
2021-10-04 01:20:59,196 - mmdet - INFO - Epoch [4][950/1221]	lr: 1.000e-03, eta: 0:14:05, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4642, loss_rpn_bbox: 0.3943, s0.loss_cls: 0.0592, s0.acc: 90.5859, s0.loss_bbox: 0.1404, s1.loss_cls: 0.0284, s1.acc: 90.7842, s1.loss_bbox: 0.1103, s2.loss_cls: 0.0130, s2.acc: 92.0217, s2.loss_bbox: 0.0508, loss: 1.2606
2021-10-04 01:21:27,855 - mmdet - INFO - Epoch [4][1000/1221]	lr: 1.000e-03, eta: 0:13:37, time: 0.573, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4644, loss_rpn_bbox: 0.3288, s0.loss_cls: 0.0594, s0.acc: 90.7178, s0.loss_bbox: 0.1344, s1.loss_cls: 0.0289, s1.acc: 90.8184, s1.loss_bbox: 0.1118, s2.loss_cls: 0.0131, s2.acc: 92.0264, s2.loss_bbox: 0.0516, loss: 1.1923
2021-10-04 01:21:56,655 - mmdet - INFO - Epoch [4][1050/1221]	lr: 1.000e-03, eta: 0:13:08, time: 0.576, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4810, loss_rpn_bbox: 0.3403, s0.loss_cls: 0.0601, s0.acc: 90.6982, s0.loss_bbox: 0.1307, s1.loss_cls: 0.0289, s1.acc: 90.8723, s1.loss_bbox: 0.1033, s2.loss_cls: 0.0133, s2.acc: 92.0962, s2.loss_bbox: 0.0520, loss: 1.2095
2021-10-04 01:22:25,307 - mmdet - INFO - Epoch [4][1100/1221]	lr: 1.000e-03, eta: 0:12:40, time: 0.573, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4810, loss_rpn_bbox: 0.3715, s0.loss_cls: 0.0539, s0.acc: 91.5850, s0.loss_bbox: 0.1228, s1.loss_cls: 0.0258, s1.acc: 91.8360, s1.loss_bbox: 0.0980, s2.loss_cls: 0.0117, s2.acc: 92.9119, s2.loss_bbox: 0.0446, loss: 1.2093
2021-10-04 01:22:53,998 - mmdet - INFO - Epoch [4][1150/1221]	lr: 1.000e-03, eta: 0:12:12, time: 0.574, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4487, loss_rpn_bbox: 0.3680, s0.loss_cls: 0.0587, s0.acc: 90.5137, s0.loss_bbox: 0.1366, s1.loss_cls: 0.0281, s1.acc: 90.8956, s1.loss_bbox: 0.1089, s2.loss_cls: 0.0130, s2.acc: 91.8141, s2.loss_bbox: 0.0519, loss: 1.2137
2021-10-04 01:23:22,791 - mmdet - INFO - Epoch [4][1200/1221]	lr: 1.000e-03, eta: 0:11:44, time: 0.576, data_time: 0.013, memory: 6670, loss_rpn_cls: 0.4360, loss_rpn_bbox: 0.3519, s0.loss_cls: 0.0590, s0.acc: 90.5039, s0.loss_bbox: 0.1357, s1.loss_cls: 0.0285, s1.acc: 90.6668, s1.loss_bbox: 0.1071, s2.loss_cls: 0.0133, s2.acc: 91.6534, s2.loss_bbox: 0.0525, loss: 1.1841
2021-10-04 01:23:34,812 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-10-04 01:29:24,061 - mmdet - INFO - Evaluating bbox...
2021-10-04 01:30:04,998 - mmdet - INFO - Exp name: final3.py
2021-10-04 01:30:04,999 - mmdet - INFO - Epoch(val) [4][4883]	bbox_mAP: 0.0510, bbox_mAP_50: 0.0890, bbox_mAP_75: 0.0500, bbox_mAP_s: 0.0040, bbox_mAP_m: 0.0110, bbox_mAP_l: 0.0610, bbox_mAP_copypaste: 0.051 0.089 0.050 0.004 0.011 0.061
2021-10-04 01:30:35,911 - mmdet - INFO - Epoch [5][50/1221]	lr: 1.000e-03, eta: 0:11:01, time: 0.616, data_time: 0.057, memory: 6670, loss_rpn_cls: 0.4394, loss_rpn_bbox: 0.3653, s0.loss_cls: 0.0671, s0.acc: 89.3086, s0.loss_bbox: 0.1582, s1.loss_cls: 0.0319, s1.acc: 89.7703, s1.loss_bbox: 0.1254, s2.loss_cls: 0.0144, s2.acc: 91.4315, s2.loss_bbox: 0.0575, loss: 1.2592
2021-10-04 01:31:04,436 - mmdet - INFO - Epoch [5][100/1221]	lr: 1.000e-03, eta: 0:10:33, time: 0.571, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4330, loss_rpn_bbox: 0.3234, s0.loss_cls: 0.0565, s0.acc: 91.1699, s0.loss_bbox: 0.1235, s1.loss_cls: 0.0274, s1.acc: 91.1526, s1.loss_bbox: 0.1053, s2.loss_cls: 0.0127, s2.acc: 92.0504, s2.loss_bbox: 0.0507, loss: 1.1325
2021-10-04 01:31:33,051 - mmdet - INFO - Epoch [5][150/1221]	lr: 1.000e-03, eta: 0:10:05, time: 0.572, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4422, loss_rpn_bbox: 0.3415, s0.loss_cls: 0.0610, s0.acc: 90.1973, s0.loss_bbox: 0.1350, s1.loss_cls: 0.0302, s1.acc: 90.1296, s1.loss_bbox: 0.1119, s2.loss_cls: 0.0141, s2.acc: 91.2361, s2.loss_bbox: 0.0549, loss: 1.1907
2021-10-04 01:32:01,507 - mmdet - INFO - Epoch [5][200/1221]	lr: 1.000e-03, eta: 0:09:37, time: 0.569, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4277, loss_rpn_bbox: 0.3191, s0.loss_cls: 0.0577, s0.acc: 90.7627, s0.loss_bbox: 0.1299, s1.loss_cls: 0.0278, s1.acc: 90.9826, s1.loss_bbox: 0.1064, s2.loss_cls: 0.0130, s2.acc: 91.7489, s2.loss_bbox: 0.0516, loss: 1.1331
2021-10-04 01:32:30,129 - mmdet - INFO - Epoch [5][250/1221]	lr: 1.000e-03, eta: 0:09:08, time: 0.572, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4481, loss_rpn_bbox: 0.3447, s0.loss_cls: 0.0576, s0.acc: 90.7881, s0.loss_bbox: 0.1265, s1.loss_cls: 0.0281, s1.acc: 90.8396, s1.loss_bbox: 0.1040, s2.loss_cls: 0.0129, s2.acc: 92.0806, s2.loss_bbox: 0.0498, loss: 1.1718
2021-10-04 01:32:58,572 - mmdet - INFO - Epoch [5][300/1221]	lr: 1.000e-03, eta: 0:08:40, time: 0.569, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4057, loss_rpn_bbox: 0.2848, s0.loss_cls: 0.0584, s0.acc: 90.5898, s0.loss_bbox: 0.1299, s1.loss_cls: 0.0285, s1.acc: 90.5124, s1.loss_bbox: 0.1108, s2.loss_cls: 0.0134, s2.acc: 91.3943, s2.loss_bbox: 0.0524, loss: 1.0838
2021-10-04 01:33:27,083 - mmdet - INFO - Epoch [5][350/1221]	lr: 1.000e-03, eta: 0:08:12, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4592, loss_rpn_bbox: 0.3312, s0.loss_cls: 0.0581, s0.acc: 90.8057, s0.loss_bbox: 0.1204, s1.loss_cls: 0.0285, s1.acc: 90.8154, s1.loss_bbox: 0.1015, s2.loss_cls: 0.0131, s2.acc: 91.8766, s2.loss_bbox: 0.0512, loss: 1.1632
2021-10-04 01:33:55,565 - mmdet - INFO - Epoch [5][400/1221]	lr: 1.000e-03, eta: 0:07:44, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4601, loss_rpn_bbox: 0.3422, s0.loss_cls: 0.0562, s0.acc: 91.2500, s0.loss_bbox: 0.1236, s1.loss_cls: 0.0270, s1.acc: 91.4670, s1.loss_bbox: 0.0993, s2.loss_cls: 0.0123, s2.acc: 92.5930, s2.loss_bbox: 0.0475, loss: 1.1683
2021-10-04 01:34:23,849 - mmdet - INFO - Epoch [5][450/1221]	lr: 1.000e-03, eta: 0:07:15, time: 0.566, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4213, loss_rpn_bbox: 0.3229, s0.loss_cls: 0.0588, s0.acc: 90.5488, s0.loss_bbox: 0.1283, s1.loss_cls: 0.0287, s1.acc: 90.5898, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0133, s2.acc: 91.6791, s2.loss_bbox: 0.0527, loss: 1.1350
2021-10-04 01:34:52,267 - mmdet - INFO - Epoch [5][500/1221]	lr: 1.000e-03, eta: 0:06:47, time: 0.568, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4095, loss_rpn_bbox: 0.3374, s0.loss_cls: 0.0586, s0.acc: 90.5742, s0.loss_bbox: 0.1303, s1.loss_cls: 0.0286, s1.acc: 90.5956, s1.loss_bbox: 0.1079, s2.loss_cls: 0.0132, s2.acc: 91.7708, s2.loss_bbox: 0.0519, loss: 1.1374
2021-10-04 01:35:20,608 - mmdet - INFO - Epoch [5][550/1221]	lr: 1.000e-03, eta: 0:06:19, time: 0.567, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4249, loss_rpn_bbox: 0.3326, s0.loss_cls: 0.0553, s0.acc: 91.1045, s0.loss_bbox: 0.1233, s1.loss_cls: 0.0274, s1.acc: 91.0857, s1.loss_bbox: 0.1025, s2.loss_cls: 0.0128, s2.acc: 91.8199, s2.loss_bbox: 0.0518, loss: 1.1305
2021-10-04 01:35:49,122 - mmdet - INFO - Epoch [5][600/1221]	lr: 1.000e-03, eta: 0:05:51, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4124, loss_rpn_bbox: 0.3268, s0.loss_cls: 0.0615, s0.acc: 89.9648, s0.loss_bbox: 0.1367, s1.loss_cls: 0.0302, s1.acc: 90.0732, s1.loss_bbox: 0.1141, s2.loss_cls: 0.0140, s2.acc: 91.0677, s2.loss_bbox: 0.0551, loss: 1.1507
2021-10-04 01:36:17,598 - mmdet - INFO - Epoch [5][650/1221]	lr: 1.000e-03, eta: 0:05:22, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4302, loss_rpn_bbox: 0.3109, s0.loss_cls: 0.0591, s0.acc: 90.5078, s0.loss_bbox: 0.1264, s1.loss_cls: 0.0290, s1.acc: 90.3260, s1.loss_bbox: 0.1047, s2.loss_cls: 0.0135, s2.acc: 91.3331, s2.loss_bbox: 0.0498, loss: 1.1237
2021-10-04 01:36:46,038 - mmdet - INFO - Epoch [5][700/1221]	lr: 1.000e-03, eta: 0:04:54, time: 0.569, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4594, loss_rpn_bbox: 0.3423, s0.loss_cls: 0.0585, s0.acc: 90.8389, s0.loss_bbox: 0.1279, s1.loss_cls: 0.0281, s1.acc: 91.0343, s1.loss_bbox: 0.1014, s2.loss_cls: 0.0128, s2.acc: 92.0393, s2.loss_bbox: 0.0484, loss: 1.1789
2021-10-04 01:37:14,450 - mmdet - INFO - Epoch [5][750/1221]	lr: 1.000e-03, eta: 0:04:26, time: 0.568, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4387, loss_rpn_bbox: 0.3240, s0.loss_cls: 0.0595, s0.acc: 90.4434, s0.loss_bbox: 0.1315, s1.loss_cls: 0.0291, s1.acc: 90.5159, s1.loss_bbox: 0.1078, s2.loss_cls: 0.0137, s2.acc: 91.2796, s2.loss_bbox: 0.0545, loss: 1.1589
2021-10-04 01:37:42,959 - mmdet - INFO - Epoch [5][800/1221]	lr: 1.000e-03, eta: 0:03:58, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4350, loss_rpn_bbox: 0.3442, s0.loss_cls: 0.0592, s0.acc: 90.5029, s0.loss_bbox: 0.1332, s1.loss_cls: 0.0285, s1.acc: 90.8137, s1.loss_bbox: 0.1038, s2.loss_cls: 0.0131, s2.acc: 91.7216, s2.loss_bbox: 0.0498, loss: 1.1668
2021-10-04 01:38:11,225 - mmdet - INFO - Epoch [5][850/1221]	lr: 1.000e-03, eta: 0:03:29, time: 0.565, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4286, loss_rpn_bbox: 0.3478, s0.loss_cls: 0.0569, s0.acc: 90.6924, s0.loss_bbox: 0.1262, s1.loss_cls: 0.0279, s1.acc: 90.8667, s1.loss_bbox: 0.1035, s2.loss_cls: 0.0128, s2.acc: 92.0586, s2.loss_bbox: 0.0502, loss: 1.1540
2021-10-04 01:38:39,654 - mmdet - INFO - Epoch [5][900/1221]	lr: 1.000e-03, eta: 0:03:01, time: 0.569, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4094, loss_rpn_bbox: 0.3049, s0.loss_cls: 0.0630, s0.acc: 89.5986, s0.loss_bbox: 0.1421, s1.loss_cls: 0.0309, s1.acc: 89.6263, s1.loss_bbox: 0.1178, s2.loss_cls: 0.0143, s2.acc: 90.7344, s2.loss_bbox: 0.0576, loss: 1.1401
2021-10-04 01:39:08,092 - mmdet - INFO - Epoch [5][950/1221]	lr: 1.000e-03, eta: 0:02:33, time: 0.569, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4265, loss_rpn_bbox: 0.3480, s0.loss_cls: 0.0626, s0.acc: 90.0566, s0.loss_bbox: 0.1387, s1.loss_cls: 0.0301, s1.acc: 90.2782, s1.loss_bbox: 0.1118, s2.loss_cls: 0.0137, s2.acc: 91.4317, s2.loss_bbox: 0.0523, loss: 1.1837
2021-10-04 01:39:36,609 - mmdet - INFO - Epoch [5][1000/1221]	lr: 1.000e-03, eta: 0:02:05, time: 0.570, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4096, loss_rpn_bbox: 0.2940, s0.loss_cls: 0.0593, s0.acc: 90.4717, s0.loss_bbox: 0.1313, s1.loss_cls: 0.0290, s1.acc: 90.5835, s1.loss_bbox: 0.1055, s2.loss_cls: 0.0134, s2.acc: 91.3925, s2.loss_bbox: 0.0518, loss: 1.0940
2021-10-04 01:40:05,228 - mmdet - INFO - Epoch [5][1050/1221]	lr: 1.000e-03, eta: 0:01:36, time: 0.572, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4065, loss_rpn_bbox: 0.3319, s0.loss_cls: 0.0613, s0.acc: 90.0439, s0.loss_bbox: 0.1377, s1.loss_cls: 0.0297, s1.acc: 90.1605, s1.loss_bbox: 0.1125, s2.loss_cls: 0.0138, s2.acc: 91.0031, s2.loss_bbox: 0.0557, loss: 1.1490
2021-10-04 01:40:33,761 - mmdet - INFO - Epoch [5][1100/1221]	lr: 1.000e-03, eta: 0:01:08, time: 0.571, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4595, loss_rpn_bbox: 0.2939, s0.loss_cls: 0.0595, s0.acc: 90.3896, s0.loss_bbox: 0.1360, s1.loss_cls: 0.0289, s1.acc: 90.6330, s1.loss_bbox: 0.1089, s2.loss_cls: 0.0133, s2.acc: 91.7442, s2.loss_bbox: 0.0510, loss: 1.1511
2021-10-04 01:41:02,094 - mmdet - INFO - Epoch [5][1150/1221]	lr: 1.000e-03, eta: 0:00:40, time: 0.567, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4458, loss_rpn_bbox: 0.3208, s0.loss_cls: 0.0548, s0.acc: 91.1328, s0.loss_bbox: 0.1169, s1.loss_cls: 0.0270, s1.acc: 91.1070, s1.loss_bbox: 0.1017, s2.loss_cls: 0.0126, s2.acc: 92.0469, s2.loss_bbox: 0.0483, loss: 1.1280
2021-10-04 01:41:30,476 - mmdet - INFO - Epoch [5][1200/1221]	lr: 1.000e-03, eta: 0:00:11, time: 0.568, data_time: 0.012, memory: 6670, loss_rpn_cls: 0.4216, loss_rpn_bbox: 0.3353, s0.loss_cls: 0.0581, s0.acc: 90.6279, s0.loss_bbox: 0.1309, s1.loss_cls: 0.0283, s1.acc: 90.6955, s1.loss_bbox: 0.1051, s2.loss_cls: 0.0131, s2.acc: 91.7428, s2.loss_bbox: 0.0495, loss: 1.1419
2021-10-04 01:41:42,354 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-10-04 01:47:35,023 - mmdet - INFO - Evaluating bbox...
2021-10-04 01:48:17,816 - mmdet - INFO - Exp name: final3.py
2021-10-04 01:48:17,816 - mmdet - INFO - Epoch(val) [5][4883]	bbox_mAP: 0.0630, bbox_mAP_50: 0.1060, bbox_mAP_75: 0.0630, bbox_mAP_s: 0.0050, bbox_mAP_m: 0.0120, bbox_mAP_l: 0.0770, bbox_mAP_copypaste: 0.063 0.106 0.063 0.005 0.012 0.077
