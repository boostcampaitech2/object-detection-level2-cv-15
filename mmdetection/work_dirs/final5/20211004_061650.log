2021-10-04 06:16:51,650 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+2577e37
------------------------------------------------------------

2021-10-04 06:16:52,022 - mmdet - INFO - Distributed training: False
2021-10-04 06:16:52,310 - mmdet - INFO - Config:
model = dict(
    type='RetinaNet',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),
        groups=32,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_input',
        num_outs=5),
    bbox_head=dict(
        type='RetinaHead',
        num_classes=10,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            octave_base_scale=4,
            scales_per_octave=3,
            ratios=[0.5, 0.7, 1.0, 2.0],
            strides=[8, 16, 32, 64, 128]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0,
            ignore_iof_thr=-1),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = '../dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../dataset/test.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/final5'
gpu_ids = range(0, 1)

2021-10-04 06:16:53,523 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_32x4d'}
2021-10-04 06:16:53,728 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-04 06:16:53,785 - mmdet - INFO - initialize RetinaHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01, 'override': {'type': 'Normal', 'name': 'retina_cls', 'std': 0.01, 'bias_prob': 0.01}}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.3.conv.weight - torch.Size([256, 2048, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.retina_cls.weight - torch.Size([120, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.retina_cls.bias - torch.Size([120]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.retina_reg.weight - torch.Size([48, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.retina_reg.bias - torch.Size([48]): 
NormalInit: mean=0, std=0.01, bias=0 
2021-10-04 06:16:56,988 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/final5
2021-10-04 06:16:56,988 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-10-04 06:16:56,988 - mmdet - INFO - workflow: [('train', 1)], max: 5 epochs
2021-10-04 06:17:45,663 - mmdet - INFO - Epoch [1][50/1221]	lr: 9.890e-05, eta: 1:38:13, time: 0.973, data_time: 0.056, memory: 11540, loss_cls: 1.1434, loss_bbox: 0.6685, loss: 1.8119
2021-10-04 06:18:31,520 - mmdet - INFO - Epoch [1][100/1221]	lr: 1.988e-04, eta: 1:34:36, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 1.1451, loss_bbox: 0.6621, loss: 1.8073
2021-10-04 06:19:17,401 - mmdet - INFO - Epoch [1][150/1221]	lr: 2.987e-04, eta: 1:32:54, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 1.1447, loss_bbox: 0.6727, loss: 1.8173
2021-10-04 06:20:03,289 - mmdet - INFO - Epoch [1][200/1221]	lr: 3.986e-04, eta: 1:31:40, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 1.1447, loss_bbox: 0.6607, loss: 1.8053
2021-10-04 06:20:49,195 - mmdet - INFO - Epoch [1][250/1221]	lr: 4.985e-04, eta: 1:30:38, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 1.1413, loss_bbox: 0.6537, loss: 1.7950
2021-10-04 06:21:35,123 - mmdet - INFO - Epoch [1][300/1221]	lr: 5.984e-04, eta: 1:29:41, time: 0.919, data_time: 0.010, memory: 11621, loss_cls: 1.1457, loss_bbox: 0.6422, loss: 1.7879
2021-10-04 06:22:21,076 - mmdet - INFO - Epoch [1][350/1221]	lr: 6.983e-04, eta: 1:28:48, time: 0.919, data_time: 0.010, memory: 11621, loss_cls: 1.1454, loss_bbox: 0.6420, loss: 1.7875
2021-10-04 06:23:06,925 - mmdet - INFO - Epoch [1][400/1221]	lr: 7.982e-04, eta: 1:27:56, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 1.1399, loss_bbox: 0.6637, loss: 1.8035
2021-10-04 06:23:52,751 - mmdet - INFO - Epoch [1][450/1221]	lr: 8.981e-04, eta: 1:27:04, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 1.1403, loss_bbox: 0.6396, loss: 1.7799
2021-10-04 06:24:38,643 - mmdet - INFO - Epoch [1][500/1221]	lr: 9.980e-04, eta: 1:26:15, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 1.1277, loss_bbox: 0.6272, loss: 1.7550
2021-10-04 06:25:24,491 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.000e-03, eta: 1:25:25, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 0.9619, loss_bbox: 0.6229, loss: 1.5847
2021-10-04 06:26:10,348 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.000e-03, eta: 1:24:36, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 0.8395, loss_bbox: 0.6240, loss: 1.4635
2021-10-04 06:26:56,197 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.000e-03, eta: 1:23:48, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 0.9094, loss_bbox: 0.6172, loss: 1.5266
2021-10-04 06:27:42,159 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.000e-03, eta: 1:23:01, time: 0.919, data_time: 0.010, memory: 11621, loss_cls: 0.7075, loss_bbox: 0.5947, loss: 1.3022
2021-10-04 06:28:27,973 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.000e-03, eta: 1:22:13, time: 0.916, data_time: 0.010, memory: 11621, loss_cls: 0.7038, loss_bbox: 0.5955, loss: 1.2993
2021-10-04 06:29:13,874 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.000e-03, eta: 1:21:26, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 0.7024, loss_bbox: 0.5906, loss: 1.2931
2021-10-04 06:29:59,698 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.000e-03, eta: 1:20:38, time: 0.916, data_time: 0.010, memory: 11621, loss_cls: 0.6598, loss_bbox: 0.5699, loss: 1.2298
2021-10-04 06:30:45,592 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.000e-03, eta: 1:19:52, time: 0.918, data_time: 0.010, memory: 11621, loss_cls: 0.6764, loss_bbox: 0.5570, loss: 1.2334
2021-10-04 06:31:31,396 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.000e-03, eta: 1:19:04, time: 0.916, data_time: 0.010, memory: 11621, loss_cls: 0.6658, loss_bbox: 0.5440, loss: 1.2098
2021-10-04 06:32:17,223 - mmdet - INFO - Exp name: final5.py
2021-10-04 06:32:17,224 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.000e-03, eta: 1:18:17, time: 0.917, data_time: 0.010, memory: 11621, loss_cls: 0.7010, loss_bbox: 0.5624, loss: 1.2634
2021-10-04 06:33:03,056 - mmdet - INFO - Epoch [1][1050/1221]	lr: 1.000e-03, eta: 1:17:30, time: 0.917, data_time: 0.011, memory: 11621, loss_cls: 0.7392, loss_bbox: 0.5641, loss: 1.3033
2021-10-04 06:33:48,858 - mmdet - INFO - Epoch [1][1100/1221]	lr: 1.000e-03, eta: 1:16:43, time: 0.916, data_time: 0.011, memory: 11621, loss_cls: 0.6321, loss_bbox: 0.5170, loss: 1.1492
2021-10-04 06:34:34,694 - mmdet - INFO - Epoch [1][1150/1221]	lr: 1.000e-03, eta: 1:15:57, time: 0.917, data_time: 0.011, memory: 11782, loss_cls: 0.6526, loss_bbox: 0.5333, loss: 1.1859
2021-10-04 06:35:20,536 - mmdet - INFO - Epoch [1][1200/1221]	lr: 1.000e-03, eta: 1:15:10, time: 0.917, data_time: 0.011, memory: 11782, loss_cls: 0.7156, loss_bbox: 0.5328, loss: 1.2484
2021-10-04 06:35:39,859 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-04 06:43:46,720 - mmdet - INFO - Evaluating bbox...
2021-10-04 06:44:11,130 - mmdet - INFO - Exp name: final5.py
2021-10-04 06:44:11,130 - mmdet - INFO - Epoch(val) [1][4883]	bbox_mAP: 0.0090, bbox_mAP_50: 0.0230, bbox_mAP_75: 0.0050, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0040, bbox_mAP_l: 0.0110, bbox_mAP_copypaste: 0.009 0.023 0.005 0.000 0.004 0.011
2021-10-04 06:44:59,189 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.000e-03, eta: 1:12:59, time: 0.961, data_time: 0.056, memory: 11782, loss_cls: 0.7114, loss_bbox: 0.5177, loss: 1.2291
2021-10-04 06:45:45,074 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.000e-03, eta: 1:12:16, time: 0.918, data_time: 0.011, memory: 11782, loss_cls: 0.6048, loss_bbox: 0.5075, loss: 1.1122
