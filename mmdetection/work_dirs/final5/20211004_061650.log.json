{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.15.1+2577e37", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),\n        groups=32,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 0.7, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../dataset/train.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../dataset/train.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../dataset/test.json',\n        img_prefix='../dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/final5'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "final5.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0001, "memory": 11540, "data_time": 0.05563, "loss_cls": 1.14337, "loss_bbox": 0.66854, "loss": 1.81191, "time": 0.97336}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0002, "memory": 11621, "data_time": 0.00977, "loss_cls": 1.14515, "loss_bbox": 0.66212, "loss": 1.80727, "time": 0.91714}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0003, "memory": 11621, "data_time": 0.00974, "loss_cls": 1.14466, "loss_bbox": 0.67265, "loss": 1.81732, "time": 0.91762}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0004, "memory": 11621, "data_time": 0.00987, "loss_cls": 1.14467, "loss_bbox": 0.66067, "loss": 1.80534, "time": 0.91776}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0005, "memory": 11621, "data_time": 0.0098, "loss_cls": 1.14125, "loss_bbox": 0.65374, "loss": 1.795, "time": 0.9181}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0006, "memory": 11621, "data_time": 0.00978, "loss_cls": 1.14566, "loss_bbox": 0.64224, "loss": 1.7879, "time": 0.91856}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0007, "memory": 11621, "data_time": 0.00985, "loss_cls": 1.14545, "loss_bbox": 0.64202, "loss": 1.78747, "time": 0.91904}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0008, "memory": 11621, "data_time": 0.00987, "loss_cls": 1.13986, "loss_bbox": 0.66367, "loss": 1.80354, "time": 0.91699}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0009, "memory": 11621, "data_time": 0.00986, "loss_cls": 1.14032, "loss_bbox": 0.63958, "loss": 1.7799, "time": 0.9165}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 11621, "data_time": 0.01035, "loss_cls": 1.12772, "loss_bbox": 0.62725, "loss": 1.75497, "time": 0.91781}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 11621, "data_time": 0.01006, "loss_cls": 0.96187, "loss_bbox": 0.62288, "loss": 1.58475, "time": 0.91695}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 11621, "data_time": 0.01004, "loss_cls": 0.83948, "loss_bbox": 0.62398, "loss": 1.46346, "time": 0.91714}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 11621, "data_time": 0.01006, "loss_cls": 0.90937, "loss_bbox": 0.61721, "loss": 1.52658, "time": 0.91697}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 11621, "data_time": 0.01019, "loss_cls": 0.70752, "loss_bbox": 0.59471, "loss": 1.30223, "time": 0.91924}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 11621, "data_time": 0.0101, "loss_cls": 0.70378, "loss_bbox": 0.59552, "loss": 1.29929, "time": 0.91627}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 11621, "data_time": 0.01017, "loss_cls": 0.70245, "loss_bbox": 0.59063, "loss": 1.29308, "time": 0.91801}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 11621, "data_time": 0.01033, "loss_cls": 0.65984, "loss_bbox": 0.56993, "loss": 1.22977, "time": 0.91647}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 11621, "data_time": 0.01025, "loss_cls": 0.67638, "loss_bbox": 0.55702, "loss": 1.2334, "time": 0.91786}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 11621, "data_time": 0.01011, "loss_cls": 0.66577, "loss_bbox": 0.544, "loss": 1.20977, "time": 0.91609}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 11621, "data_time": 0.01026, "loss_cls": 0.701, "loss_bbox": 0.56237, "loss": 1.26337, "time": 0.91653}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 11621, "data_time": 0.01057, "loss_cls": 0.73918, "loss_bbox": 0.56407, "loss": 1.30326, "time": 0.91665}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 11621, "data_time": 0.01056, "loss_cls": 0.63212, "loss_bbox": 0.51705, "loss": 1.14916, "time": 0.91603}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 11782, "data_time": 0.01058, "loss_cls": 0.65258, "loss_bbox": 0.53332, "loss": 1.18589, "time": 0.9167}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 11782, "data_time": 0.01055, "loss_cls": 0.71561, "loss_bbox": 0.53281, "loss": 1.24842, "time": 0.91685}
{"mode": "val", "epoch": 1, "iter": 4883, "lr": 0.001, "bbox_mAP": 0.009, "bbox_mAP_50": 0.023, "bbox_mAP_75": 0.005, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.011, "bbox_mAP_copypaste": "0.009 0.023 0.005 0.000 0.004 0.011"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.001, "memory": 11782, "data_time": 0.05611, "loss_cls": 0.71141, "loss_bbox": 0.51768, "loss": 1.22909, "time": 0.96092}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.001, "memory": 11782, "data_time": 0.01066, "loss_cls": 0.60475, "loss_bbox": 0.50745, "loss": 1.11221, "time": 0.91768}
