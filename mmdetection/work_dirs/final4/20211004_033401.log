2021-10-04 03:34:02,473 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+2577e37
------------------------------------------------------------

2021-10-04 03:34:02,981 - mmdet - INFO - Distributed training: False
2021-10-04 03:34:03,560 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),
        groups=32,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 0.7, 1.0, 1.5, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '../dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../dataset/test.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/final4'
gpu_ids = range(0, 1)

2021-10-04 03:34:04,861 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_32x4d'}
2021-10-04 03:34:05,059 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-04 03:34:05,085 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-04 03:34:05,094 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-04 03:34:05,410 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-04 03:34:05,728 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([5, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([20, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([20]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-04 03:34:09,170 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/final4
2021-10-04 03:34:09,170 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-10-04 03:34:09,170 - mmdet - INFO - workflow: [('train', 1)], max: 5 epochs
2021-10-04 03:35:08,804 - mmdet - INFO - Epoch [1][50/1221]	lr: 9.890e-05, eta: 2:00:20, time: 1.193, data_time: 0.056, memory: 12629, loss_rpn_cls: 0.6906, loss_rpn_bbox: 0.0530, s0.loss_cls: 1.1764, s0.acc: 71.5625, s0.loss_bbox: 0.0501, s1.loss_cls: 0.5692, s1.acc: 69.2979, s1.loss_bbox: 0.0163, s2.loss_cls: 0.4522, s2.acc: 46.3574, s2.loss_bbox: 0.0026, loss: 3.0105
2021-10-04 03:36:06,730 - mmdet - INFO - Epoch [1][100/1221]	lr: 1.988e-04, eta: 1:57:38, time: 1.159, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.5933, loss_rpn_bbox: 0.0473, s0.loss_cls: 0.2512, s0.acc: 96.0303, s0.loss_bbox: 0.0920, s1.loss_cls: 0.0764, s1.acc: 98.0859, s1.loss_bbox: 0.0291, s2.loss_cls: 0.0338, s2.acc: 98.2236, s2.loss_bbox: 0.0054, loss: 1.1285
2021-10-04 03:37:04,565 - mmdet - INFO - Epoch [1][150/1221]	lr: 2.987e-04, eta: 1:56:02, time: 1.157, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.2261, loss_rpn_bbox: 0.0388, s0.loss_cls: 0.3303, s0.acc: 93.6719, s0.loss_bbox: 0.1517, s1.loss_cls: 0.1079, s1.acc: 96.7559, s1.loss_bbox: 0.0589, s2.loss_cls: 0.0308, s2.acc: 98.4736, s2.loss_bbox: 0.0112, loss: 0.9557
2021-10-04 03:38:02,283 - mmdet - INFO - Epoch [1][200/1221]	lr: 3.986e-04, eta: 1:54:42, time: 1.154, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1532, loss_rpn_bbox: 0.0481, s0.loss_cls: 0.3366, s0.acc: 92.8213, s0.loss_bbox: 0.1612, s1.loss_cls: 0.1168, s1.acc: 95.7021, s1.loss_bbox: 0.0747, s2.loss_cls: 0.0373, s2.acc: 97.7764, s2.loss_bbox: 0.0165, loss: 0.9444
2021-10-04 03:38:59,894 - mmdet - INFO - Epoch [1][250/1221]	lr: 4.985e-04, eta: 1:53:28, time: 1.152, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1353, loss_rpn_bbox: 0.0444, s0.loss_cls: 0.2868, s0.acc: 93.8730, s0.loss_bbox: 0.1347, s1.loss_cls: 0.0959, s1.acc: 96.4062, s1.loss_bbox: 0.0577, s2.loss_cls: 0.0310, s2.acc: 98.0820, s2.loss_bbox: 0.0121, loss: 0.7980
2021-10-04 03:39:57,392 - mmdet - INFO - Epoch [1][300/1221]	lr: 5.984e-04, eta: 1:52:17, time: 1.150, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1257, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.2621, s0.acc: 94.3662, s0.loss_bbox: 0.1227, s1.loss_cls: 0.0925, s1.acc: 96.4834, s1.loss_bbox: 0.0564, s2.loss_cls: 0.0304, s2.acc: 98.0244, s2.loss_bbox: 0.0134, loss: 0.7417
2021-10-04 03:40:55,001 - mmdet - INFO - Epoch [1][350/1221]	lr: 6.983e-04, eta: 1:51:12, time: 1.152, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1408, loss_rpn_bbox: 0.0448, s0.loss_cls: 0.2927, s0.acc: 93.4736, s0.loss_bbox: 0.1413, s1.loss_cls: 0.1020, s1.acc: 95.8525, s1.loss_bbox: 0.0655, s2.loss_cls: 0.0344, s2.acc: 97.6562, s2.loss_bbox: 0.0156, loss: 0.8369
2021-10-04 03:41:52,464 - mmdet - INFO - Epoch [1][400/1221]	lr: 7.982e-04, eta: 1:50:07, time: 1.149, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1204, loss_rpn_bbox: 0.0435, s0.loss_cls: 0.2834, s0.acc: 93.3311, s0.loss_bbox: 0.1366, s1.loss_cls: 0.1127, s1.acc: 94.9629, s1.loss_bbox: 0.0823, s2.loss_cls: 0.0407, s2.acc: 96.9609, s2.loss_bbox: 0.0240, loss: 0.8436
2021-10-04 03:42:50,009 - mmdet - INFO - Epoch [1][450/1221]	lr: 8.981e-04, eta: 1:49:05, time: 1.151, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1104, loss_rpn_bbox: 0.0400, s0.loss_cls: 0.3111, s0.acc: 93.1035, s0.loss_bbox: 0.1451, s1.loss_cls: 0.1187, s1.acc: 94.9014, s1.loss_bbox: 0.0830, s2.loss_cls: 0.0436, s2.acc: 96.7988, s2.loss_bbox: 0.0263, loss: 0.8781
2021-10-04 03:43:47,720 - mmdet - INFO - Epoch [1][500/1221]	lr: 9.980e-04, eta: 1:48:05, time: 1.154, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1001, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.2916, s0.acc: 92.8428, s0.loss_bbox: 0.1425, s1.loss_cls: 0.1233, s1.acc: 94.1621, s1.loss_bbox: 0.0908, s2.loss_cls: 0.0479, s2.acc: 95.9404, s2.loss_bbox: 0.0337, loss: 0.8682
2021-10-04 03:44:45,253 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.000e-03, eta: 1:47:04, time: 1.151, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1162, loss_rpn_bbox: 0.0519, s0.loss_cls: 0.3689, s0.acc: 90.8096, s0.loss_bbox: 0.1870, s1.loss_cls: 0.1526, s1.acc: 92.5186, s1.loss_bbox: 0.1148, s2.loss_cls: 0.0613, s2.acc: 94.5781, s2.loss_bbox: 0.0450, loss: 1.0977
2021-10-04 03:45:42,755 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.000e-03, eta: 1:46:03, time: 1.150, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.1103, loss_rpn_bbox: 0.0423, s0.loss_cls: 0.3412, s0.acc: 91.4189, s0.loss_bbox: 0.1770, s1.loss_cls: 0.1460, s1.acc: 92.6201, s1.loss_bbox: 0.1165, s2.loss_cls: 0.0621, s2.acc: 93.8330, s2.loss_bbox: 0.0496, loss: 1.0451
2021-10-04 03:46:40,311 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.000e-03, eta: 1:45:03, time: 1.151, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0875, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.3416, s0.acc: 91.2969, s0.loss_bbox: 0.1709, s1.loss_cls: 0.1516, s1.acc: 92.2143, s1.loss_bbox: 0.1222, s2.loss_cls: 0.0641, s2.acc: 93.7949, s2.loss_bbox: 0.0511, loss: 1.0244
2021-10-04 03:47:37,963 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.000e-03, eta: 1:44:04, time: 1.153, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0751, loss_rpn_bbox: 0.0374, s0.loss_cls: 0.3240, s0.acc: 91.5801, s0.loss_bbox: 0.1530, s1.loss_cls: 0.1468, s1.acc: 92.3115, s1.loss_bbox: 0.1141, s2.loss_cls: 0.0629, s2.acc: 93.6367, s2.loss_bbox: 0.0516, loss: 0.9650
2021-10-04 03:48:35,516 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.000e-03, eta: 1:43:05, time: 1.151, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0890, loss_rpn_bbox: 0.0506, s0.loss_cls: 0.3733, s0.acc: 90.3262, s0.loss_bbox: 0.1884, s1.loss_cls: 0.1635, s1.acc: 91.4118, s1.loss_bbox: 0.1338, s2.loss_cls: 0.0685, s2.acc: 92.9402, s2.loss_bbox: 0.0576, loss: 1.1247
2021-10-04 03:49:33,213 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.000e-03, eta: 1:42:07, time: 1.154, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0834, loss_rpn_bbox: 0.0484, s0.loss_cls: 0.3412, s0.acc: 91.0283, s0.loss_bbox: 0.1660, s1.loss_cls: 0.1535, s1.acc: 91.9385, s1.loss_bbox: 0.1215, s2.loss_cls: 0.0655, s2.acc: 93.2373, s2.loss_bbox: 0.0536, loss: 1.0331
2021-10-04 03:50:30,945 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.000e-03, eta: 1:41:09, time: 1.155, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0933, loss_rpn_bbox: 0.0487, s0.loss_cls: 0.3526, s0.acc: 90.8877, s0.loss_bbox: 0.1686, s1.loss_cls: 0.1604, s1.acc: 91.6230, s1.loss_bbox: 0.1266, s2.loss_cls: 0.0684, s2.acc: 92.9277, s2.loss_bbox: 0.0545, loss: 1.0731
2021-10-04 03:51:28,671 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.000e-03, eta: 1:40:11, time: 1.155, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0735, loss_rpn_bbox: 0.0416, s0.loss_cls: 0.3128, s0.acc: 91.7275, s0.loss_bbox: 0.1468, s1.loss_cls: 0.1472, s1.acc: 92.3262, s1.loss_bbox: 0.1109, s2.loss_cls: 0.0633, s2.acc: 93.6036, s2.loss_bbox: 0.0516, loss: 0.9477
2021-10-04 03:52:26,073 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.000e-03, eta: 1:39:12, time: 1.148, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0699, loss_rpn_bbox: 0.0455, s0.loss_cls: 0.3369, s0.acc: 91.4248, s0.loss_bbox: 0.1605, s1.loss_cls: 0.1479, s1.acc: 92.4030, s1.loss_bbox: 0.1149, s2.loss_cls: 0.0625, s2.acc: 93.4157, s2.loss_bbox: 0.0508, loss: 0.9888
2021-10-04 03:53:23,734 - mmdet - INFO - Exp name: final4.py
2021-10-04 03:53:23,734 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.000e-03, eta: 1:38:13, time: 1.153, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0710, loss_rpn_bbox: 0.0433, s0.loss_cls: 0.3391, s0.acc: 91.1621, s0.loss_bbox: 0.1611, s1.loss_cls: 0.1564, s1.acc: 91.6240, s1.loss_bbox: 0.1254, s2.loss_cls: 0.0693, s2.acc: 92.8164, s2.loss_bbox: 0.0586, loss: 1.0242
2021-10-04 03:54:21,640 - mmdet - INFO - Epoch [1][1050/1221]	lr: 1.000e-03, eta: 1:37:17, time: 1.158, data_time: 0.012, memory: 12629, loss_rpn_cls: 0.0676, loss_rpn_bbox: 0.0463, s0.loss_cls: 0.3173, s0.acc: 91.4600, s0.loss_bbox: 0.1581, s1.loss_cls: 0.1477, s1.acc: 91.9295, s1.loss_bbox: 0.1185, s2.loss_cls: 0.0645, s2.acc: 92.9580, s2.loss_bbox: 0.0529, loss: 0.9731
2021-10-04 03:55:19,402 - mmdet - INFO - Epoch [1][1100/1221]	lr: 1.000e-03, eta: 1:36:19, time: 1.155, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0662, loss_rpn_bbox: 0.0449, s0.loss_cls: 0.3312, s0.acc: 91.1797, s0.loss_bbox: 0.1528, s1.loss_cls: 0.1559, s1.acc: 91.6977, s1.loss_bbox: 0.1191, s2.loss_cls: 0.0674, s2.acc: 92.8796, s2.loss_bbox: 0.0547, loss: 0.9922
2021-10-04 03:56:17,142 - mmdet - INFO - Epoch [1][1150/1221]	lr: 1.000e-03, eta: 1:35:21, time: 1.155, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0649, loss_rpn_bbox: 0.0391, s0.loss_cls: 0.2918, s0.acc: 92.2891, s0.loss_bbox: 0.1392, s1.loss_cls: 0.1396, s1.acc: 92.5223, s1.loss_bbox: 0.1174, s2.loss_cls: 0.0629, s2.acc: 93.2480, s2.loss_bbox: 0.0572, loss: 0.9121
2021-10-04 03:57:14,809 - mmdet - INFO - Epoch [1][1200/1221]	lr: 1.000e-03, eta: 1:34:23, time: 1.153, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0630, loss_rpn_bbox: 0.0372, s0.loss_cls: 0.2980, s0.acc: 91.9453, s0.loss_bbox: 0.1420, s1.loss_cls: 0.1424, s1.acc: 92.2986, s1.loss_bbox: 0.1099, s2.loss_cls: 0.0634, s2.acc: 93.1748, s2.loss_bbox: 0.0504, loss: 0.9062
2021-10-04 03:57:39,082 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-04 04:06:21,573 - mmdet - INFO - Evaluating bbox...
2021-10-04 04:06:39,436 - mmdet - INFO - Exp name: final4.py
2021-10-04 04:06:39,440 - mmdet - INFO - Epoch(val) [1][4883]	bbox_mAP: 0.0900, bbox_mAP_50: 0.1560, bbox_mAP_75: 0.0920, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0050, bbox_mAP_l: 0.1140, bbox_mAP_copypaste: 0.090 0.156 0.092 0.000 0.005 0.114
2021-10-04 04:07:39,390 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.000e-03, eta: 1:31:37, time: 1.199, data_time: 0.056, memory: 12629, loss_rpn_cls: 0.0595, loss_rpn_bbox: 0.0437, s0.loss_cls: 0.3188, s0.acc: 91.2217, s0.loss_bbox: 0.1539, s1.loss_cls: 0.1519, s1.acc: 91.7485, s1.loss_bbox: 0.1254, s2.loss_cls: 0.0695, s2.acc: 92.3971, s2.loss_bbox: 0.0602, loss: 0.9829
2021-10-04 04:08:37,085 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.000e-03, eta: 1:30:44, time: 1.154, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0494, loss_rpn_bbox: 0.0323, s0.loss_cls: 0.2829, s0.acc: 91.8398, s0.loss_bbox: 0.1348, s1.loss_cls: 0.1438, s1.acc: 91.7321, s1.loss_bbox: 0.1208, s2.loss_cls: 0.0650, s2.acc: 92.6345, s2.loss_bbox: 0.0589, loss: 0.8879
2021-10-04 04:09:34,825 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.000e-03, eta: 1:29:50, time: 1.155, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0645, loss_rpn_bbox: 0.0461, s0.loss_cls: 0.3498, s0.acc: 90.8232, s0.loss_bbox: 0.1602, s1.loss_cls: 0.1669, s1.acc: 91.1899, s1.loss_bbox: 0.1305, s2.loss_cls: 0.0754, s2.acc: 91.5576, s2.loss_bbox: 0.0649, loss: 1.0583
2021-10-04 04:10:32,284 - mmdet - INFO - Epoch [2][200/1221]	lr: 1.000e-03, eta: 1:28:54, time: 1.149, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0689, loss_rpn_bbox: 0.0379, s0.loss_cls: 0.3377, s0.acc: 90.5684, s0.loss_bbox: 0.1594, s1.loss_cls: 0.1578, s1.acc: 90.9096, s1.loss_bbox: 0.1351, s2.loss_cls: 0.0723, s2.acc: 91.6942, s2.loss_bbox: 0.0679, loss: 1.0369
2021-10-04 04:11:30,062 - mmdet - INFO - Epoch [2][250/1221]	lr: 1.000e-03, eta: 1:28:00, time: 1.156, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0553, loss_rpn_bbox: 0.0411, s0.loss_cls: 0.3106, s0.acc: 91.8359, s0.loss_bbox: 0.1389, s1.loss_cls: 0.1480, s1.acc: 92.0100, s1.loss_bbox: 0.1153, s2.loss_cls: 0.0676, s2.acc: 92.6793, s2.loss_bbox: 0.0586, loss: 0.9355
2021-10-04 04:12:27,484 - mmdet - INFO - Epoch [2][300/1221]	lr: 1.000e-03, eta: 1:27:04, time: 1.148, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0510, loss_rpn_bbox: 0.0367, s0.loss_cls: 0.3113, s0.acc: 91.3936, s0.loss_bbox: 0.1459, s1.loss_cls: 0.1534, s1.acc: 91.3973, s1.loss_bbox: 0.1186, s2.loss_cls: 0.0695, s2.acc: 92.2889, s2.loss_bbox: 0.0590, loss: 0.9453
2021-10-04 04:13:25,420 - mmdet - INFO - Epoch [2][350/1221]	lr: 1.000e-03, eta: 1:26:10, time: 1.159, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0598, loss_rpn_bbox: 0.0476, s0.loss_cls: 0.3292, s0.acc: 91.0176, s0.loss_bbox: 0.1560, s1.loss_cls: 0.1638, s1.acc: 90.7757, s1.loss_bbox: 0.1294, s2.loss_cls: 0.0726, s2.acc: 91.9085, s2.loss_bbox: 0.0612, loss: 1.0197
2021-10-04 04:14:23,155 - mmdet - INFO - Epoch [2][400/1221]	lr: 1.000e-03, eta: 1:25:15, time: 1.155, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0601, loss_rpn_bbox: 0.0426, s0.loss_cls: 0.3262, s0.acc: 90.8672, s0.loss_bbox: 0.1477, s1.loss_cls: 0.1573, s1.acc: 90.9646, s1.loss_bbox: 0.1220, s2.loss_cls: 0.0732, s2.acc: 91.5880, s2.loss_bbox: 0.0620, loss: 0.9910
2021-10-04 04:15:20,854 - mmdet - INFO - Epoch [2][450/1221]	lr: 1.000e-03, eta: 1:24:20, time: 1.154, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0496, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.3008, s0.acc: 91.4707, s0.loss_bbox: 0.1407, s1.loss_cls: 0.1519, s1.acc: 91.3356, s1.loss_bbox: 0.1256, s2.loss_cls: 0.0713, s2.acc: 91.8205, s2.loss_bbox: 0.0653, loss: 0.9383
2021-10-04 04:16:18,711 - mmdet - INFO - Epoch [2][500/1221]	lr: 1.000e-03, eta: 1:23:25, time: 1.157, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0559, loss_rpn_bbox: 0.0431, s0.loss_cls: 0.3047, s0.acc: 91.4492, s0.loss_bbox: 0.1462, s1.loss_cls: 0.1503, s1.acc: 91.3595, s1.loss_bbox: 0.1245, s2.loss_cls: 0.0692, s2.acc: 92.1959, s2.loss_bbox: 0.0603, loss: 0.9542
2021-10-04 04:17:16,605 - mmdet - INFO - Epoch [2][550/1221]	lr: 1.000e-03, eta: 1:22:30, time: 1.158, data_time: 0.011, memory: 12629, loss_rpn_cls: 0.0539, loss_rpn_bbox: 0.0421, s0.loss_cls: 0.2770, s0.acc: 92.2705, s0.loss_bbox: 0.1298, s1.loss_cls: 0.1397, s1.acc: 92.1282, s1.loss_bbox: 0.1141, s2.loss_cls: 0.0660, s2.acc: 92.5017, s2.loss_bbox: 0.0564, loss: 0.8790
2021-10-04 04:18:14,238 - mmdet - INFO - Epoch [2][600/1221]	lr: 1.000e-03, eta: 1:21:34, time: 1.153, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0457, loss_rpn_bbox: 0.0344, s0.loss_cls: 0.3141, s0.acc: 91.2559, s0.loss_bbox: 0.1460, s1.loss_cls: 0.1576, s1.acc: 90.9321, s1.loss_bbox: 0.1231, s2.loss_cls: 0.0722, s2.acc: 91.8221, s2.loss_bbox: 0.0615, loss: 0.9546
2021-10-04 04:19:11,805 - mmdet - INFO - Epoch [2][650/1221]	lr: 1.000e-03, eta: 1:20:38, time: 1.151, data_time: 0.010, memory: 12629, loss_rpn_cls: 0.0453, loss_rpn_bbox: 0.0402, s0.loss_cls: 0.2862, s0.acc: 91.8477, s0.loss_bbox: 0.1336, s1.loss_cls: 0.1475, s1.acc: 91.5095, s1.loss_bbox: 0.1189, s2.loss_cls: 0.0700, s2.acc: 92.0223, s2.loss_bbox: 0.0621, loss: 0.9038
2021-10-04 04:20:09,282 - mmdet - INFO - Epoch [2][700/1221]	lr: 1.000e-03, eta: 1:19:41, time: 1.150, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0610, loss_rpn_bbox: 0.0465, s0.loss_cls: 0.2980, s0.acc: 91.5576, s0.loss_bbox: 0.1448, s1.loss_cls: 0.1474, s1.acc: 91.4900, s1.loss_bbox: 0.1238, s2.loss_cls: 0.0675, s2.acc: 92.1595, s2.loss_bbox: 0.0619, loss: 0.9509
2021-10-04 04:21:07,041 - mmdet - INFO - Epoch [2][750/1221]	lr: 1.000e-03, eta: 1:18:45, time: 1.155, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0484, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.2969, s0.acc: 91.6641, s0.loss_bbox: 0.1354, s1.loss_cls: 0.1513, s1.acc: 91.3468, s1.loss_bbox: 0.1177, s2.loss_cls: 0.0698, s2.acc: 91.9970, s2.loss_bbox: 0.0602, loss: 0.9127
2021-10-04 04:22:04,622 - mmdet - INFO - Epoch [2][800/1221]	lr: 1.000e-03, eta: 1:17:49, time: 1.152, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0634, loss_rpn_bbox: 0.0404, s0.loss_cls: 0.3271, s0.acc: 90.9258, s0.loss_bbox: 0.1550, s1.loss_cls: 0.1627, s1.acc: 90.7784, s1.loss_bbox: 0.1325, s2.loss_cls: 0.0731, s2.acc: 91.7675, s2.loss_bbox: 0.0638, loss: 1.0180
2021-10-04 04:23:02,415 - mmdet - INFO - Epoch [2][850/1221]	lr: 1.000e-03, eta: 1:16:53, time: 1.156, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0412, loss_rpn_bbox: 0.0297, s0.loss_cls: 0.2984, s0.acc: 91.4814, s0.loss_bbox: 0.1329, s1.loss_cls: 0.1520, s1.acc: 91.2065, s1.loss_bbox: 0.1173, s2.loss_cls: 0.0721, s2.acc: 91.7967, s2.loss_bbox: 0.0601, loss: 0.9038
2021-10-04 04:24:00,157 - mmdet - INFO - Epoch [2][900/1221]	lr: 1.000e-03, eta: 1:15:57, time: 1.155, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0692, loss_rpn_bbox: 0.0419, s0.loss_cls: 0.3043, s0.acc: 91.3945, s0.loss_bbox: 0.1462, s1.loss_cls: 0.1488, s1.acc: 91.6668, s1.loss_bbox: 0.1277, s2.loss_cls: 0.0673, s2.acc: 92.3527, s2.loss_bbox: 0.0613, loss: 0.9667
2021-10-04 04:24:57,952 - mmdet - INFO - Epoch [2][950/1221]	lr: 1.000e-03, eta: 1:15:01, time: 1.156, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0528, loss_rpn_bbox: 0.0502, s0.loss_cls: 0.3126, s0.acc: 91.0625, s0.loss_bbox: 0.1551, s1.loss_cls: 0.1558, s1.acc: 90.8305, s1.loss_bbox: 0.1331, s2.loss_cls: 0.0727, s2.acc: 91.4573, s2.loss_bbox: 0.0682, loss: 1.0005
2021-10-04 04:25:55,235 - mmdet - INFO - Epoch [2][1000/1221]	lr: 1.000e-03, eta: 1:14:04, time: 1.146, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0541, loss_rpn_bbox: 0.0368, s0.loss_cls: 0.3368, s0.acc: 90.5762, s0.loss_bbox: 0.1504, s1.loss_cls: 0.1656, s1.acc: 90.5434, s1.loss_bbox: 0.1289, s2.loss_cls: 0.0762, s2.acc: 91.2842, s2.loss_bbox: 0.0664, loss: 1.0152
2021-10-04 04:26:52,727 - mmdet - INFO - Epoch [2][1050/1221]	lr: 1.000e-03, eta: 1:13:07, time: 1.150, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0458, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.2720, s0.acc: 92.0469, s0.loss_bbox: 0.1290, s1.loss_cls: 0.1370, s1.acc: 91.7776, s1.loss_bbox: 0.1146, s2.loss_cls: 0.0662, s2.acc: 92.0881, s2.loss_bbox: 0.0616, loss: 0.8627
2021-10-04 04:27:50,257 - mmdet - INFO - Epoch [2][1100/1221]	lr: 1.000e-03, eta: 1:12:10, time: 1.151, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0528, loss_rpn_bbox: 0.0399, s0.loss_cls: 0.3120, s0.acc: 91.4775, s0.loss_bbox: 0.1322, s1.loss_cls: 0.1596, s1.acc: 90.9338, s1.loss_bbox: 0.1200, s2.loss_cls: 0.0766, s2.acc: 91.2453, s2.loss_bbox: 0.0656, loss: 0.9585
2021-10-04 04:28:47,760 - mmdet - INFO - Epoch [2][1150/1221]	lr: 1.000e-03, eta: 1:11:14, time: 1.150, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0483, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2761, s0.acc: 92.2061, s0.loss_bbox: 0.1163, s1.loss_cls: 0.1415, s1.acc: 91.9471, s1.loss_bbox: 0.1047, s2.loss_cls: 0.0682, s2.acc: 92.2847, s2.loss_bbox: 0.0570, loss: 0.8466
2021-10-04 04:29:45,597 - mmdet - INFO - Epoch [2][1200/1221]	lr: 1.000e-03, eta: 1:10:17, time: 1.157, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0510, loss_rpn_bbox: 0.0411, s0.loss_cls: 0.3254, s0.acc: 90.7490, s0.loss_bbox: 0.1545, s1.loss_cls: 0.1611, s1.acc: 90.7408, s1.loss_bbox: 0.1374, s2.loss_cls: 0.0756, s2.acc: 91.2775, s2.loss_bbox: 0.0721, loss: 1.0181
2021-10-04 04:30:09,697 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-10-04 04:38:52,014 - mmdet - INFO - Evaluating bbox...
2021-10-04 04:39:14,088 - mmdet - INFO - Exp name: final4.py
2021-10-04 04:39:14,088 - mmdet - INFO - Epoch(val) [2][4883]	bbox_mAP: 0.1880, bbox_mAP_50: 0.3090, bbox_mAP_75: 0.1980, bbox_mAP_s: 0.0040, bbox_mAP_m: 0.0260, bbox_mAP_l: 0.2300, bbox_mAP_copypaste: 0.188 0.309 0.198 0.004 0.026 0.230
2021-10-04 04:40:13,807 - mmdet - INFO - Epoch [3][50/1221]	lr: 1.000e-03, eta: 1:08:25, time: 1.194, data_time: 0.056, memory: 12647, loss_rpn_cls: 0.0418, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.2892, s0.acc: 91.4014, s0.loss_bbox: 0.1294, s1.loss_cls: 0.1535, s1.acc: 90.5632, s1.loss_bbox: 0.1274, s2.loss_cls: 0.0758, s2.acc: 90.7887, s2.loss_bbox: 0.0698, loss: 0.9238
2021-10-04 04:41:11,388 - mmdet - INFO - Epoch [3][100/1221]	lr: 1.000e-03, eta: 1:07:29, time: 1.152, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0491, loss_rpn_bbox: 0.0421, s0.loss_cls: 0.3147, s0.acc: 91.0244, s0.loss_bbox: 0.1433, s1.loss_cls: 0.1554, s1.acc: 91.0117, s1.loss_bbox: 0.1269, s2.loss_cls: 0.0725, s2.acc: 91.5081, s2.loss_bbox: 0.0656, loss: 0.9696
2021-10-04 04:42:09,272 - mmdet - INFO - Epoch [3][150/1221]	lr: 1.000e-03, eta: 1:06:34, time: 1.158, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0541, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.3041, s0.acc: 91.3105, s0.loss_bbox: 0.1427, s1.loss_cls: 0.1526, s1.acc: 90.9948, s1.loss_bbox: 0.1277, s2.loss_cls: 0.0738, s2.acc: 91.3391, s2.loss_bbox: 0.0719, loss: 0.9629
2021-10-04 04:43:06,811 - mmdet - INFO - Epoch [3][200/1221]	lr: 1.000e-03, eta: 1:05:38, time: 1.151, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0474, loss_rpn_bbox: 0.0394, s0.loss_cls: 0.2937, s0.acc: 91.4746, s0.loss_bbox: 0.1352, s1.loss_cls: 0.1485, s1.acc: 91.2711, s1.loss_bbox: 0.1187, s2.loss_cls: 0.0717, s2.acc: 91.5995, s2.loss_bbox: 0.0636, loss: 0.9183
2021-10-04 04:44:04,489 - mmdet - INFO - Epoch [3][250/1221]	lr: 1.000e-03, eta: 1:04:42, time: 1.154, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0398, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.2756, s0.acc: 91.8750, s0.loss_bbox: 0.1229, s1.loss_cls: 0.1428, s1.acc: 91.3633, s1.loss_bbox: 0.1185, s2.loss_cls: 0.0702, s2.acc: 91.6659, s2.loss_bbox: 0.0664, loss: 0.8701
2021-10-04 04:45:02,250 - mmdet - INFO - Epoch [3][300/1221]	lr: 1.000e-03, eta: 1:03:46, time: 1.155, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0478, loss_rpn_bbox: 0.0442, s0.loss_cls: 0.2942, s0.acc: 91.3281, s0.loss_bbox: 0.1375, s1.loss_cls: 0.1469, s1.acc: 91.2099, s1.loss_bbox: 0.1213, s2.loss_cls: 0.0714, s2.acc: 91.2431, s2.loss_bbox: 0.0662, loss: 0.9295
2021-10-04 04:45:59,832 - mmdet - INFO - Epoch [3][350/1221]	lr: 1.000e-03, eta: 1:02:50, time: 1.152, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0407, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.2765, s0.acc: 92.1729, s0.loss_bbox: 0.1212, s1.loss_cls: 0.1402, s1.acc: 91.8038, s1.loss_bbox: 0.1112, s2.loss_cls: 0.0671, s2.acc: 92.2184, s2.loss_bbox: 0.0616, loss: 0.8499
2021-10-04 04:46:57,412 - mmdet - INFO - Epoch [3][400/1221]	lr: 1.000e-03, eta: 1:01:54, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0432, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.2668, s0.acc: 92.0566, s0.loss_bbox: 0.1113, s1.loss_cls: 0.1422, s1.acc: 91.4472, s1.loss_bbox: 0.1058, s2.loss_cls: 0.0726, s2.acc: 91.1444, s2.loss_bbox: 0.0634, loss: 0.8371
2021-10-04 04:47:55,033 - mmdet - INFO - Epoch [3][450/1221]	lr: 1.000e-03, eta: 1:00:58, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0494, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.3155, s0.acc: 90.6914, s0.loss_bbox: 0.1476, s1.loss_cls: 0.1571, s1.acc: 90.6520, s1.loss_bbox: 0.1263, s2.loss_cls: 0.0754, s2.acc: 91.2030, s2.loss_bbox: 0.0687, loss: 0.9784
2021-10-04 04:48:52,917 - mmdet - INFO - Epoch [3][500/1221]	lr: 1.000e-03, eta: 1:00:02, time: 1.158, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0448, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.2745, s0.acc: 91.8174, s0.loss_bbox: 0.1268, s1.loss_cls: 0.1439, s1.acc: 91.1325, s1.loss_bbox: 0.1226, s2.loss_cls: 0.0705, s2.acc: 91.5445, s2.loss_bbox: 0.0693, loss: 0.8854
2021-10-04 04:49:50,852 - mmdet - INFO - Epoch [3][550/1221]	lr: 1.000e-03, eta: 0:59:06, time: 1.159, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0398, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.2780, s0.acc: 91.8369, s0.loss_bbox: 0.1250, s1.loss_cls: 0.1426, s1.acc: 91.4860, s1.loss_bbox: 0.1124, s2.loss_cls: 0.0694, s2.acc: 91.4538, s2.loss_bbox: 0.0623, loss: 0.8645
2021-10-04 04:50:48,637 - mmdet - INFO - Epoch [3][600/1221]	lr: 1.000e-03, eta: 0:58:10, time: 1.156, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0458, loss_rpn_bbox: 0.0371, s0.loss_cls: 0.2959, s0.acc: 91.4229, s0.loss_bbox: 0.1378, s1.loss_cls: 0.1503, s1.acc: 91.1794, s1.loss_bbox: 0.1252, s2.loss_cls: 0.0724, s2.acc: 91.4673, s2.loss_bbox: 0.0660, loss: 0.9305
2021-10-04 04:51:46,362 - mmdet - INFO - Epoch [3][650/1221]	lr: 1.000e-03, eta: 0:57:13, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0485, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.2779, s0.acc: 91.9814, s0.loss_bbox: 0.1292, s1.loss_cls: 0.1404, s1.acc: 91.8051, s1.loss_bbox: 0.1161, s2.loss_cls: 0.0664, s2.acc: 92.2422, s2.loss_bbox: 0.0608, loss: 0.8763
2021-10-04 04:52:43,937 - mmdet - INFO - Epoch [3][700/1221]	lr: 1.000e-03, eta: 0:56:17, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0388, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.2571, s0.acc: 92.3965, s0.loss_bbox: 0.1170, s1.loss_cls: 0.1337, s1.acc: 91.9746, s1.loss_bbox: 0.1118, s2.loss_cls: 0.0654, s2.acc: 91.9333, s2.loss_bbox: 0.0651, loss: 0.8193
2021-10-04 04:53:41,648 - mmdet - INFO - Epoch [3][750/1221]	lr: 1.000e-03, eta: 0:55:21, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0477, loss_rpn_bbox: 0.0467, s0.loss_cls: 0.2959, s0.acc: 91.3037, s0.loss_bbox: 0.1423, s1.loss_cls: 0.1497, s1.acc: 91.1122, s1.loss_bbox: 0.1270, s2.loss_cls: 0.0695, s2.acc: 91.7778, s2.loss_bbox: 0.0680, loss: 0.9469
2021-10-04 04:54:39,233 - mmdet - INFO - Epoch [3][800/1221]	lr: 1.000e-03, eta: 0:54:24, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0491, loss_rpn_bbox: 0.0331, s0.loss_cls: 0.2947, s0.acc: 91.5791, s0.loss_bbox: 0.1287, s1.loss_cls: 0.1500, s1.acc: 91.0348, s1.loss_bbox: 0.1217, s2.loss_cls: 0.0722, s2.acc: 91.4156, s2.loss_bbox: 0.0683, loss: 0.9178
2021-10-04 04:55:36,839 - mmdet - INFO - Epoch [3][850/1221]	lr: 1.000e-03, eta: 0:53:28, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0463, loss_rpn_bbox: 0.0416, s0.loss_cls: 0.2774, s0.acc: 92.0537, s0.loss_bbox: 0.1243, s1.loss_cls: 0.1426, s1.acc: 91.6434, s1.loss_bbox: 0.1143, s2.loss_cls: 0.0681, s2.acc: 91.9219, s2.loss_bbox: 0.0628, loss: 0.8774
2021-10-04 04:56:34,413 - mmdet - INFO - Epoch [3][900/1221]	lr: 1.000e-03, eta: 0:52:31, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0436, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.2716, s0.acc: 92.0840, s0.loss_bbox: 0.1187, s1.loss_cls: 0.1437, s1.acc: 91.6826, s1.loss_bbox: 0.1102, s2.loss_cls: 0.0689, s2.acc: 91.9622, s2.loss_bbox: 0.0608, loss: 0.8503
2021-10-04 04:57:32,103 - mmdet - INFO - Epoch [3][950/1221]	lr: 1.000e-03, eta: 0:51:35, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0437, loss_rpn_bbox: 0.0503, s0.loss_cls: 0.3006, s0.acc: 91.1006, s0.loss_bbox: 0.1380, s1.loss_cls: 0.1591, s1.acc: 90.6400, s1.loss_bbox: 0.1302, s2.loss_cls: 0.0771, s2.acc: 91.0640, s2.loss_bbox: 0.0706, loss: 0.9697
2021-10-04 04:58:29,979 - mmdet - INFO - Epoch [3][1000/1221]	lr: 1.000e-03, eta: 0:50:38, time: 1.157, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0378, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.2754, s0.acc: 91.7197, s0.loss_bbox: 0.1319, s1.loss_cls: 0.1401, s1.acc: 91.5741, s1.loss_bbox: 0.1177, s2.loss_cls: 0.0685, s2.acc: 91.5854, s2.loss_bbox: 0.0644, loss: 0.8724
2021-10-04 04:59:27,821 - mmdet - INFO - Epoch [3][1050/1221]	lr: 1.000e-03, eta: 0:49:42, time: 1.157, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0461, loss_rpn_bbox: 0.0363, s0.loss_cls: 0.2641, s0.acc: 92.1426, s0.loss_bbox: 0.1223, s1.loss_cls: 0.1345, s1.acc: 92.0067, s1.loss_bbox: 0.1123, s2.loss_cls: 0.0656, s2.acc: 92.3371, s2.loss_bbox: 0.0616, loss: 0.8429
2021-10-04 05:00:25,282 - mmdet - INFO - Epoch [3][1100/1221]	lr: 1.000e-03, eta: 0:48:45, time: 1.149, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0365, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.2669, s0.acc: 92.4590, s0.loss_bbox: 0.1116, s1.loss_cls: 0.1404, s1.acc: 91.8828, s1.loss_bbox: 0.1070, s2.loss_cls: 0.0678, s2.acc: 92.2843, s2.loss_bbox: 0.0620, loss: 0.8257
2021-10-04 05:01:22,656 - mmdet - INFO - Epoch [3][1150/1221]	lr: 1.000e-03, eta: 0:47:48, time: 1.147, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0453, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.2626, s0.acc: 92.3564, s0.loss_bbox: 0.1254, s1.loss_cls: 0.1359, s1.acc: 92.0145, s1.loss_bbox: 0.1128, s2.loss_cls: 0.0651, s2.acc: 92.5311, s2.loss_bbox: 0.0631, loss: 0.8437
2021-10-04 05:02:20,245 - mmdet - INFO - Epoch [3][1200/1221]	lr: 1.000e-03, eta: 0:46:51, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0487, loss_rpn_bbox: 0.0408, s0.loss_cls: 0.2813, s0.acc: 91.5645, s0.loss_bbox: 0.1303, s1.loss_cls: 0.1435, s1.acc: 91.3081, s1.loss_bbox: 0.1224, s2.loss_cls: 0.0690, s2.acc: 91.6999, s2.loss_bbox: 0.0686, loss: 0.9046
2021-10-04 05:02:44,450 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-10-04 05:11:24,285 - mmdet - INFO - Evaluating bbox...
2021-10-04 05:11:43,709 - mmdet - INFO - Exp name: final4.py
2021-10-04 05:11:43,710 - mmdet - INFO - Epoch(val) [3][4883]	bbox_mAP: 0.2380, bbox_mAP_50: 0.3750, bbox_mAP_75: 0.2590, bbox_mAP_s: 0.0040, bbox_mAP_m: 0.0480, bbox_mAP_l: 0.2880, bbox_mAP_copypaste: 0.238 0.375 0.259 0.004 0.048 0.288
2021-10-04 05:12:43,819 - mmdet - INFO - Epoch [4][50/1221]	lr: 1.000e-03, eta: 0:45:17, time: 1.202, data_time: 0.056, memory: 12647, loss_rpn_cls: 0.0417, loss_rpn_bbox: 0.0460, s0.loss_cls: 0.2786, s0.acc: 91.7354, s0.loss_bbox: 0.1255, s1.loss_cls: 0.1423, s1.acc: 91.4747, s1.loss_bbox: 0.1165, s2.loss_cls: 0.0692, s2.acc: 91.7573, s2.loss_bbox: 0.0644, loss: 0.8842
2021-10-04 05:13:41,359 - mmdet - INFO - Epoch [4][100/1221]	lr: 1.000e-03, eta: 0:44:20, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0438, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.2696, s0.acc: 91.5576, s0.loss_bbox: 0.1256, s1.loss_cls: 0.1381, s1.acc: 91.2683, s1.loss_bbox: 0.1153, s2.loss_cls: 0.0689, s2.acc: 91.1824, s2.loss_bbox: 0.0663, loss: 0.8622
2021-10-04 05:14:39,032 - mmdet - INFO - Epoch [4][150/1221]	lr: 1.000e-03, eta: 0:43:24, time: 1.153, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0324, loss_rpn_bbox: 0.0322, s0.loss_cls: 0.2522, s0.acc: 92.5752, s0.loss_bbox: 0.1091, s1.loss_cls: 0.1324, s1.acc: 91.9397, s1.loss_bbox: 0.1103, s2.loss_cls: 0.0659, s2.acc: 91.7057, s2.loss_bbox: 0.0654, loss: 0.7999
2021-10-04 05:15:36,863 - mmdet - INFO - Epoch [4][200/1221]	lr: 1.000e-03, eta: 0:42:28, time: 1.157, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0449, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.2957, s0.acc: 90.7969, s0.loss_bbox: 0.1402, s1.loss_cls: 0.1481, s1.acc: 90.7878, s1.loss_bbox: 0.1299, s2.loss_cls: 0.0723, s2.acc: 91.0264, s2.loss_bbox: 0.0724, loss: 0.9396
2021-10-04 05:16:34,357 - mmdet - INFO - Epoch [4][250/1221]	lr: 1.000e-03, eta: 0:41:31, time: 1.150, data_time: 0.010, memory: 12647, loss_rpn_cls: 0.0454, loss_rpn_bbox: 0.0393, s0.loss_cls: 0.2788, s0.acc: 91.4756, s0.loss_bbox: 0.1313, s1.loss_cls: 0.1424, s1.acc: 91.1217, s1.loss_bbox: 0.1208, s2.loss_cls: 0.0705, s2.acc: 91.3464, s2.loss_bbox: 0.0683, loss: 0.8968
2021-10-04 05:17:32,043 - mmdet - INFO - Epoch [4][300/1221]	lr: 1.000e-03, eta: 0:40:35, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0391, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.2698, s0.acc: 92.1504, s0.loss_bbox: 0.1244, s1.loss_cls: 0.1369, s1.acc: 91.8703, s1.loss_bbox: 0.1166, s2.loss_cls: 0.0671, s2.acc: 91.9072, s2.loss_bbox: 0.0625, loss: 0.8518
2021-10-04 05:18:29,646 - mmdet - INFO - Epoch [4][350/1221]	lr: 1.000e-03, eta: 0:39:39, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0415, loss_rpn_bbox: 0.0356, s0.loss_cls: 0.2754, s0.acc: 91.6074, s0.loss_bbox: 0.1280, s1.loss_cls: 0.1399, s1.acc: 91.5536, s1.loss_bbox: 0.1231, s2.loss_cls: 0.0680, s2.acc: 91.9455, s2.loss_bbox: 0.0692, loss: 0.8806
2021-10-04 05:19:27,045 - mmdet - INFO - Epoch [4][400/1221]	lr: 1.000e-03, eta: 0:38:42, time: 1.148, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0396, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.2659, s0.acc: 91.9561, s0.loss_bbox: 0.1266, s1.loss_cls: 0.1385, s1.acc: 91.4350, s1.loss_bbox: 0.1159, s2.loss_cls: 0.0681, s2.acc: 91.4594, s2.loss_bbox: 0.0641, loss: 0.8542
2021-10-04 05:20:24,542 - mmdet - INFO - Epoch [4][450/1221]	lr: 1.000e-03, eta: 0:37:45, time: 1.150, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0351, s0.loss_cls: 0.2406, s0.acc: 92.8057, s0.loss_bbox: 0.1073, s1.loss_cls: 0.1251, s1.acc: 92.3320, s1.loss_bbox: 0.1038, s2.loss_cls: 0.0640, s2.acc: 92.1532, s2.loss_bbox: 0.0614, loss: 0.7724
2021-10-04 05:21:22,186 - mmdet - INFO - Epoch [4][500/1221]	lr: 1.000e-03, eta: 0:36:49, time: 1.153, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0428, loss_rpn_bbox: 0.0300, s0.loss_cls: 0.2539, s0.acc: 92.4590, s0.loss_bbox: 0.1075, s1.loss_cls: 0.1320, s1.acc: 91.9999, s1.loss_bbox: 0.1038, s2.loss_cls: 0.0642, s2.acc: 92.2958, s2.loss_bbox: 0.0592, loss: 0.7934
2021-10-04 05:22:19,695 - mmdet - INFO - Epoch [4][550/1221]	lr: 1.000e-03, eta: 0:35:52, time: 1.150, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0352, loss_rpn_bbox: 0.0374, s0.loss_cls: 0.2621, s0.acc: 91.8691, s0.loss_bbox: 0.1288, s1.loss_cls: 0.1327, s1.acc: 91.6958, s1.loss_bbox: 0.1189, s2.loss_cls: 0.0658, s2.acc: 91.8822, s2.loss_bbox: 0.0661, loss: 0.8471
2021-10-04 05:23:17,250 - mmdet - INFO - Epoch [4][600/1221]	lr: 1.000e-03, eta: 0:34:56, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0452, loss_rpn_bbox: 0.0337, s0.loss_cls: 0.2591, s0.acc: 92.3564, s0.loss_bbox: 0.1181, s1.loss_cls: 0.1330, s1.acc: 91.9314, s1.loss_bbox: 0.1094, s2.loss_cls: 0.0665, s2.acc: 92.0424, s2.loss_bbox: 0.0644, loss: 0.8293
2021-10-04 05:24:14,801 - mmdet - INFO - Epoch [4][650/1221]	lr: 1.000e-03, eta: 0:33:59, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0369, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.2620, s0.acc: 92.0742, s0.loss_bbox: 0.1106, s1.loss_cls: 0.1361, s1.acc: 91.5453, s1.loss_bbox: 0.1047, s2.loss_cls: 0.0682, s2.acc: 91.8213, s2.loss_bbox: 0.0621, loss: 0.8190
2021-10-04 05:25:12,520 - mmdet - INFO - Epoch [4][700/1221]	lr: 1.000e-03, eta: 0:33:03, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0385, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.2884, s0.acc: 90.7988, s0.loss_bbox: 0.1471, s1.loss_cls: 0.1442, s1.acc: 90.6773, s1.loss_bbox: 0.1348, s2.loss_cls: 0.0724, s2.acc: 90.5988, s2.loss_bbox: 0.0744, loss: 0.9384
2021-10-04 05:26:10,145 - mmdet - INFO - Epoch [4][750/1221]	lr: 1.000e-03, eta: 0:32:06, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0296, loss_rpn_bbox: 0.0294, s0.loss_cls: 0.2444, s0.acc: 92.7158, s0.loss_bbox: 0.1068, s1.loss_cls: 0.1271, s1.acc: 92.5305, s1.loss_bbox: 0.1025, s2.loss_cls: 0.0632, s2.acc: 92.6134, s2.loss_bbox: 0.0594, loss: 0.7625
2021-10-04 05:27:07,690 - mmdet - INFO - Epoch [4][800/1221]	lr: 1.000e-03, eta: 0:31:09, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0415, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.2543, s0.acc: 92.1201, s0.loss_bbox: 0.1240, s1.loss_cls: 0.1332, s1.acc: 91.4452, s1.loss_bbox: 0.1148, s2.loss_cls: 0.0639, s2.acc: 91.7339, s2.loss_bbox: 0.0619, loss: 0.8241
2021-10-04 05:28:05,467 - mmdet - INFO - Epoch [4][850/1221]	lr: 1.000e-03, eta: 0:30:13, time: 1.156, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0438, loss_rpn_bbox: 0.0375, s0.loss_cls: 0.2595, s0.acc: 92.0469, s0.loss_bbox: 0.1293, s1.loss_cls: 0.1321, s1.acc: 91.8067, s1.loss_bbox: 0.1164, s2.loss_cls: 0.0638, s2.acc: 92.1851, s2.loss_bbox: 0.0634, loss: 0.8457
2021-10-04 05:29:02,762 - mmdet - INFO - Epoch [4][900/1221]	lr: 1.000e-03, eta: 0:29:16, time: 1.146, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0302, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.2436, s0.acc: 92.6309, s0.loss_bbox: 0.1119, s1.loss_cls: 0.1295, s1.acc: 92.1390, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0658, s2.acc: 91.9013, s2.loss_bbox: 0.0649, loss: 0.7896
2021-10-04 05:30:00,135 - mmdet - INFO - Epoch [4][950/1221]	lr: 1.000e-03, eta: 0:28:19, time: 1.147, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0434, loss_rpn_bbox: 0.0347, s0.loss_cls: 0.2722, s0.acc: 91.9199, s0.loss_bbox: 0.1214, s1.loss_cls: 0.1392, s1.acc: 91.6904, s1.loss_bbox: 0.1162, s2.loss_cls: 0.0691, s2.acc: 91.5894, s2.loss_bbox: 0.0664, loss: 0.8626
2021-10-04 05:30:57,801 - mmdet - INFO - Epoch [4][1000/1221]	lr: 1.000e-03, eta: 0:27:22, time: 1.153, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0327, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2311, s0.acc: 92.9297, s0.loss_bbox: 0.1061, s1.loss_cls: 0.1156, s1.acc: 92.7813, s1.loss_bbox: 0.1028, s2.loss_cls: 0.0579, s2.acc: 92.8349, s2.loss_bbox: 0.0600, loss: 0.7337
2021-10-04 05:31:55,415 - mmdet - INFO - Epoch [4][1050/1221]	lr: 1.000e-03, eta: 0:26:25, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0421, loss_rpn_bbox: 0.0386, s0.loss_cls: 0.2782, s0.acc: 91.8906, s0.loss_bbox: 0.1274, s1.loss_cls: 0.1440, s1.acc: 91.6472, s1.loss_bbox: 0.1171, s2.loss_cls: 0.0691, s2.acc: 92.0882, s2.loss_bbox: 0.0639, loss: 0.8805
2021-10-04 05:32:52,864 - mmdet - INFO - Epoch [4][1100/1221]	lr: 1.000e-03, eta: 0:25:29, time: 1.149, data_time: 0.012, memory: 12647, loss_rpn_cls: 0.0383, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.2442, s0.acc: 92.4062, s0.loss_bbox: 0.1111, s1.loss_cls: 0.1255, s1.acc: 92.1670, s1.loss_bbox: 0.1089, s2.loss_cls: 0.0634, s2.acc: 92.0374, s2.loss_bbox: 0.0632, loss: 0.7851
2021-10-04 05:33:50,593 - mmdet - INFO - Epoch [4][1150/1221]	lr: 1.000e-03, eta: 0:24:32, time: 1.155, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0426, loss_rpn_bbox: 0.0333, s0.loss_cls: 0.2625, s0.acc: 92.1201, s0.loss_bbox: 0.1215, s1.loss_cls: 0.1341, s1.acc: 91.7747, s1.loss_bbox: 0.1174, s2.loss_cls: 0.0666, s2.acc: 91.8768, s2.loss_bbox: 0.0711, loss: 0.8491
2021-10-04 05:34:48,284 - mmdet - INFO - Epoch [4][1200/1221]	lr: 1.000e-03, eta: 0:23:35, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0324, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.2586, s0.acc: 92.2549, s0.loss_bbox: 0.1126, s1.loss_cls: 0.1367, s1.acc: 91.5745, s1.loss_bbox: 0.1075, s2.loss_cls: 0.0679, s2.acc: 91.7056, s2.loss_bbox: 0.0622, loss: 0.8083
2021-10-04 05:35:12,522 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-10-04 05:43:54,219 - mmdet - INFO - Evaluating bbox...
2021-10-04 05:44:16,012 - mmdet - INFO - Exp name: final4.py
2021-10-04 05:44:16,013 - mmdet - INFO - Epoch(val) [4][4883]	bbox_mAP: 0.3090, bbox_mAP_50: 0.4700, bbox_mAP_75: 0.3440, bbox_mAP_s: 0.0100, bbox_mAP_m: 0.0820, bbox_mAP_l: 0.3670, bbox_mAP_copypaste: 0.309 0.470 0.344 0.010 0.082 0.367
2021-10-04 05:45:15,934 - mmdet - INFO - Epoch [5][50/1221]	lr: 1.000e-03, eta: 0:22:09, time: 1.198, data_time: 0.057, memory: 12647, loss_rpn_cls: 0.0296, loss_rpn_bbox: 0.0310, s0.loss_cls: 0.2080, s0.acc: 93.4580, s0.loss_bbox: 0.0914, s1.loss_cls: 0.1065, s1.acc: 93.3004, s1.loss_bbox: 0.0905, s2.loss_cls: 0.0538, s2.acc: 93.2168, s2.loss_bbox: 0.0545, loss: 0.6651
2021-10-04 05:46:13,537 - mmdet - INFO - Epoch [5][100/1221]	lr: 1.000e-03, eta: 0:21:13, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.2549, s0.acc: 92.0020, s0.loss_bbox: 0.1225, s1.loss_cls: 0.1316, s1.acc: 91.7520, s1.loss_bbox: 0.1139, s2.loss_cls: 0.0659, s2.acc: 91.7741, s2.loss_bbox: 0.0655, loss: 0.8243
2021-10-04 05:47:11,099 - mmdet - INFO - Epoch [5][150/1221]	lr: 1.000e-03, eta: 0:20:16, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0332, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.2653, s0.acc: 92.0586, s0.loss_bbox: 0.1200, s1.loss_cls: 0.1353, s1.acc: 91.8070, s1.loss_bbox: 0.1111, s2.loss_cls: 0.0668, s2.acc: 91.8078, s2.loss_bbox: 0.0650, loss: 0.8263
2021-10-04 05:48:08,629 - mmdet - INFO - Epoch [5][200/1221]	lr: 1.000e-03, eta: 0:19:19, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.2637, s0.acc: 91.8809, s0.loss_bbox: 0.1194, s1.loss_cls: 0.1353, s1.acc: 91.7052, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0657, s2.acc: 91.7841, s2.loss_bbox: 0.0635, loss: 0.8273
2021-10-04 05:49:05,927 - mmdet - INFO - Epoch [5][250/1221]	lr: 1.000e-03, eta: 0:18:23, time: 1.146, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0268, loss_rpn_bbox: 0.0313, s0.loss_cls: 0.2112, s0.acc: 93.2578, s0.loss_bbox: 0.0974, s1.loss_cls: 0.1086, s1.acc: 93.0109, s1.loss_bbox: 0.0954, s2.loss_cls: 0.0564, s2.acc: 92.6289, s2.loss_bbox: 0.0594, loss: 0.6864
2021-10-04 05:50:03,332 - mmdet - INFO - Epoch [5][300/1221]	lr: 1.000e-03, eta: 0:17:26, time: 1.148, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.2695, s0.acc: 91.4082, s0.loss_bbox: 0.1329, s1.loss_cls: 0.1378, s1.acc: 91.0658, s1.loss_bbox: 0.1256, s2.loss_cls: 0.0687, s2.acc: 91.1115, s2.loss_bbox: 0.0742, loss: 0.8781
2021-10-04 05:51:00,994 - mmdet - INFO - Epoch [5][350/1221]	lr: 1.000e-03, eta: 0:16:29, time: 1.153, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0366, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.2452, s0.acc: 92.3760, s0.loss_bbox: 0.1171, s1.loss_cls: 0.1245, s1.acc: 92.0524, s1.loss_bbox: 0.1058, s2.loss_cls: 0.0623, s2.acc: 92.1665, s2.loss_bbox: 0.0604, loss: 0.7827
2021-10-04 05:51:58,431 - mmdet - INFO - Epoch [5][400/1221]	lr: 1.000e-03, eta: 0:15:32, time: 1.149, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0363, loss_rpn_bbox: 0.0320, s0.loss_cls: 0.2346, s0.acc: 92.6133, s0.loss_bbox: 0.1049, s1.loss_cls: 0.1221, s1.acc: 92.2281, s1.loss_bbox: 0.1007, s2.loss_cls: 0.0614, s2.acc: 92.3101, s2.loss_bbox: 0.0615, loss: 0.7535
2021-10-04 05:52:55,950 - mmdet - INFO - Epoch [5][450/1221]	lr: 1.000e-03, eta: 0:14:36, time: 1.150, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.2354, s0.acc: 92.7295, s0.loss_bbox: 0.0978, s1.loss_cls: 0.1227, s1.acc: 92.4259, s1.loss_bbox: 0.0957, s2.loss_cls: 0.0634, s2.acc: 91.8595, s2.loss_bbox: 0.0564, loss: 0.7386
2021-10-04 05:53:53,628 - mmdet - INFO - Epoch [5][500/1221]	lr: 1.000e-03, eta: 0:13:39, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0330, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2343, s0.acc: 92.6504, s0.loss_bbox: 0.1029, s1.loss_cls: 0.1243, s1.acc: 92.1575, s1.loss_bbox: 0.1014, s2.loss_cls: 0.0641, s2.acc: 91.7082, s2.loss_bbox: 0.0621, loss: 0.7494
2021-10-04 05:54:51,555 - mmdet - INFO - Epoch [5][550/1221]	lr: 1.000e-03, eta: 0:12:42, time: 1.159, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0283, loss_rpn_bbox: 0.0263, s0.loss_cls: 0.2166, s0.acc: 93.2139, s0.loss_bbox: 0.0924, s1.loss_cls: 0.1141, s1.acc: 92.9440, s1.loss_bbox: 0.0943, s2.loss_cls: 0.0579, s2.acc: 93.0122, s2.loss_bbox: 0.0596, loss: 0.6896
2021-10-04 05:55:49,144 - mmdet - INFO - Epoch [5][600/1221]	lr: 1.000e-03, eta: 0:11:46, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.2407, s0.acc: 92.4795, s0.loss_bbox: 0.1178, s1.loss_cls: 0.1210, s1.acc: 92.3885, s1.loss_bbox: 0.1091, s2.loss_cls: 0.0605, s2.acc: 92.0369, s2.loss_bbox: 0.0642, loss: 0.7796
2021-10-04 05:56:46,837 - mmdet - INFO - Epoch [5][650/1221]	lr: 1.000e-03, eta: 0:10:49, time: 1.154, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0283, s0.loss_cls: 0.2529, s0.acc: 92.4072, s0.loss_bbox: 0.1164, s1.loss_cls: 0.1285, s1.acc: 92.3682, s1.loss_bbox: 0.1092, s2.loss_cls: 0.0632, s2.acc: 92.2952, s2.loss_bbox: 0.0635, loss: 0.7920
2021-10-04 05:57:44,428 - mmdet - INFO - Epoch [5][700/1221]	lr: 1.000e-03, eta: 0:09:52, time: 1.152, data_time: 0.012, memory: 12647, loss_rpn_cls: 0.0362, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.2596, s0.acc: 92.1504, s0.loss_bbox: 0.1181, s1.loss_cls: 0.1302, s1.acc: 92.0409, s1.loss_bbox: 0.1086, s2.loss_cls: 0.0652, s2.acc: 91.9812, s2.loss_bbox: 0.0610, loss: 0.8126
2021-10-04 05:58:41,931 - mmdet - INFO - Epoch [5][750/1221]	lr: 1.000e-03, eta: 0:08:55, time: 1.150, data_time: 0.012, memory: 12647, loss_rpn_cls: 0.0279, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.2400, s0.acc: 92.6025, s0.loss_bbox: 0.1107, s1.loss_cls: 0.1250, s1.acc: 92.1656, s1.loss_bbox: 0.1033, s2.loss_cls: 0.0630, s2.acc: 92.1952, s2.loss_bbox: 0.0607, loss: 0.7638
2021-10-04 05:59:39,548 - mmdet - INFO - Epoch [5][800/1221]	lr: 1.000e-03, eta: 0:07:58, time: 1.152, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0337, s0.loss_cls: 0.2426, s0.acc: 92.4893, s0.loss_bbox: 0.1125, s1.loss_cls: 0.1237, s1.acc: 92.2946, s1.loss_bbox: 0.1056, s2.loss_cls: 0.0619, s2.acc: 92.5101, s2.loss_bbox: 0.0605, loss: 0.7754
2021-10-04 06:00:37,086 - mmdet - INFO - Epoch [5][850/1221]	lr: 1.000e-03, eta: 0:07:02, time: 1.151, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0406, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.2631, s0.acc: 92.0713, s0.loss_bbox: 0.1218, s1.loss_cls: 0.1317, s1.acc: 91.9616, s1.loss_bbox: 0.1108, s2.loss_cls: 0.0646, s2.acc: 92.1969, s2.loss_bbox: 0.0643, loss: 0.8301
2021-10-04 06:01:34,480 - mmdet - INFO - Epoch [5][900/1221]	lr: 1.000e-03, eta: 0:06:05, time: 1.148, data_time: 0.011, memory: 12647, loss_rpn_cls: 0.0353, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.2377, s0.acc: 92.6885, s0.loss_bbox: 0.1135, s1.loss_cls: 0.1201, s1.acc: 92.3364, s1.loss_bbox: 0.1074, s2.loss_cls: 0.0598, s2.acc: 92.2972, s2.loss_bbox: 0.0623, loss: 0.7678
2021-10-04 06:02:32,107 - mmdet - INFO - Epoch [5][950/1221]	lr: 1.000e-03, eta: 0:05:08, time: 1.153, data_time: 0.011, memory: 12648, loss_rpn_cls: 0.0378, loss_rpn_bbox: 0.0363, s0.loss_cls: 0.2589, s0.acc: 91.9248, s0.loss_bbox: 0.1316, s1.loss_cls: 0.1309, s1.acc: 91.6727, s1.loss_bbox: 0.1200, s2.loss_cls: 0.0653, s2.acc: 91.6042, s2.loss_bbox: 0.0678, loss: 0.8485
2021-10-04 06:03:29,427 - mmdet - INFO - Epoch [5][1000/1221]	lr: 1.000e-03, eta: 0:04:11, time: 1.146, data_time: 0.011, memory: 12648, loss_rpn_cls: 0.0382, loss_rpn_bbox: 0.0263, s0.loss_cls: 0.2167, s0.acc: 93.3320, s0.loss_bbox: 0.0981, s1.loss_cls: 0.1119, s1.acc: 93.0188, s1.loss_bbox: 0.0979, s2.loss_cls: 0.0564, s2.acc: 92.8684, s2.loss_bbox: 0.0584, loss: 0.7040
2021-10-04 06:04:26,814 - mmdet - INFO - Epoch [5][1050/1221]	lr: 1.000e-03, eta: 0:03:14, time: 1.148, data_time: 0.011, memory: 12648, loss_rpn_cls: 0.0391, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.2504, s0.acc: 92.1865, s0.loss_bbox: 0.1254, s1.loss_cls: 0.1276, s1.acc: 92.0465, s1.loss_bbox: 0.1162, s2.loss_cls: 0.0629, s2.acc: 92.2667, s2.loss_bbox: 0.0662, loss: 0.8243
2021-10-04 06:05:24,513 - mmdet - INFO - Epoch [5][1100/1221]	lr: 1.000e-03, eta: 0:02:17, time: 1.154, data_time: 0.011, memory: 12648, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0326, s0.loss_cls: 0.2597, s0.acc: 91.8359, s0.loss_bbox: 0.1251, s1.loss_cls: 0.1315, s1.acc: 91.8070, s1.loss_bbox: 0.1157, s2.loss_cls: 0.0660, s2.acc: 91.8772, s2.loss_bbox: 0.0673, loss: 0.8325
2021-10-04 06:06:22,123 - mmdet - INFO - Epoch [5][1150/1221]	lr: 1.000e-03, eta: 0:01:20, time: 1.152, data_time: 0.011, memory: 12648, loss_rpn_cls: 0.0366, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.2737, s0.acc: 91.7656, s0.loss_bbox: 0.1276, s1.loss_cls: 0.1387, s1.acc: 91.5196, s1.loss_bbox: 0.1195, s2.loss_cls: 0.0681, s2.acc: 91.5569, s2.loss_bbox: 0.0670, loss: 0.8674
2021-10-04 06:07:19,626 - mmdet - INFO - Epoch [5][1200/1221]	lr: 1.000e-03, eta: 0:00:23, time: 1.150, data_time: 0.012, memory: 12648, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.2342, s0.acc: 92.7568, s0.loss_bbox: 0.1159, s1.loss_cls: 0.1175, s1.acc: 92.7523, s1.loss_bbox: 0.1107, s2.loss_cls: 0.0574, s2.acc: 92.9888, s2.loss_bbox: 0.0644, loss: 0.7726
2021-10-04 06:07:44,017 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-10-04 06:16:25,972 - mmdet - INFO - Evaluating bbox...
2021-10-04 06:16:43,551 - mmdet - INFO - Exp name: final4.py
2021-10-04 06:16:43,551 - mmdet - INFO - Epoch(val) [5][4883]	bbox_mAP: 0.3670, bbox_mAP_50: 0.5390, bbox_mAP_75: 0.3990, bbox_mAP_s: 0.0030, bbox_mAP_m: 0.1150, bbox_mAP_l: 0.4330, bbox_mAP_copypaste: 0.367 0.539 0.399 0.003 0.115 0.433
