2021-10-03 17:05:12,945 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+2577e37
------------------------------------------------------------

2021-10-03 17:05:13,443 - mmdet - INFO - Distributed training: False
2021-10-03 17:05:14,015 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),
        groups=32,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '../dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../dataset/test.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/final2'
gpu_ids = range(0, 1)

2021-10-03 17:05:15,321 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_32x4d'}
2021-10-03 17:05:15,523 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-03 17:05:15,549 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-03 17:05:15,557 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-03 17:05:15,875 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-03 17:05:16,193 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv2.weight - torch.Size([256, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv2.weight - torch.Size([512, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv2.weight - torch.Size([1024, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_32x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-03 17:05:19,658 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/final2
2021-10-03 17:05:19,658 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-10-03 17:05:19,658 - mmdet - INFO - workflow: [('train', 1)], max: 5 epochs
2021-10-03 17:06:18,740 - mmdet - INFO - Epoch [1][50/1221]	lr: 9.890e-05, eta: 1:59:13, time: 1.181, data_time: 0.056, memory: 12558, loss_rpn_cls: 0.6914, loss_rpn_bbox: 0.0469, s0.loss_cls: 1.3483, s0.acc: 64.2949, s0.loss_bbox: 0.0486, s1.loss_cls: 0.3065, s1.acc: 94.1289, s1.loss_bbox: 0.0172, s2.loss_cls: 0.2851, s2.acc: 64.9590, s2.loss_bbox: 0.0056, loss: 2.7498
2021-10-03 17:07:15,645 - mmdet - INFO - Epoch [1][100/1221]	lr: 1.988e-04, eta: 1:56:04, time: 1.138, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.4875, loss_rpn_bbox: 0.0434, s0.loss_cls: 0.2622, s0.acc: 95.8623, s0.loss_bbox: 0.1036, s1.loss_cls: 0.0762, s1.acc: 98.0127, s1.loss_bbox: 0.0309, s2.loss_cls: 0.0319, s2.acc: 98.4844, s2.loss_bbox: 0.0074, loss: 1.0431
2021-10-03 17:08:12,464 - mmdet - INFO - Epoch [1][150/1221]	lr: 2.987e-04, eta: 1:54:20, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.1822, loss_rpn_bbox: 0.0451, s0.loss_cls: 0.3530, s0.acc: 93.0166, s0.loss_bbox: 0.1762, s1.loss_cls: 0.1011, s1.acc: 96.8125, s1.loss_bbox: 0.0541, s2.loss_cls: 0.0312, s2.acc: 98.3613, s2.loss_bbox: 0.0106, loss: 0.9535
2021-10-03 17:09:09,388 - mmdet - INFO - Epoch [1][200/1221]	lr: 3.986e-04, eta: 1:53:02, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.1195, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.2770, s0.acc: 93.8955, s0.loss_bbox: 0.1441, s1.loss_cls: 0.0912, s1.acc: 96.7393, s1.loss_bbox: 0.0556, s2.loss_cls: 0.0285, s2.acc: 98.3594, s2.loss_bbox: 0.0101, loss: 0.7612
2021-10-03 17:10:05,987 - mmdet - INFO - Epoch [1][250/1221]	lr: 4.985e-04, eta: 1:51:45, time: 1.132, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.1161, loss_rpn_bbox: 0.0376, s0.loss_cls: 0.3180, s0.acc: 92.9434, s0.loss_bbox: 0.1622, s1.loss_cls: 0.1072, s1.acc: 95.9023, s1.loss_bbox: 0.0712, s2.loss_cls: 0.0335, s2.acc: 97.9502, s2.loss_bbox: 0.0139, loss: 0.8597
2021-10-03 17:11:02,644 - mmdet - INFO - Epoch [1][300/1221]	lr: 5.984e-04, eta: 1:50:36, time: 1.133, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.1024, loss_rpn_bbox: 0.0358, s0.loss_cls: 0.2835, s0.acc: 93.6123, s0.loss_bbox: 0.1473, s1.loss_cls: 0.1000, s1.acc: 95.9346, s1.loss_bbox: 0.0694, s2.loss_cls: 0.0326, s2.acc: 97.8613, s2.loss_bbox: 0.0155, loss: 0.7865
2021-10-03 17:11:59,396 - mmdet - INFO - Epoch [1][350/1221]	lr: 6.983e-04, eta: 1:49:32, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.1083, loss_rpn_bbox: 0.0411, s0.loss_cls: 0.2752, s0.acc: 93.7119, s0.loss_bbox: 0.1378, s1.loss_cls: 0.1043, s1.acc: 95.5859, s1.loss_bbox: 0.0746, s2.loss_cls: 0.0355, s2.acc: 97.5801, s2.loss_bbox: 0.0184, loss: 0.7952
2021-10-03 17:12:55,977 - mmdet - INFO - Epoch [1][400/1221]	lr: 7.982e-04, eta: 1:48:28, time: 1.132, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0876, loss_rpn_bbox: 0.0325, s0.loss_cls: 0.2594, s0.acc: 93.8184, s0.loss_bbox: 0.1349, s1.loss_cls: 0.1021, s1.acc: 95.4502, s1.loss_bbox: 0.0772, s2.loss_cls: 0.0349, s2.acc: 97.4541, s2.loss_bbox: 0.0201, loss: 0.7487
2021-10-03 17:13:52,492 - mmdet - INFO - Epoch [1][450/1221]	lr: 8.981e-04, eta: 1:47:24, time: 1.130, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0882, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.2793, s0.acc: 93.3877, s0.loss_bbox: 0.1408, s1.loss_cls: 0.1088, s1.acc: 94.9941, s1.loss_bbox: 0.0838, s2.loss_cls: 0.0396, s2.acc: 96.9561, s2.loss_bbox: 0.0248, loss: 0.7982
2021-10-03 17:14:49,316 - mmdet - INFO - Epoch [1][500/1221]	lr: 9.980e-04, eta: 1:46:25, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0881, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.2855, s0.acc: 92.9922, s0.loss_bbox: 0.1492, s1.loss_cls: 0.1166, s1.acc: 94.3555, s1.loss_bbox: 0.0945, s2.loss_cls: 0.0441, s2.acc: 96.3301, s2.loss_bbox: 0.0314, loss: 0.8478
2021-10-03 17:15:46,134 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.000e-03, eta: 1:45:27, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0844, loss_rpn_bbox: 0.0398, s0.loss_cls: 0.3070, s0.acc: 92.3750, s0.loss_bbox: 0.1512, s1.loss_cls: 0.1287, s1.acc: 93.7256, s1.loss_bbox: 0.0977, s2.loss_cls: 0.0505, s2.acc: 95.5312, s2.loss_bbox: 0.0365, loss: 0.8959
2021-10-03 17:16:42,779 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.000e-03, eta: 1:44:27, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0784, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.3043, s0.acc: 92.3623, s0.loss_bbox: 0.1567, s1.loss_cls: 0.1288, s1.acc: 93.5000, s1.loss_bbox: 0.1010, s2.loss_cls: 0.0508, s2.acc: 95.3438, s2.loss_bbox: 0.0373, loss: 0.8926
2021-10-03 17:17:39,586 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.000e-03, eta: 1:43:29, time: 1.136, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.1046, loss_rpn_bbox: 0.0459, s0.loss_cls: 0.3501, s0.acc: 91.8281, s0.loss_bbox: 0.1701, s1.loss_cls: 0.1405, s1.acc: 93.4004, s1.loss_bbox: 0.1060, s2.loss_cls: 0.0571, s2.acc: 94.9668, s2.loss_bbox: 0.0413, loss: 1.0157
2021-10-03 17:18:36,507 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.000e-03, eta: 1:42:32, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0749, loss_rpn_bbox: 0.0351, s0.loss_cls: 0.2806, s0.acc: 92.8389, s0.loss_bbox: 0.1416, s1.loss_cls: 0.1202, s1.acc: 93.9570, s1.loss_bbox: 0.0970, s2.loss_cls: 0.0498, s2.acc: 95.2139, s2.loss_bbox: 0.0393, loss: 0.8384
2021-10-03 17:19:33,533 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.000e-03, eta: 1:41:36, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0682, loss_rpn_bbox: 0.0434, s0.loss_cls: 0.2718, s0.acc: 92.9072, s0.loss_bbox: 0.1369, s1.loss_cls: 0.1221, s1.acc: 93.6387, s1.loss_bbox: 0.0951, s2.loss_cls: 0.0506, s2.acc: 94.8857, s2.loss_bbox: 0.0402, loss: 0.8284
2021-10-03 17:20:30,277 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.000e-03, eta: 1:40:38, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0739, loss_rpn_bbox: 0.0368, s0.loss_cls: 0.2913, s0.acc: 92.5137, s0.loss_bbox: 0.1461, s1.loss_cls: 0.1313, s1.acc: 93.2090, s1.loss_bbox: 0.1033, s2.loss_cls: 0.0537, s2.acc: 94.4785, s2.loss_bbox: 0.0430, loss: 0.8794
2021-10-03 17:21:27,352 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.000e-03, eta: 1:39:42, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0628, loss_rpn_bbox: 0.0313, s0.loss_cls: 0.2906, s0.acc: 92.3232, s0.loss_bbox: 0.1512, s1.loss_cls: 0.1325, s1.acc: 92.9229, s1.loss_bbox: 0.1086, s2.loss_cls: 0.0567, s2.acc: 94.2031, s2.loss_bbox: 0.0465, loss: 0.8802
2021-10-03 17:22:24,343 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.000e-03, eta: 1:38:46, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0571, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2672, s0.acc: 93.0703, s0.loss_bbox: 0.1290, s1.loss_cls: 0.1251, s1.acc: 93.3664, s1.loss_bbox: 0.1001, s2.loss_cls: 0.0550, s2.acc: 94.3147, s2.loss_bbox: 0.0459, loss: 0.8140
2021-10-03 17:23:21,199 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.000e-03, eta: 1:37:48, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0585, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.2851, s0.acc: 92.5635, s0.loss_bbox: 0.1378, s1.loss_cls: 0.1274, s1.acc: 93.3555, s1.loss_bbox: 0.1047, s2.loss_cls: 0.0536, s2.acc: 94.5908, s2.loss_bbox: 0.0472, loss: 0.8459
2021-10-03 17:24:18,079 - mmdet - INFO - Exp name: final2.py
2021-10-03 17:24:18,079 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.000e-03, eta: 1:36:51, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0699, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.2898, s0.acc: 92.2393, s0.loss_bbox: 0.1499, s1.loss_cls: 0.1363, s1.acc: 92.7949, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0591, s2.acc: 93.8311, s2.loss_bbox: 0.0482, loss: 0.9026
2021-10-03 17:25:14,574 - mmdet - INFO - Epoch [1][1050/1221]	lr: 1.000e-03, eta: 1:35:52, time: 1.130, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0644, loss_rpn_bbox: 0.0369, s0.loss_cls: 0.3038, s0.acc: 91.6592, s0.loss_bbox: 0.1580, s1.loss_cls: 0.1428, s1.acc: 92.1101, s1.loss_bbox: 0.1213, s2.loss_cls: 0.0610, s2.acc: 93.6165, s2.loss_bbox: 0.0543, loss: 0.9425
2021-10-03 17:26:11,127 - mmdet - INFO - Epoch [1][1100/1221]	lr: 1.000e-03, eta: 1:34:54, time: 1.131, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0608, loss_rpn_bbox: 0.0369, s0.loss_cls: 0.2904, s0.acc: 92.0645, s0.loss_bbox: 0.1492, s1.loss_cls: 0.1306, s1.acc: 92.8633, s1.loss_bbox: 0.1097, s2.loss_cls: 0.0556, s2.acc: 93.9785, s2.loss_bbox: 0.0478, loss: 0.8810
2021-10-03 17:27:08,147 - mmdet - INFO - Epoch [1][1150/1221]	lr: 1.000e-03, eta: 1:33:57, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0578, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.2906, s0.acc: 92.1855, s0.loss_bbox: 0.1442, s1.loss_cls: 0.1343, s1.acc: 92.6893, s1.loss_bbox: 0.1116, s2.loss_cls: 0.0583, s2.acc: 93.7323, s2.loss_bbox: 0.0506, loss: 0.8827
2021-10-03 17:28:05,230 - mmdet - INFO - Epoch [1][1200/1221]	lr: 1.000e-03, eta: 1:33:01, time: 1.142, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0732, loss_rpn_bbox: 0.0450, s0.loss_cls: 0.3356, s0.acc: 90.7529, s0.loss_bbox: 0.1754, s1.loss_cls: 0.1547, s1.acc: 91.6026, s1.loss_bbox: 0.1278, s2.loss_cls: 0.0652, s2.acc: 93.2376, s2.loss_bbox: 0.0503, loss: 1.0272
2021-10-03 17:28:29,149 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-03 17:37:15,000 - mmdet - INFO - Evaluating bbox...
2021-10-03 17:37:41,102 - mmdet - INFO - Exp name: final2.py
2021-10-03 17:37:41,103 - mmdet - INFO - Epoch(val) [1][4883]	bbox_mAP: 0.0960, bbox_mAP_50: 0.1850, bbox_mAP_75: 0.0910, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0050, bbox_mAP_l: 0.1210, bbox_mAP_copypaste: 0.096 0.185 0.091 0.000 0.005 0.121
2021-10-03 17:38:40,236 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.000e-03, eta: 1:30:18, time: 1.182, data_time: 0.057, memory: 12558, loss_rpn_cls: 0.0590, loss_rpn_bbox: 0.0368, s0.loss_cls: 0.3108, s0.acc: 91.3516, s0.loss_bbox: 0.1625, s1.loss_cls: 0.1493, s1.acc: 91.6649, s1.loss_bbox: 0.1364, s2.loss_cls: 0.0654, s2.acc: 92.9694, s2.loss_bbox: 0.0617, loss: 0.9819
2021-10-03 17:39:37,161 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.000e-03, eta: 1:29:25, time: 1.138, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0647, loss_rpn_bbox: 0.0435, s0.loss_cls: 0.3210, s0.acc: 91.0596, s0.loss_bbox: 0.1649, s1.loss_cls: 0.1499, s1.acc: 91.6997, s1.loss_bbox: 0.1271, s2.loss_cls: 0.0653, s2.acc: 93.1247, s2.loss_bbox: 0.0566, loss: 0.9930
2021-10-03 17:40:33,995 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.000e-03, eta: 1:28:32, time: 1.137, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0552, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.2824, s0.acc: 92.1885, s0.loss_bbox: 0.1423, s1.loss_cls: 0.1351, s1.acc: 92.5172, s1.loss_bbox: 0.1150, s2.loss_cls: 0.0583, s2.acc: 93.6705, s2.loss_bbox: 0.0528, loss: 0.8772
2021-10-03 17:41:30,879 - mmdet - INFO - Epoch [2][200/1221]	lr: 1.000e-03, eta: 1:27:38, time: 1.138, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0581, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.2800, s0.acc: 92.4014, s0.loss_bbox: 0.1357, s1.loss_cls: 0.1309, s1.acc: 92.7012, s1.loss_bbox: 0.1096, s2.loss_cls: 0.0566, s2.acc: 93.8497, s2.loss_bbox: 0.0485, loss: 0.8547
2021-10-03 17:42:27,715 - mmdet - INFO - Epoch [2][250/1221]	lr: 1.000e-03, eta: 1:26:44, time: 1.137, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0532, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.2805, s0.acc: 92.5889, s0.loss_bbox: 0.1271, s1.loss_cls: 0.1315, s1.acc: 92.9769, s1.loss_bbox: 0.1022, s2.loss_cls: 0.0586, s2.acc: 93.7806, s2.loss_bbox: 0.0499, loss: 0.8367
2021-10-03 17:43:24,281 - mmdet - INFO - Epoch [2][300/1221]	lr: 1.000e-03, eta: 1:25:49, time: 1.131, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0498, loss_rpn_bbox: 0.0288, s0.loss_cls: 0.2583, s0.acc: 92.9658, s0.loss_bbox: 0.1189, s1.loss_cls: 0.1263, s1.acc: 93.1157, s1.loss_bbox: 0.0983, s2.loss_cls: 0.0566, s2.acc: 93.8698, s2.loss_bbox: 0.0488, loss: 0.7859
2021-10-03 17:44:20,833 - mmdet - INFO - Epoch [2][350/1221]	lr: 1.000e-03, eta: 1:24:54, time: 1.131, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0501, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.2563, s0.acc: 92.7559, s0.loss_bbox: 0.1260, s1.loss_cls: 0.1256, s1.acc: 92.9810, s1.loss_bbox: 0.1060, s2.loss_cls: 0.0573, s2.acc: 93.8100, s2.loss_bbox: 0.0505, loss: 0.8078
2021-10-03 17:45:17,727 - mmdet - INFO - Epoch [2][400/1221]	lr: 1.000e-03, eta: 1:24:00, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0431, loss_rpn_bbox: 0.0241, s0.loss_cls: 0.2561, s0.acc: 92.7822, s0.loss_bbox: 0.1232, s1.loss_cls: 0.1232, s1.acc: 92.9201, s1.loss_bbox: 0.1065, s2.loss_cls: 0.0562, s2.acc: 93.5675, s2.loss_bbox: 0.0523, loss: 0.7846
2021-10-03 17:46:14,516 - mmdet - INFO - Epoch [2][450/1221]	lr: 1.000e-03, eta: 1:23:05, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0611, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.3037, s0.acc: 91.4658, s0.loss_bbox: 0.1493, s1.loss_cls: 0.1467, s1.acc: 92.0247, s1.loss_bbox: 0.1206, s2.loss_cls: 0.0643, s2.acc: 93.2127, s2.loss_bbox: 0.0547, loss: 0.9389
2021-10-03 17:47:11,242 - mmdet - INFO - Epoch [2][500/1221]	lr: 1.000e-03, eta: 1:22:10, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0560, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.3032, s0.acc: 91.6533, s0.loss_bbox: 0.1532, s1.loss_cls: 0.1397, s1.acc: 92.1851, s1.loss_bbox: 0.1159, s2.loss_cls: 0.0623, s2.acc: 92.8894, s2.loss_bbox: 0.0554, loss: 0.9249
2021-10-03 17:48:08,263 - mmdet - INFO - Epoch [2][550/1221]	lr: 1.000e-03, eta: 1:21:16, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0473, loss_rpn_bbox: 0.0376, s0.loss_cls: 0.3023, s0.acc: 91.6982, s0.loss_bbox: 0.1419, s1.loss_cls: 0.1472, s1.acc: 91.7402, s1.loss_bbox: 0.1205, s2.loss_cls: 0.0670, s2.acc: 92.5460, s2.loss_bbox: 0.0604, loss: 0.9242
2021-10-03 17:49:05,291 - mmdet - INFO - Epoch [2][600/1221]	lr: 1.000e-03, eta: 1:20:22, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0451, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.2993, s0.acc: 91.9258, s0.loss_bbox: 0.1474, s1.loss_cls: 0.1428, s1.acc: 92.1633, s1.loss_bbox: 0.1217, s2.loss_cls: 0.0633, s2.acc: 92.9064, s2.loss_bbox: 0.0575, loss: 0.9117
2021-10-03 17:50:01,807 - mmdet - INFO - Epoch [2][650/1221]	lr: 1.000e-03, eta: 1:19:26, time: 1.130, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0485, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.2972, s0.acc: 91.4072, s0.loss_bbox: 0.1430, s1.loss_cls: 0.1489, s1.acc: 91.2993, s1.loss_bbox: 0.1256, s2.loss_cls: 0.0672, s2.acc: 92.3207, s2.loss_bbox: 0.0591, loss: 0.9213
2021-10-03 17:50:58,679 - mmdet - INFO - Epoch [2][700/1221]	lr: 1.000e-03, eta: 1:18:31, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0417, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.2569, s0.acc: 92.6143, s0.loss_bbox: 0.1214, s1.loss_cls: 0.1318, s1.acc: 92.3355, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0609, s2.acc: 93.0341, s2.loss_bbox: 0.0565, loss: 0.8087
2021-10-03 17:51:55,710 - mmdet - INFO - Epoch [2][750/1221]	lr: 1.000e-03, eta: 1:17:36, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0502, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.2841, s0.acc: 91.9609, s0.loss_bbox: 0.1401, s1.loss_cls: 0.1391, s1.acc: 92.2157, s1.loss_bbox: 0.1168, s2.loss_cls: 0.0635, s2.acc: 92.8108, s2.loss_bbox: 0.0576, loss: 0.8874
2021-10-03 17:52:52,463 - mmdet - INFO - Epoch [2][800/1221]	lr: 1.000e-03, eta: 1:16:41, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0421, loss_rpn_bbox: 0.0308, s0.loss_cls: 0.2571, s0.acc: 92.7881, s0.loss_bbox: 0.1227, s1.loss_cls: 0.1298, s1.acc: 92.4776, s1.loss_bbox: 0.1039, s2.loss_cls: 0.0601, s2.acc: 93.1583, s2.loss_bbox: 0.0524, loss: 0.7991
2021-10-03 17:53:49,031 - mmdet - INFO - Epoch [2][850/1221]	lr: 1.000e-03, eta: 1:15:45, time: 1.131, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0489, loss_rpn_bbox: 0.0365, s0.loss_cls: 0.2852, s0.acc: 91.8770, s0.loss_bbox: 0.1402, s1.loss_cls: 0.1384, s1.acc: 91.9964, s1.loss_bbox: 0.1177, s2.loss_cls: 0.0637, s2.acc: 92.5791, s2.loss_bbox: 0.0608, loss: 0.8912
2021-10-03 17:54:45,534 - mmdet - INFO - Epoch [2][900/1221]	lr: 1.000e-03, eta: 1:14:49, time: 1.130, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0505, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.2824, s0.acc: 92.2529, s0.loss_bbox: 0.1322, s1.loss_cls: 0.1377, s1.acc: 92.3479, s1.loss_bbox: 0.1108, s2.loss_cls: 0.0626, s2.acc: 93.1556, s2.loss_bbox: 0.0564, loss: 0.8645
2021-10-03 17:55:42,663 - mmdet - INFO - Epoch [2][950/1221]	lr: 1.000e-03, eta: 1:13:54, time: 1.143, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0497, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.2482, s0.acc: 93.0000, s0.loss_bbox: 0.1169, s1.loss_cls: 0.1261, s1.acc: 92.6966, s1.loss_bbox: 0.1040, s2.loss_cls: 0.0590, s2.acc: 93.2554, s2.loss_bbox: 0.0507, loss: 0.7880
2021-10-03 17:56:39,388 - mmdet - INFO - Epoch [2][1000/1221]	lr: 1.000e-03, eta: 1:12:58, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0430, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.2762, s0.acc: 92.2500, s0.loss_bbox: 0.1315, s1.loss_cls: 0.1377, s1.acc: 92.0830, s1.loss_bbox: 0.1163, s2.loss_cls: 0.0635, s2.acc: 92.4816, s2.loss_bbox: 0.0584, loss: 0.8589
2021-10-03 17:57:35,669 - mmdet - INFO - Epoch [2][1050/1221]	lr: 1.000e-03, eta: 1:12:02, time: 1.126, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0584, loss_rpn_bbox: 0.0311, s0.loss_cls: 0.2616, s0.acc: 92.5713, s0.loss_bbox: 0.1217, s1.loss_cls: 0.1311, s1.acc: 92.5080, s1.loss_bbox: 0.1064, s2.loss_cls: 0.0618, s2.acc: 93.0228, s2.loss_bbox: 0.0558, loss: 0.8279
2021-10-03 17:58:32,455 - mmdet - INFO - Epoch [2][1100/1221]	lr: 1.000e-03, eta: 1:11:06, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0464, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.2707, s0.acc: 92.3467, s0.loss_bbox: 0.1251, s1.loss_cls: 0.1372, s1.acc: 91.9828, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0642, s2.acc: 92.4110, s2.loss_bbox: 0.0573, loss: 0.8449
2021-10-03 17:59:29,128 - mmdet - INFO - Epoch [2][1150/1221]	lr: 1.000e-03, eta: 1:10:10, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0483, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.2605, s0.acc: 92.6689, s0.loss_bbox: 0.1234, s1.loss_cls: 0.1287, s1.acc: 92.5927, s1.loss_bbox: 0.1075, s2.loss_cls: 0.0600, s2.acc: 93.1138, s2.loss_bbox: 0.0560, loss: 0.8210
2021-10-03 18:00:26,212 - mmdet - INFO - Epoch [2][1200/1221]	lr: 1.000e-03, eta: 1:09:15, time: 1.142, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0407, loss_rpn_bbox: 0.0340, s0.loss_cls: 0.2641, s0.acc: 92.5420, s0.loss_bbox: 0.1199, s1.loss_cls: 0.1328, s1.acc: 92.2543, s1.loss_bbox: 0.1093, s2.loss_cls: 0.0632, s2.acc: 92.4607, s2.loss_bbox: 0.0596, loss: 0.8238
2021-10-03 18:00:50,072 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-10-03 18:09:31,193 - mmdet - INFO - Evaluating bbox...
2021-10-03 18:09:49,858 - mmdet - INFO - Exp name: final2.py
2021-10-03 18:09:49,858 - mmdet - INFO - Epoch(val) [2][4883]	bbox_mAP: 0.1830, bbox_mAP_50: 0.3120, bbox_mAP_75: 0.1900, bbox_mAP_s: 0.0030, bbox_mAP_m: 0.0210, bbox_mAP_l: 0.2240, bbox_mAP_copypaste: 0.183 0.312 0.190 0.003 0.021 0.224
2021-10-03 18:10:49,091 - mmdet - INFO - Epoch [3][50/1221]	lr: 1.000e-03, eta: 1:07:24, time: 1.184, data_time: 0.057, memory: 12558, loss_rpn_cls: 0.0476, loss_rpn_bbox: 0.0403, s0.loss_cls: 0.2617, s0.acc: 92.4385, s0.loss_bbox: 0.1206, s1.loss_cls: 0.1356, s1.acc: 92.0302, s1.loss_bbox: 0.1069, s2.loss_cls: 0.0659, s2.acc: 92.0367, s2.loss_bbox: 0.0572, loss: 0.8357
2021-10-03 18:11:46,179 - mmdet - INFO - Epoch [3][100/1221]	lr: 1.000e-03, eta: 1:06:30, time: 1.142, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0398, loss_rpn_bbox: 0.0284, s0.loss_cls: 0.2361, s0.acc: 92.9297, s0.loss_bbox: 0.1178, s1.loss_cls: 0.1205, s1.acc: 92.5818, s1.loss_bbox: 0.1057, s2.loss_cls: 0.0584, s2.acc: 92.9007, s2.loss_bbox: 0.0566, loss: 0.7632
2021-10-03 18:12:43,176 - mmdet - INFO - Epoch [3][150/1221]	lr: 1.000e-03, eta: 1:05:35, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0357, loss_rpn_bbox: 0.0290, s0.loss_cls: 0.2550, s0.acc: 92.3994, s0.loss_bbox: 0.1251, s1.loss_cls: 0.1338, s1.acc: 92.0296, s1.loss_bbox: 0.1142, s2.loss_cls: 0.0637, s2.acc: 92.3308, s2.loss_bbox: 0.0632, loss: 0.8197
2021-10-03 18:13:40,194 - mmdet - INFO - Epoch [3][200/1221]	lr: 1.000e-03, eta: 1:04:41, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0395, loss_rpn_bbox: 0.0310, s0.loss_cls: 0.2509, s0.acc: 92.4453, s0.loss_bbox: 0.1267, s1.loss_cls: 0.1281, s1.acc: 92.1597, s1.loss_bbox: 0.1154, s2.loss_cls: 0.0611, s2.acc: 92.7817, s2.loss_bbox: 0.0618, loss: 0.8146
2021-10-03 18:14:37,017 - mmdet - INFO - Epoch [3][250/1221]	lr: 1.000e-03, eta: 1:03:46, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0365, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.2640, s0.acc: 92.0957, s0.loss_bbox: 0.1299, s1.loss_cls: 0.1341, s1.acc: 91.9744, s1.loss_bbox: 0.1156, s2.loss_cls: 0.0627, s2.acc: 92.4496, s2.loss_bbox: 0.0622, loss: 0.8357
2021-10-03 18:15:34,053 - mmdet - INFO - Epoch [3][300/1221]	lr: 1.000e-03, eta: 1:02:51, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0405, loss_rpn_bbox: 0.0276, s0.loss_cls: 0.2386, s0.acc: 92.9688, s0.loss_bbox: 0.1094, s1.loss_cls: 0.1225, s1.acc: 92.6774, s1.loss_bbox: 0.1042, s2.loss_cls: 0.0596, s2.acc: 92.9412, s2.loss_bbox: 0.0592, loss: 0.7617
2021-10-03 18:16:31,064 - mmdet - INFO - Epoch [3][350/1221]	lr: 1.000e-03, eta: 1:01:56, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0414, loss_rpn_bbox: 0.0288, s0.loss_cls: 0.2397, s0.acc: 92.9717, s0.loss_bbox: 0.1113, s1.loss_cls: 0.1257, s1.acc: 92.5720, s1.loss_bbox: 0.1030, s2.loss_cls: 0.0630, s2.acc: 92.7251, s2.loss_bbox: 0.0569, loss: 0.7698
2021-10-03 18:17:27,599 - mmdet - INFO - Epoch [3][400/1221]	lr: 1.000e-03, eta: 1:01:00, time: 1.131, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0406, loss_rpn_bbox: 0.0373, s0.loss_cls: 0.2602, s0.acc: 92.5645, s0.loss_bbox: 0.1278, s1.loss_cls: 0.1328, s1.acc: 92.2055, s1.loss_bbox: 0.1157, s2.loss_cls: 0.0615, s2.acc: 92.8285, s2.loss_bbox: 0.0606, loss: 0.8365
2021-10-03 18:18:24,406 - mmdet - INFO - Epoch [3][450/1221]	lr: 1.000e-03, eta: 1:00:05, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0410, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.2513, s0.acc: 92.7441, s0.loss_bbox: 0.1200, s1.loss_cls: 0.1235, s1.acc: 92.7144, s1.loss_bbox: 0.1030, s2.loss_cls: 0.0590, s2.acc: 93.0834, s2.loss_bbox: 0.0542, loss: 0.7841
2021-10-03 18:19:21,149 - mmdet - INFO - Epoch [3][500/1221]	lr: 1.000e-03, eta: 0:59:09, time: 1.135, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0361, loss_rpn_bbox: 0.0281, s0.loss_cls: 0.2491, s0.acc: 92.6963, s0.loss_bbox: 0.1181, s1.loss_cls: 0.1260, s1.acc: 92.3875, s1.loss_bbox: 0.1083, s2.loss_cls: 0.0598, s2.acc: 92.9089, s2.loss_bbox: 0.0570, loss: 0.7826
2021-10-03 18:20:18,047 - mmdet - INFO - Epoch [3][550/1221]	lr: 1.000e-03, eta: 0:58:14, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0473, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.2815, s0.acc: 91.9463, s0.loss_bbox: 0.1380, s1.loss_cls: 0.1371, s1.acc: 92.0000, s1.loss_bbox: 0.1192, s2.loss_cls: 0.0640, s2.acc: 92.7045, s2.loss_bbox: 0.0606, loss: 0.8784
2021-10-03 18:21:15,093 - mmdet - INFO - Epoch [3][600/1221]	lr: 1.000e-03, eta: 0:57:19, time: 1.141, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0464, loss_rpn_bbox: 0.0362, s0.loss_cls: 0.2790, s0.acc: 91.7588, s0.loss_bbox: 0.1424, s1.loss_cls: 0.1395, s1.acc: 91.6497, s1.loss_bbox: 0.1234, s2.loss_cls: 0.0658, s2.acc: 92.2724, s2.loss_bbox: 0.0656, loss: 0.8983
2021-10-03 18:22:11,856 - mmdet - INFO - Epoch [3][650/1221]	lr: 1.000e-03, eta: 0:56:23, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0412, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.2625, s0.acc: 92.3389, s0.loss_bbox: 0.1259, s1.loss_cls: 0.1307, s1.acc: 92.3274, s1.loss_bbox: 0.1119, s2.loss_cls: 0.0618, s2.acc: 92.5456, s2.loss_bbox: 0.0594, loss: 0.8288
2021-10-03 18:23:09,089 - mmdet - INFO - Epoch [3][700/1221]	lr: 1.000e-03, eta: 0:55:28, time: 1.145, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0386, loss_rpn_bbox: 0.0341, s0.loss_cls: 0.2672, s0.acc: 91.9912, s0.loss_bbox: 0.1241, s1.loss_cls: 0.1369, s1.acc: 91.9724, s1.loss_bbox: 0.1160, s2.loss_cls: 0.0652, s2.acc: 92.4642, s2.loss_bbox: 0.0642, loss: 0.8462
2021-10-03 18:24:06,191 - mmdet - INFO - Epoch [3][750/1221]	lr: 1.000e-03, eta: 0:54:33, time: 1.142, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0361, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.2442, s0.acc: 92.8027, s0.loss_bbox: 0.1153, s1.loss_cls: 0.1317, s1.acc: 92.2609, s1.loss_bbox: 0.1132, s2.loss_cls: 0.0632, s2.acc: 92.2769, s2.loss_bbox: 0.0604, loss: 0.7902
2021-10-03 18:25:02,947 - mmdet - INFO - Epoch [3][800/1221]	lr: 1.000e-03, eta: 0:53:37, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0326, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2391, s0.acc: 93.0273, s0.loss_bbox: 0.1104, s1.loss_cls: 0.1246, s1.acc: 92.6504, s1.loss_bbox: 0.1012, s2.loss_cls: 0.0609, s2.acc: 92.8329, s2.loss_bbox: 0.0563, loss: 0.7525
2021-10-03 18:25:59,250 - mmdet - INFO - Epoch [3][850/1221]	lr: 1.000e-03, eta: 0:52:41, time: 1.126, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0466, loss_rpn_bbox: 0.0367, s0.loss_cls: 0.2733, s0.acc: 92.1416, s0.loss_bbox: 0.1274, s1.loss_cls: 0.1378, s1.acc: 91.8657, s1.loss_bbox: 0.1167, s2.loss_cls: 0.0648, s2.acc: 92.4825, s2.loss_bbox: 0.0621, loss: 0.8655
2021-10-03 18:26:56,148 - mmdet - INFO - Epoch [3][900/1221]	lr: 1.000e-03, eta: 0:51:46, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0399, loss_rpn_bbox: 0.0311, s0.loss_cls: 0.2422, s0.acc: 92.7666, s0.loss_bbox: 0.1094, s1.loss_cls: 0.1302, s1.acc: 92.1419, s1.loss_bbox: 0.1048, s2.loss_cls: 0.0625, s2.acc: 92.4339, s2.loss_bbox: 0.0576, loss: 0.7777
2021-10-03 18:27:53,103 - mmdet - INFO - Epoch [3][950/1221]	lr: 1.000e-03, eta: 0:50:50, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0408, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.2449, s0.acc: 92.9395, s0.loss_bbox: 0.1092, s1.loss_cls: 0.1262, s1.acc: 92.5501, s1.loss_bbox: 0.1013, s2.loss_cls: 0.0612, s2.acc: 92.5491, s2.loss_bbox: 0.0566, loss: 0.7714
2021-10-03 18:28:49,935 - mmdet - INFO - Epoch [3][1000/1221]	lr: 1.000e-03, eta: 0:49:54, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0363, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.2458, s0.acc: 92.8350, s0.loss_bbox: 0.1091, s1.loss_cls: 0.1267, s1.acc: 92.4162, s1.loss_bbox: 0.1029, s2.loss_cls: 0.0623, s2.acc: 92.4718, s2.loss_bbox: 0.0581, loss: 0.7670
2021-10-03 18:29:46,525 - mmdet - INFO - Epoch [3][1050/1221]	lr: 1.000e-03, eta: 0:48:58, time: 1.132, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0549, loss_rpn_bbox: 0.0399, s0.loss_cls: 0.3090, s0.acc: 91.0771, s0.loss_bbox: 0.1471, s1.loss_cls: 0.1548, s1.acc: 90.8769, s1.loss_bbox: 0.1323, s2.loss_cls: 0.0741, s2.acc: 91.3514, s2.loss_bbox: 0.0694, loss: 0.9816
2021-10-03 18:30:43,277 - mmdet - INFO - Epoch [3][1100/1221]	lr: 1.000e-03, eta: 0:48:02, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0437, loss_rpn_bbox: 0.0438, s0.loss_cls: 0.2829, s0.acc: 91.6768, s0.loss_bbox: 0.1363, s1.loss_cls: 0.1424, s1.acc: 91.4901, s1.loss_bbox: 0.1189, s2.loss_cls: 0.0681, s2.acc: 91.9015, s2.loss_bbox: 0.0621, loss: 0.8982
2021-10-03 18:31:40,169 - mmdet - INFO - Epoch [3][1150/1221]	lr: 1.000e-03, eta: 0:47:07, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0418, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.2592, s0.acc: 92.5918, s0.loss_bbox: 0.1148, s1.loss_cls: 0.1311, s1.acc: 92.3932, s1.loss_bbox: 0.1013, s2.loss_cls: 0.0614, s2.acc: 92.5695, s2.loss_bbox: 0.0559, loss: 0.7917
2021-10-03 18:32:37,063 - mmdet - INFO - Epoch [3][1200/1221]	lr: 1.000e-03, eta: 0:46:11, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0450, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.2646, s0.acc: 92.4248, s0.loss_bbox: 0.1286, s1.loss_cls: 0.1320, s1.acc: 92.3641, s1.loss_bbox: 0.1146, s2.loss_cls: 0.0617, s2.acc: 92.7716, s2.loss_bbox: 0.0586, loss: 0.8329
2021-10-03 18:33:00,950 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-10-03 18:41:44,889 - mmdet - INFO - Evaluating bbox...
2021-10-03 18:42:08,298 - mmdet - INFO - Exp name: final2.py
2021-10-03 18:42:08,299 - mmdet - INFO - Epoch(val) [3][4883]	bbox_mAP: 0.2580, bbox_mAP_50: 0.4170, bbox_mAP_75: 0.2780, bbox_mAP_s: 0.0040, bbox_mAP_m: 0.0650, bbox_mAP_l: 0.3080, bbox_mAP_copypaste: 0.258 0.417 0.278 0.004 0.065 0.308
2021-10-03 18:43:07,357 - mmdet - INFO - Epoch [4][50/1221]	lr: 1.000e-03, eta: 0:44:37, time: 1.181, data_time: 0.057, memory: 12558, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0374, s0.loss_cls: 0.2509, s0.acc: 92.2666, s0.loss_bbox: 0.1268, s1.loss_cls: 0.1280, s1.acc: 92.2056, s1.loss_bbox: 0.1162, s2.loss_cls: 0.0638, s2.acc: 92.2225, s2.loss_bbox: 0.0646, loss: 0.8218
2021-10-03 18:44:04,308 - mmdet - INFO - Epoch [4][100/1221]	lr: 1.000e-03, eta: 0:43:42, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0392, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.2337, s0.acc: 93.1035, s0.loss_bbox: 0.1090, s1.loss_cls: 0.1210, s1.acc: 92.8300, s1.loss_bbox: 0.1044, s2.loss_cls: 0.0610, s2.acc: 92.7830, s2.loss_bbox: 0.0602, loss: 0.7564
2021-10-03 18:45:01,220 - mmdet - INFO - Epoch [4][150/1221]	lr: 1.000e-03, eta: 0:42:47, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0365, loss_rpn_bbox: 0.0364, s0.loss_cls: 0.2603, s0.acc: 92.1865, s0.loss_bbox: 0.1298, s1.loss_cls: 0.1309, s1.acc: 92.1921, s1.loss_bbox: 0.1165, s2.loss_cls: 0.0649, s2.acc: 92.0772, s2.loss_bbox: 0.0634, loss: 0.8388
2021-10-03 18:45:58,176 - mmdet - INFO - Epoch [4][200/1221]	lr: 1.000e-03, eta: 0:41:51, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0421, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2751, s0.acc: 91.5645, s0.loss_bbox: 0.1342, s1.loss_cls: 0.1403, s1.acc: 91.2908, s1.loss_bbox: 0.1204, s2.loss_cls: 0.0677, s2.acc: 91.6391, s2.loss_bbox: 0.0636, loss: 0.8779
2021-10-03 18:46:55,047 - mmdet - INFO - Epoch [4][250/1221]	lr: 1.000e-03, eta: 0:40:56, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0382, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.2413, s0.acc: 92.6934, s0.loss_bbox: 0.1108, s1.loss_cls: 0.1238, s1.acc: 92.3529, s1.loss_bbox: 0.1023, s2.loss_cls: 0.0625, s2.acc: 92.3134, s2.loss_bbox: 0.0582, loss: 0.7637
2021-10-03 18:47:51,832 - mmdet - INFO - Epoch [4][300/1221]	lr: 1.000e-03, eta: 0:40:00, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0410, loss_rpn_bbox: 0.0342, s0.loss_cls: 0.2684, s0.acc: 91.9570, s0.loss_bbox: 0.1275, s1.loss_cls: 0.1349, s1.acc: 91.9378, s1.loss_bbox: 0.1121, s2.loss_cls: 0.0651, s2.acc: 92.2225, s2.loss_bbox: 0.0612, loss: 0.8444
2021-10-03 18:48:48,745 - mmdet - INFO - Epoch [4][350/1221]	lr: 1.000e-03, eta: 0:39:04, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0316, loss_rpn_bbox: 0.0306, s0.loss_cls: 0.2196, s0.acc: 93.3174, s0.loss_bbox: 0.1079, s1.loss_cls: 0.1112, s1.acc: 93.0462, s1.loss_bbox: 0.1024, s2.loss_cls: 0.0547, s2.acc: 93.1841, s2.loss_bbox: 0.0573, loss: 0.7153
2021-10-03 18:49:45,164 - mmdet - INFO - Epoch [4][400/1221]	lr: 1.000e-03, eta: 0:38:09, time: 1.128, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0321, loss_rpn_bbox: 0.0289, s0.loss_cls: 0.2151, s0.acc: 93.4082, s0.loss_bbox: 0.1052, s1.loss_cls: 0.1118, s1.acc: 93.1689, s1.loss_bbox: 0.1001, s2.loss_cls: 0.0554, s2.acc: 93.1043, s2.loss_bbox: 0.0561, loss: 0.7048
2021-10-03 18:50:41,809 - mmdet - INFO - Epoch [4][450/1221]	lr: 1.000e-03, eta: 0:37:13, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0353, loss_rpn_bbox: 0.0309, s0.loss_cls: 0.2498, s0.acc: 92.5303, s0.loss_bbox: 0.1200, s1.loss_cls: 0.1272, s1.acc: 92.3529, s1.loss_bbox: 0.1130, s2.loss_cls: 0.0619, s2.acc: 92.5452, s2.loss_bbox: 0.0612, loss: 0.7993
2021-10-03 18:51:38,479 - mmdet - INFO - Epoch [4][500/1221]	lr: 1.000e-03, eta: 0:36:17, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.2266, s0.acc: 93.2783, s0.loss_bbox: 0.1015, s1.loss_cls: 0.1171, s1.acc: 92.8988, s1.loss_bbox: 0.0988, s2.loss_cls: 0.0576, s2.acc: 93.1752, s2.loss_bbox: 0.0574, loss: 0.7170
2021-10-03 18:52:35,171 - mmdet - INFO - Epoch [4][550/1221]	lr: 1.000e-03, eta: 0:35:21, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0387, loss_rpn_bbox: 0.0284, s0.loss_cls: 0.2355, s0.acc: 92.8506, s0.loss_bbox: 0.1120, s1.loss_cls: 0.1236, s1.acc: 92.5333, s1.loss_bbox: 0.1073, s2.loss_cls: 0.0618, s2.acc: 92.3148, s2.loss_bbox: 0.0633, loss: 0.7706
2021-10-03 18:53:32,077 - mmdet - INFO - Epoch [4][600/1221]	lr: 1.000e-03, eta: 0:34:26, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.2425, s0.acc: 92.7109, s0.loss_bbox: 0.1194, s1.loss_cls: 0.1218, s1.acc: 92.6619, s1.loss_bbox: 0.1093, s2.loss_cls: 0.0585, s2.acc: 92.9432, s2.loss_bbox: 0.0596, loss: 0.7713
2021-10-03 18:54:29,002 - mmdet - INFO - Epoch [4][650/1221]	lr: 1.000e-03, eta: 0:33:30, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0330, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.2265, s0.acc: 93.1191, s0.loss_bbox: 0.1109, s1.loss_cls: 0.1162, s1.acc: 92.9086, s1.loss_bbox: 0.1032, s2.loss_cls: 0.0568, s2.acc: 92.9543, s2.loss_bbox: 0.0601, loss: 0.7364
2021-10-03 18:55:25,921 - mmdet - INFO - Epoch [4][700/1221]	lr: 1.000e-03, eta: 0:32:34, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0492, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.2642, s0.acc: 92.1025, s0.loss_bbox: 0.1276, s1.loss_cls: 0.1306, s1.acc: 92.0716, s1.loss_bbox: 0.1139, s2.loss_cls: 0.0642, s2.acc: 92.2321, s2.loss_bbox: 0.0617, loss: 0.8441
2021-10-03 18:56:22,850 - mmdet - INFO - Epoch [4][750/1221]	lr: 1.000e-03, eta: 0:31:38, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0390, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.2565, s0.acc: 92.2344, s0.loss_bbox: 0.1262, s1.loss_cls: 0.1288, s1.acc: 92.0905, s1.loss_bbox: 0.1163, s2.loss_cls: 0.0615, s2.acc: 92.4598, s2.loss_bbox: 0.0645, loss: 0.8232
2021-10-03 18:57:19,568 - mmdet - INFO - Epoch [4][800/1221]	lr: 1.000e-03, eta: 0:30:42, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0353, loss_rpn_bbox: 0.0300, s0.loss_cls: 0.2419, s0.acc: 92.5605, s0.loss_bbox: 0.1153, s1.loss_cls: 0.1218, s1.acc: 92.5365, s1.loss_bbox: 0.1067, s2.loss_cls: 0.0603, s2.acc: 92.5795, s2.loss_bbox: 0.0600, loss: 0.7712
2021-10-03 18:58:16,720 - mmdet - INFO - Epoch [4][850/1221]	lr: 1.000e-03, eta: 0:29:47, time: 1.143, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0332, loss_rpn_bbox: 0.0255, s0.loss_cls: 0.2526, s0.acc: 92.3574, s0.loss_bbox: 0.1174, s1.loss_cls: 0.1318, s1.acc: 91.8989, s1.loss_bbox: 0.1097, s2.loss_cls: 0.0648, s2.acc: 91.9930, s2.loss_bbox: 0.0614, loss: 0.7965
2021-10-03 18:59:13,281 - mmdet - INFO - Epoch [4][900/1221]	lr: 1.000e-03, eta: 0:28:51, time: 1.131, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0307, loss_rpn_bbox: 0.0234, s0.loss_cls: 0.2424, s0.acc: 92.6494, s0.loss_bbox: 0.1121, s1.loss_cls: 0.1212, s1.acc: 92.6246, s1.loss_bbox: 0.1004, s2.loss_cls: 0.0588, s2.acc: 92.8103, s2.loss_bbox: 0.0582, loss: 0.7472
2021-10-03 19:00:10,211 - mmdet - INFO - Epoch [4][950/1221]	lr: 1.000e-03, eta: 0:27:55, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.2204, s0.acc: 93.2900, s0.loss_bbox: 0.1039, s1.loss_cls: 0.1121, s1.acc: 93.0104, s1.loss_bbox: 0.0951, s2.loss_cls: 0.0550, s2.acc: 93.1856, s2.loss_bbox: 0.0527, loss: 0.7033
2021-10-03 19:01:07,145 - mmdet - INFO - Epoch [4][1000/1221]	lr: 1.000e-03, eta: 0:26:59, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0319, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.2212, s0.acc: 93.3613, s0.loss_bbox: 0.1006, s1.loss_cls: 0.1135, s1.acc: 93.1783, s1.loss_bbox: 0.0943, s2.loss_cls: 0.0566, s2.acc: 93.1525, s2.loss_bbox: 0.0548, loss: 0.6993
2021-10-03 19:02:04,117 - mmdet - INFO - Epoch [4][1050/1221]	lr: 1.000e-03, eta: 0:26:03, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0397, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.2568, s0.acc: 92.2373, s0.loss_bbox: 0.1210, s1.loss_cls: 0.1303, s1.acc: 92.1918, s1.loss_bbox: 0.1132, s2.loss_cls: 0.0617, s2.acc: 92.4384, s2.loss_bbox: 0.0632, loss: 0.8175
2021-10-03 19:03:01,235 - mmdet - INFO - Epoch [4][1100/1221]	lr: 1.000e-03, eta: 0:25:07, time: 1.142, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0384, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.2617, s0.acc: 92.1855, s0.loss_bbox: 0.1166, s1.loss_cls: 0.1330, s1.acc: 91.9638, s1.loss_bbox: 0.1074, s2.loss_cls: 0.0647, s2.acc: 92.1574, s2.loss_bbox: 0.0627, loss: 0.8097
2021-10-03 19:03:58,038 - mmdet - INFO - Epoch [4][1150/1221]	lr: 1.000e-03, eta: 0:24:11, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0293, s0.loss_cls: 0.2533, s0.acc: 92.0117, s0.loss_bbox: 0.1208, s1.loss_cls: 0.1342, s1.acc: 91.3039, s1.loss_bbox: 0.1158, s2.loss_cls: 0.0661, s2.acc: 91.5699, s2.loss_bbox: 0.0681, loss: 0.8223
2021-10-03 19:04:54,749 - mmdet - INFO - Epoch [4][1200/1221]	lr: 1.000e-03, eta: 0:23:15, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0340, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.2384, s0.acc: 92.9365, s0.loss_bbox: 0.1128, s1.loss_cls: 0.1193, s1.acc: 93.0274, s1.loss_bbox: 0.1046, s2.loss_cls: 0.0568, s2.acc: 93.1062, s2.loss_bbox: 0.0590, loss: 0.7511
2021-10-03 19:05:18,656 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-10-03 19:14:00,494 - mmdet - INFO - Evaluating bbox...
2021-10-03 19:14:18,958 - mmdet - INFO - Exp name: final2.py
2021-10-03 19:14:18,958 - mmdet - INFO - Epoch(val) [4][4883]	bbox_mAP: 0.3000, bbox_mAP_50: 0.4770, bbox_mAP_75: 0.3260, bbox_mAP_s: 0.0050, bbox_mAP_m: 0.1000, bbox_mAP_l: 0.3530, bbox_mAP_copypaste: 0.300 0.477 0.326 0.005 0.100 0.353
2021-10-03 19:15:18,235 - mmdet - INFO - Epoch [5][50/1221]	lr: 1.000e-03, eta: 0:21:50, time: 1.185, data_time: 0.057, memory: 12558, loss_rpn_cls: 0.0314, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.2239, s0.acc: 93.2705, s0.loss_bbox: 0.1084, s1.loss_cls: 0.1132, s1.acc: 92.9630, s1.loss_bbox: 0.1017, s2.loss_cls: 0.0569, s2.acc: 92.8720, s2.loss_bbox: 0.0576, loss: 0.7199
2021-10-03 19:16:15,095 - mmdet - INFO - Epoch [5][100/1221]	lr: 1.000e-03, eta: 0:20:55, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0322, loss_rpn_bbox: 0.0316, s0.loss_cls: 0.2515, s0.acc: 92.0928, s0.loss_bbox: 0.1232, s1.loss_cls: 0.1275, s1.acc: 91.8614, s1.loss_bbox: 0.1155, s2.loss_cls: 0.0629, s2.acc: 92.0803, s2.loss_bbox: 0.0662, loss: 0.8105
2021-10-03 19:17:11,864 - mmdet - INFO - Epoch [5][150/1221]	lr: 1.000e-03, eta: 0:19:59, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0281, loss_rpn_bbox: 0.0256, s0.loss_cls: 0.2235, s0.acc: 93.1348, s0.loss_bbox: 0.1039, s1.loss_cls: 0.1140, s1.acc: 92.8048, s1.loss_bbox: 0.0940, s2.loss_cls: 0.0565, s2.acc: 93.0863, s2.loss_bbox: 0.0566, loss: 0.7020
2021-10-03 19:18:08,752 - mmdet - INFO - Epoch [5][200/1221]	lr: 1.000e-03, eta: 0:19:03, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0313, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.2281, s0.acc: 93.0000, s0.loss_bbox: 0.1075, s1.loss_cls: 0.1160, s1.acc: 92.6507, s1.loss_bbox: 0.1015, s2.loss_cls: 0.0583, s2.acc: 92.7069, s2.loss_bbox: 0.0575, loss: 0.7267
2021-10-03 19:19:05,593 - mmdet - INFO - Epoch [5][250/1221]	lr: 1.000e-03, eta: 0:18:07, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0297, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.2299, s0.acc: 92.7451, s0.loss_bbox: 0.1125, s1.loss_cls: 0.1173, s1.acc: 92.6038, s1.loss_bbox: 0.1076, s2.loss_cls: 0.0588, s2.acc: 92.6687, s2.loss_bbox: 0.0604, loss: 0.7430
2021-10-03 19:20:02,338 - mmdet - INFO - Epoch [5][300/1221]	lr: 1.000e-03, eta: 0:17:11, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0229, s0.loss_cls: 0.2137, s0.acc: 93.2822, s0.loss_bbox: 0.0968, s1.loss_cls: 0.1106, s1.acc: 93.0714, s1.loss_bbox: 0.0966, s2.loss_cls: 0.0579, s2.acc: 92.8237, s2.loss_bbox: 0.0580, loss: 0.6821
2021-10-03 19:20:59,081 - mmdet - INFO - Epoch [5][350/1221]	lr: 1.000e-03, eta: 0:16:15, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0312, loss_rpn_bbox: 0.0235, s0.loss_cls: 0.2113, s0.acc: 93.3701, s0.loss_bbox: 0.1067, s1.loss_cls: 0.1096, s1.acc: 93.0433, s1.loss_bbox: 0.0957, s2.loss_cls: 0.0536, s2.acc: 93.2088, s2.loss_bbox: 0.0527, loss: 0.6843
2021-10-03 19:21:56,034 - mmdet - INFO - Epoch [5][400/1221]	lr: 1.000e-03, eta: 0:15:20, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0308, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.2413, s0.acc: 92.7129, s0.loss_bbox: 0.1136, s1.loss_cls: 0.1219, s1.acc: 92.6172, s1.loss_bbox: 0.1043, s2.loss_cls: 0.0592, s2.acc: 92.7523, s2.loss_bbox: 0.0599, loss: 0.7562
2021-10-03 19:22:53,030 - mmdet - INFO - Epoch [5][450/1221]	lr: 1.000e-03, eta: 0:14:24, time: 1.140, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0274, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.2264, s0.acc: 93.0957, s0.loss_bbox: 0.1022, s1.loss_cls: 0.1132, s1.acc: 93.0911, s1.loss_bbox: 0.0933, s2.loss_cls: 0.0562, s2.acc: 92.9172, s2.loss_bbox: 0.0577, loss: 0.7028
2021-10-03 19:23:49,725 - mmdet - INFO - Epoch [5][500/1221]	lr: 1.000e-03, eta: 0:13:28, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0271, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.2115, s0.acc: 93.2842, s0.loss_bbox: 0.1047, s1.loss_cls: 0.1071, s1.acc: 93.0942, s1.loss_bbox: 0.1001, s2.loss_cls: 0.0541, s2.acc: 93.1260, s2.loss_bbox: 0.0591, loss: 0.6901
2021-10-03 19:24:46,423 - mmdet - INFO - Epoch [5][550/1221]	lr: 1.000e-03, eta: 0:12:32, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0320, loss_rpn_bbox: 0.0256, s0.loss_cls: 0.2281, s0.acc: 92.7998, s0.loss_bbox: 0.1170, s1.loss_cls: 0.1151, s1.acc: 92.5737, s1.loss_bbox: 0.1045, s2.loss_cls: 0.0575, s2.acc: 92.5314, s2.loss_bbox: 0.0594, loss: 0.7392
2021-10-03 19:25:42,594 - mmdet - INFO - Epoch [5][600/1221]	lr: 1.000e-03, eta: 0:11:36, time: 1.123, data_time: 0.010, memory: 12558, loss_rpn_cls: 0.0396, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2352, s0.acc: 92.8145, s0.loss_bbox: 0.1121, s1.loss_cls: 0.1188, s1.acc: 92.5152, s1.loss_bbox: 0.1023, s2.loss_cls: 0.0578, s2.acc: 92.9483, s2.loss_bbox: 0.0578, loss: 0.7510
2021-10-03 19:26:39,178 - mmdet - INFO - Epoch [5][650/1221]	lr: 1.000e-03, eta: 0:10:40, time: 1.132, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0333, loss_rpn_bbox: 0.0299, s0.loss_cls: 0.2501, s0.acc: 92.4170, s0.loss_bbox: 0.1215, s1.loss_cls: 0.1233, s1.acc: 92.4571, s1.loss_bbox: 0.1132, s2.loss_cls: 0.0603, s2.acc: 92.3690, s2.loss_bbox: 0.0621, loss: 0.7936
2021-10-03 19:27:36,108 - mmdet - INFO - Epoch [5][700/1221]	lr: 1.000e-03, eta: 0:09:44, time: 1.139, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0254, s0.loss_cls: 0.2223, s0.acc: 93.3428, s0.loss_bbox: 0.1046, s1.loss_cls: 0.1113, s1.acc: 93.1587, s1.loss_bbox: 0.0992, s2.loss_cls: 0.0537, s2.acc: 93.2262, s2.loss_bbox: 0.0560, loss: 0.7026
2021-10-03 19:28:32,803 - mmdet - INFO - Epoch [5][750/1221]	lr: 1.000e-03, eta: 0:08:48, time: 1.134, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0329, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.2276, s0.acc: 93.1680, s0.loss_bbox: 0.1103, s1.loss_cls: 0.1146, s1.acc: 93.1589, s1.loss_bbox: 0.1021, s2.loss_cls: 0.0553, s2.acc: 93.3958, s2.loss_bbox: 0.0590, loss: 0.7322
2021-10-03 19:29:29,471 - mmdet - INFO - Epoch [5][800/1221]	lr: 1.000e-03, eta: 0:07:52, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0328, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.2332, s0.acc: 92.8447, s0.loss_bbox: 0.1117, s1.loss_cls: 0.1172, s1.acc: 92.7675, s1.loss_bbox: 0.1040, s2.loss_cls: 0.0578, s2.acc: 92.8105, s2.loss_bbox: 0.0598, loss: 0.7462
2021-10-03 19:30:26,244 - mmdet - INFO - Epoch [5][850/1221]	lr: 1.000e-03, eta: 0:06:56, time: 1.135, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0299, loss_rpn_bbox: 0.0290, s0.loss_cls: 0.2327, s0.acc: 92.9824, s0.loss_bbox: 0.1039, s1.loss_cls: 0.1188, s1.acc: 92.7054, s1.loss_bbox: 0.0959, s2.loss_cls: 0.0587, s2.acc: 92.9677, s2.loss_bbox: 0.0556, loss: 0.7246
2021-10-03 19:31:23,133 - mmdet - INFO - Epoch [5][900/1221]	lr: 1.000e-03, eta: 0:06:00, time: 1.138, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0271, loss_rpn_bbox: 0.0232, s0.loss_cls: 0.2142, s0.acc: 93.3584, s0.loss_bbox: 0.1081, s1.loss_cls: 0.1073, s1.acc: 93.3001, s1.loss_bbox: 0.0976, s2.loss_cls: 0.0513, s2.acc: 93.6329, s2.loss_bbox: 0.0578, loss: 0.6866
2021-10-03 19:32:19,915 - mmdet - INFO - Epoch [5][950/1221]	lr: 1.000e-03, eta: 0:05:04, time: 1.136, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0405, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.2773, s0.acc: 91.3496, s0.loss_bbox: 0.1324, s1.loss_cls: 0.1379, s1.acc: 91.3947, s1.loss_bbox: 0.1203, s2.loss_cls: 0.0646, s2.acc: 92.0114, s2.loss_bbox: 0.0666, loss: 0.8724
2021-10-03 19:33:16,781 - mmdet - INFO - Epoch [5][1000/1221]	lr: 1.000e-03, eta: 0:04:07, time: 1.137, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0303, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.2321, s0.acc: 92.9111, s0.loss_bbox: 0.1138, s1.loss_cls: 0.1157, s1.acc: 92.7485, s1.loss_bbox: 0.1008, s2.loss_cls: 0.0570, s2.acc: 93.0968, s2.loss_bbox: 0.0578, loss: 0.7411
2021-10-03 19:34:13,419 - mmdet - INFO - Epoch [5][1050/1221]	lr: 1.000e-03, eta: 0:03:11, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0361, loss_rpn_bbox: 0.0259, s0.loss_cls: 0.2532, s0.acc: 92.3496, s0.loss_bbox: 0.1187, s1.loss_cls: 0.1271, s1.acc: 92.1934, s1.loss_bbox: 0.1105, s2.loss_cls: 0.0608, s2.acc: 92.5329, s2.loss_bbox: 0.0631, loss: 0.7954
2021-10-03 19:35:10,356 - mmdet - INFO - Epoch [5][1100/1221]	lr: 1.000e-03, eta: 0:02:15, time: 1.139, data_time: 0.012, memory: 12558, loss_rpn_cls: 0.0308, loss_rpn_bbox: 0.0299, s0.loss_cls: 0.2455, s0.acc: 92.4141, s0.loss_bbox: 0.1226, s1.loss_cls: 0.1200, s1.acc: 92.5059, s1.loss_bbox: 0.1115, s2.loss_cls: 0.0568, s2.acc: 93.0246, s2.loss_bbox: 0.0613, loss: 0.7783
2021-10-03 19:36:07,025 - mmdet - INFO - Epoch [5][1150/1221]	lr: 1.000e-03, eta: 0:01:19, time: 1.133, data_time: 0.011, memory: 12558, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0260, s0.loss_cls: 0.2302, s0.acc: 92.9004, s0.loss_bbox: 0.1096, s1.loss_cls: 0.1158, s1.acc: 92.7618, s1.loss_bbox: 0.1004, s2.loss_cls: 0.0554, s2.acc: 93.0787, s2.loss_bbox: 0.0570, loss: 0.7282
2021-10-03 19:37:03,969 - mmdet - INFO - Epoch [5][1200/1221]	lr: 1.000e-03, eta: 0:00:23, time: 1.139, data_time: 0.012, memory: 12558, loss_rpn_cls: 0.0347, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.2321, s0.acc: 92.7285, s0.loss_bbox: 0.1182, s1.loss_cls: 0.1169, s1.acc: 92.6292, s1.loss_bbox: 0.1069, s2.loss_cls: 0.0561, s2.acc: 92.9594, s2.loss_bbox: 0.0597, loss: 0.7525
2021-10-03 19:37:27,771 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-10-03 19:46:09,930 - mmdet - INFO - Evaluating bbox...
2021-10-03 19:46:31,722 - mmdet - INFO - Exp name: final2.py
2021-10-03 19:46:31,723 - mmdet - INFO - Epoch(val) [5][4883]	bbox_mAP: 0.3530, bbox_mAP_50: 0.5330, bbox_mAP_75: 0.3940, bbox_mAP_s: 0.0130, bbox_mAP_m: 0.1310, bbox_mAP_l: 0.4110, bbox_mAP_copypaste: 0.353 0.533 0.394 0.013 0.131 0.411
