2021-10-03 15:31:56,413 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.15.1+2577e37
------------------------------------------------------------

2021-10-03 15:31:56,916 - mmdet - INFO - Distributed training: False
2021-10-03 15:31:57,500 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '../dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../dataset/train.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../dataset/test.json',
        img_prefix='../dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip', flip_ratio=0.0),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/final1'
gpu_ids = range(0, 1)

2021-10-03 15:31:58,303 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2021-10-03 15:31:58,534 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-03 15:31:58,560 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-03 15:31:58,568 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-03 15:31:58,887 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-03 15:31:59,205 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-03 15:32:02,618 - mmdet - INFO - Start running, host: root@b4c81fddccab, work_dir: /opt/ml/detection/mmdetection/work_dirs/final1
2021-10-03 15:32:02,619 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-10-03 15:32:02,619 - mmdet - INFO - workflow: [('train', 1)], max: 5 epochs
2021-10-03 15:32:34,816 - mmdet - INFO - Epoch [1][50/1221]	lr: 9.890e-05, eta: 1:04:47, time: 0.642, data_time: 0.056, memory: 6666, loss_rpn_cls: 0.6803, loss_rpn_bbox: 0.0343, s0.loss_cls: 0.4459, s0.acc: 91.2754, s0.loss_bbox: 0.0561, s1.loss_cls: 0.4440, s1.acc: 71.4502, s1.loss_bbox: 0.0215, s2.loss_cls: 0.3791, s2.acc: 53.3643, s2.loss_bbox: 0.0040, loss: 2.0653
2021-10-03 15:33:05,287 - mmdet - INFO - Epoch [1][100/1221]	lr: 1.988e-04, eta: 1:02:37, time: 0.609, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.4401, loss_rpn_bbox: 0.0436, s0.loss_cls: 0.2944, s0.acc: 95.5840, s0.loss_bbox: 0.1227, s1.loss_cls: 0.0971, s1.acc: 97.8057, s1.loss_bbox: 0.0392, s2.loss_cls: 0.0453, s2.acc: 97.7285, s2.loss_bbox: 0.0084, loss: 1.0908
2021-10-03 15:33:35,472 - mmdet - INFO - Epoch [1][150/1221]	lr: 2.987e-04, eta: 1:01:22, time: 0.604, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.1686, loss_rpn_bbox: 0.0520, s0.loss_cls: 0.3194, s0.acc: 93.9932, s0.loss_bbox: 0.1611, s1.loss_cls: 0.0985, s1.acc: 97.3174, s1.loss_bbox: 0.0498, s2.loss_cls: 0.0282, s2.acc: 98.6514, s2.loss_bbox: 0.0095, loss: 0.8871
2021-10-03 15:34:05,780 - mmdet - INFO - Epoch [1][200/1221]	lr: 3.986e-04, eta: 1:00:33, time: 0.606, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1319, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.3214, s0.acc: 93.3906, s0.loss_bbox: 0.1640, s1.loss_cls: 0.1025, s1.acc: 96.7090, s1.loss_bbox: 0.0584, s2.loss_cls: 0.0300, s2.acc: 98.3691, s2.loss_bbox: 0.0104, loss: 0.8545
2021-10-03 15:34:35,830 - mmdet - INFO - Epoch [1][250/1221]	lr: 4.985e-04, eta: 0:59:45, time: 0.601, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1240, loss_rpn_bbox: 0.0445, s0.loss_cls: 0.3143, s0.acc: 93.3145, s0.loss_bbox: 0.1573, s1.loss_cls: 0.1060, s1.acc: 96.3438, s1.loss_bbox: 0.0636, s2.loss_cls: 0.0313, s2.acc: 98.1846, s2.loss_bbox: 0.0122, loss: 0.8532
2021-10-03 15:35:05,940 - mmdet - INFO - Epoch [1][300/1221]	lr: 5.984e-04, eta: 0:59:05, time: 0.602, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.1125, loss_rpn_bbox: 0.0427, s0.loss_cls: 0.2979, s0.acc: 93.6670, s0.loss_bbox: 0.1440, s1.loss_cls: 0.1067, s1.acc: 96.0986, s1.loss_bbox: 0.0679, s2.loss_cls: 0.0324, s2.acc: 98.0439, s2.loss_bbox: 0.0136, loss: 0.8177
2021-10-03 15:35:36,402 - mmdet - INFO - Epoch [1][350/1221]	lr: 6.983e-04, eta: 0:58:33, time: 0.609, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1086, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.2997, s0.acc: 93.1494, s0.loss_bbox: 0.1506, s1.loss_cls: 0.1125, s1.acc: 95.4961, s1.loss_bbox: 0.0767, s2.loss_cls: 0.0362, s2.acc: 97.6338, s2.loss_bbox: 0.0176, loss: 0.8378
2021-10-03 15:36:06,868 - mmdet - INFO - Epoch [1][400/1221]	lr: 7.982e-04, eta: 0:58:02, time: 0.609, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1046, loss_rpn_bbox: 0.0380, s0.loss_cls: 0.3109, s0.acc: 92.7793, s0.loss_bbox: 0.1617, s1.loss_cls: 0.1140, s1.acc: 95.2480, s1.loss_bbox: 0.0805, s2.loss_cls: 0.0376, s2.acc: 97.4365, s2.loss_bbox: 0.0194, loss: 0.8667
2021-10-03 15:36:37,212 - mmdet - INFO - Epoch [1][450/1221]	lr: 8.981e-04, eta: 0:57:29, time: 0.607, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1173, loss_rpn_bbox: 0.0450, s0.loss_cls: 0.3144, s0.acc: 92.5664, s0.loss_bbox: 0.1645, s1.loss_cls: 0.1202, s1.acc: 94.6973, s1.loss_bbox: 0.0876, s2.loss_cls: 0.0427, s2.acc: 96.9443, s2.loss_bbox: 0.0239, loss: 0.9157
2021-10-03 15:37:07,477 - mmdet - INFO - Epoch [1][500/1221]	lr: 9.980e-04, eta: 0:56:56, time: 0.605, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1187, loss_rpn_bbox: 0.0439, s0.loss_cls: 0.3379, s0.acc: 91.6621, s0.loss_bbox: 0.1795, s1.loss_cls: 0.1347, s1.acc: 93.7822, s1.loss_bbox: 0.1026, s2.loss_cls: 0.0479, s2.acc: 96.1943, s2.loss_bbox: 0.0301, loss: 0.9953
2021-10-03 15:37:37,385 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.000e-03, eta: 0:56:20, time: 0.598, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0884, loss_rpn_bbox: 0.0358, s0.loss_cls: 0.2771, s0.acc: 93.4268, s0.loss_bbox: 0.1389, s1.loss_cls: 0.1150, s1.acc: 94.6641, s1.loss_bbox: 0.0874, s2.loss_cls: 0.0453, s2.acc: 96.1543, s2.loss_bbox: 0.0321, loss: 0.8199
2021-10-03 15:38:07,619 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.000e-03, eta: 0:55:47, time: 0.605, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.1034, loss_rpn_bbox: 0.0481, s0.loss_cls: 0.3183, s0.acc: 91.5840, s0.loss_bbox: 0.1802, s1.loss_cls: 0.1409, s1.acc: 92.8779, s1.loss_bbox: 0.1157, s2.loss_cls: 0.0559, s2.acc: 95.0146, s2.loss_bbox: 0.0415, loss: 1.0039
2021-10-03 15:38:37,890 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.000e-03, eta: 0:55:16, time: 0.605, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0702, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.3111, s0.acc: 92.5664, s0.loss_bbox: 0.1556, s1.loss_cls: 0.1255, s1.acc: 94.1758, s1.loss_bbox: 0.0950, s2.loss_cls: 0.0480, s2.acc: 95.9385, s2.loss_bbox: 0.0342, loss: 0.8788
2021-10-03 15:39:08,331 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.000e-03, eta: 0:54:46, time: 0.609, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0577, loss_rpn_bbox: 0.0288, s0.loss_cls: 0.2768, s0.acc: 93.1191, s0.loss_bbox: 0.1372, s1.loss_cls: 0.1157, s1.acc: 94.2764, s1.loss_bbox: 0.0897, s2.loss_cls: 0.0476, s2.acc: 95.6279, s2.loss_bbox: 0.0364, loss: 0.7899
2021-10-03 15:39:38,745 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.000e-03, eta: 0:54:15, time: 0.608, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0991, loss_rpn_bbox: 0.0437, s0.loss_cls: 0.3539, s0.acc: 91.0205, s0.loss_bbox: 0.1813, s1.loss_cls: 0.1505, s1.acc: 92.5967, s1.loss_bbox: 0.1187, s2.loss_cls: 0.0598, s2.acc: 94.5449, s2.loss_bbox: 0.0445, loss: 1.0513
2021-10-03 15:40:09,233 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.000e-03, eta: 0:53:46, time: 0.610, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0771, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.3283, s0.acc: 91.5850, s0.loss_bbox: 0.1712, s1.loss_cls: 0.1469, s1.acc: 92.5879, s1.loss_bbox: 0.1204, s2.loss_cls: 0.0607, s2.acc: 94.2441, s2.loss_bbox: 0.0489, loss: 0.9874
2021-10-03 15:40:39,497 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.000e-03, eta: 0:53:14, time: 0.605, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0600, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.2931, s0.acc: 92.5771, s0.loss_bbox: 0.1450, s1.loss_cls: 0.1284, s1.acc: 93.5557, s1.loss_bbox: 0.1040, s2.loss_cls: 0.0502, s2.acc: 95.2471, s2.loss_bbox: 0.0417, loss: 0.8530
2021-10-03 15:41:09,874 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.000e-03, eta: 0:52:44, time: 0.608, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0660, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.3099, s0.acc: 92.2646, s0.loss_bbox: 0.1468, s1.loss_cls: 0.1340, s1.acc: 93.3193, s1.loss_bbox: 0.1014, s2.loss_cls: 0.0552, s2.acc: 94.5186, s2.loss_bbox: 0.0451, loss: 0.8933
2021-10-03 15:41:40,149 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.000e-03, eta: 0:52:13, time: 0.605, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0552, loss_rpn_bbox: 0.0275, s0.loss_cls: 0.2643, s0.acc: 93.2344, s0.loss_bbox: 0.1282, s1.loss_cls: 0.1212, s1.acc: 93.7539, s1.loss_bbox: 0.0968, s2.loss_cls: 0.0523, s2.acc: 94.8252, s2.loss_bbox: 0.0420, loss: 0.7875
2021-10-03 15:42:10,248 - mmdet - INFO - Exp name: final1.py
2021-10-03 15:42:10,249 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.000e-03, eta: 0:51:41, time: 0.602, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0803, loss_rpn_bbox: 0.0414, s0.loss_cls: 0.3336, s0.acc: 91.7041, s0.loss_bbox: 0.1691, s1.loss_cls: 0.1408, s1.acc: 93.1533, s1.loss_bbox: 0.1122, s2.loss_cls: 0.0547, s2.acc: 94.9512, s2.loss_bbox: 0.0432, loss: 0.9752
2021-10-03 15:42:40,645 - mmdet - INFO - Epoch [1][1050/1221]	lr: 1.000e-03, eta: 0:51:11, time: 0.608, data_time: 0.014, memory: 6666, loss_rpn_cls: 0.0638, loss_rpn_bbox: 0.0377, s0.loss_cls: 0.3141, s0.acc: 91.5664, s0.loss_bbox: 0.1600, s1.loss_cls: 0.1466, s1.acc: 92.0649, s1.loss_bbox: 0.1242, s2.loss_cls: 0.0630, s2.acc: 93.4098, s2.loss_bbox: 0.0539, loss: 0.9632
2021-10-03 15:43:11,100 - mmdet - INFO - Epoch [1][1100/1221]	lr: 1.000e-03, eta: 0:50:41, time: 0.609, data_time: 0.014, memory: 6666, loss_rpn_cls: 0.0668, loss_rpn_bbox: 0.0325, s0.loss_cls: 0.3050, s0.acc: 92.3145, s0.loss_bbox: 0.1441, s1.loss_cls: 0.1403, s1.acc: 92.7646, s1.loss_bbox: 0.1091, s2.loss_cls: 0.0608, s2.acc: 93.8682, s2.loss_bbox: 0.0507, loss: 0.9093
2021-10-03 15:43:41,659 - mmdet - INFO - Epoch [1][1150/1221]	lr: 1.000e-03, eta: 0:50:11, time: 0.611, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0678, loss_rpn_bbox: 0.0378, s0.loss_cls: 0.2673, s0.acc: 92.9150, s0.loss_bbox: 0.1327, s1.loss_cls: 0.1232, s1.acc: 93.3506, s1.loss_bbox: 0.1014, s2.loss_cls: 0.0536, s2.acc: 94.4717, s2.loss_bbox: 0.0463, loss: 0.8301
2021-10-03 15:44:12,030 - mmdet - INFO - Epoch [1][1200/1221]	lr: 1.000e-03, eta: 0:49:41, time: 0.607, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0546, loss_rpn_bbox: 0.0325, s0.loss_cls: 0.2748, s0.acc: 92.8477, s0.loss_bbox: 0.1322, s1.loss_cls: 0.1270, s1.acc: 93.4663, s1.loss_bbox: 0.1011, s2.loss_cls: 0.0540, s2.acc: 94.5651, s2.loss_bbox: 0.0441, loss: 0.8204
2021-10-03 15:44:24,865 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-10-03 15:50:11,539 - mmdet - INFO - Evaluating bbox...
2021-10-03 15:50:34,736 - mmdet - INFO - Exp name: final1.py
2021-10-03 15:50:34,742 - mmdet - INFO - Epoch(val) [1][4883]	bbox_mAP: 0.0800, bbox_mAP_50: 0.1570, bbox_mAP_75: 0.0750, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0040, bbox_mAP_l: 0.1010, bbox_mAP_copypaste: 0.080 0.157 0.075 0.000 0.004 0.101
2021-10-03 15:51:07,631 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.000e-03, eta: 0:48:18, time: 0.656, data_time: 0.057, memory: 6666, loss_rpn_cls: 0.0589, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.2793, s0.acc: 92.4844, s0.loss_bbox: 0.1441, s1.loss_cls: 0.1320, s1.acc: 92.9343, s1.loss_bbox: 0.1168, s2.loss_cls: 0.0565, s2.acc: 94.1317, s2.loss_bbox: 0.0516, loss: 0.8713
2021-10-03 15:51:38,309 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.000e-03, eta: 0:47:51, time: 0.614, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0570, loss_rpn_bbox: 0.0322, s0.loss_cls: 0.2975, s0.acc: 92.3018, s0.loss_bbox: 0.1430, s1.loss_cls: 0.1373, s1.acc: 92.7568, s1.loss_bbox: 0.1094, s2.loss_cls: 0.0590, s2.acc: 93.9697, s2.loss_bbox: 0.0486, loss: 0.8839
2021-10-03 15:52:08,858 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.000e-03, eta: 0:47:22, time: 0.611, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0549, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.2942, s0.acc: 92.1172, s0.loss_bbox: 0.1429, s1.loss_cls: 0.1371, s1.acc: 92.5303, s1.loss_bbox: 0.1124, s2.loss_cls: 0.0597, s2.acc: 93.5537, s2.loss_bbox: 0.0516, loss: 0.8888
2021-10-03 15:52:39,408 - mmdet - INFO - Epoch [2][200/1221]	lr: 1.000e-03, eta: 0:46:54, time: 0.611, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0565, loss_rpn_bbox: 0.0360, s0.loss_cls: 0.2699, s0.acc: 92.8115, s0.loss_bbox: 0.1353, s1.loss_cls: 0.1268, s1.acc: 93.2549, s1.loss_bbox: 0.1048, s2.loss_cls: 0.0543, s2.acc: 94.4268, s2.loss_bbox: 0.0484, loss: 0.8322
2021-10-03 15:53:10,133 - mmdet - INFO - Epoch [2][250/1221]	lr: 1.000e-03, eta: 0:46:26, time: 0.614, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0586, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.2804, s0.acc: 92.3945, s0.loss_bbox: 0.1403, s1.loss_cls: 0.1315, s1.acc: 92.8184, s1.loss_bbox: 0.1084, s2.loss_cls: 0.0573, s2.acc: 93.8389, s2.loss_bbox: 0.0490, loss: 0.8604
2021-10-03 15:53:40,571 - mmdet - INFO - Epoch [2][300/1221]	lr: 1.000e-03, eta: 0:45:57, time: 0.609, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0579, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.2901, s0.acc: 92.0020, s0.loss_bbox: 0.1473, s1.loss_cls: 0.1369, s1.acc: 92.4181, s1.loss_bbox: 0.1176, s2.loss_cls: 0.0603, s2.acc: 93.6176, s2.loss_bbox: 0.0537, loss: 0.8987
2021-10-03 15:54:11,127 - mmdet - INFO - Epoch [2][350/1221]	lr: 1.000e-03, eta: 0:45:29, time: 0.611, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0623, loss_rpn_bbox: 0.0420, s0.loss_cls: 0.2870, s0.acc: 91.9697, s0.loss_bbox: 0.1452, s1.loss_cls: 0.1355, s1.acc: 92.4042, s1.loss_bbox: 0.1109, s2.loss_cls: 0.0597, s2.acc: 93.6045, s2.loss_bbox: 0.0491, loss: 0.8917
2021-10-03 15:54:41,574 - mmdet - INFO - Epoch [2][400/1221]	lr: 1.000e-03, eta: 0:44:59, time: 0.609, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0701, loss_rpn_bbox: 0.0420, s0.loss_cls: 0.3010, s0.acc: 91.9248, s0.loss_bbox: 0.1518, s1.loss_cls: 0.1389, s1.acc: 92.5479, s1.loss_bbox: 0.1144, s2.loss_cls: 0.0597, s2.acc: 93.6562, s2.loss_bbox: 0.0499, loss: 0.9277
2021-10-03 15:55:12,102 - mmdet - INFO - Epoch [2][450/1221]	lr: 1.000e-03, eta: 0:44:30, time: 0.611, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0532, loss_rpn_bbox: 0.0306, s0.loss_cls: 0.2785, s0.acc: 92.3525, s0.loss_bbox: 0.1346, s1.loss_cls: 0.1295, s1.acc: 92.9120, s1.loss_bbox: 0.1054, s2.loss_cls: 0.0562, s2.acc: 94.0411, s2.loss_bbox: 0.0483, loss: 0.8363
2021-10-03 15:55:42,307 - mmdet - INFO - Epoch [2][500/1221]	lr: 1.000e-03, eta: 0:44:00, time: 0.604, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0625, loss_rpn_bbox: 0.0379, s0.loss_cls: 0.2881, s0.acc: 91.7314, s0.loss_bbox: 0.1540, s1.loss_cls: 0.1376, s1.acc: 92.1934, s1.loss_bbox: 0.1249, s2.loss_cls: 0.0596, s2.acc: 93.3784, s2.loss_bbox: 0.0570, loss: 0.9216
2021-10-03 15:56:12,700 - mmdet - INFO - Epoch [2][550/1221]	lr: 1.000e-03, eta: 0:43:31, time: 0.608, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0410, loss_rpn_bbox: 0.0282, s0.loss_cls: 0.2581, s0.acc: 92.7012, s0.loss_bbox: 0.1230, s1.loss_cls: 0.1257, s1.acc: 92.7221, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0587, s2.acc: 93.2666, s2.loss_bbox: 0.0551, loss: 0.7988
2021-10-03 15:56:43,226 - mmdet - INFO - Epoch [2][600/1221]	lr: 1.000e-03, eta: 0:43:02, time: 0.610, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0679, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.2948, s0.acc: 91.4990, s0.loss_bbox: 0.1553, s1.loss_cls: 0.1404, s1.acc: 91.9596, s1.loss_bbox: 0.1220, s2.loss_cls: 0.0608, s2.acc: 93.1680, s2.loss_bbox: 0.0541, loss: 0.9345
2021-10-03 15:57:13,760 - mmdet - INFO - Epoch [2][650/1221]	lr: 1.000e-03, eta: 0:42:33, time: 0.611, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0575, loss_rpn_bbox: 0.0375, s0.loss_cls: 0.2827, s0.acc: 92.0840, s0.loss_bbox: 0.1412, s1.loss_cls: 0.1380, s1.acc: 92.3004, s1.loss_bbox: 0.1127, s2.loss_cls: 0.0606, s2.acc: 93.3362, s2.loss_bbox: 0.0503, loss: 0.8805
2021-10-03 15:57:44,093 - mmdet - INFO - Epoch [2][700/1221]	lr: 1.000e-03, eta: 0:42:03, time: 0.607, data_time: 0.012, memory: 6666, loss_rpn_cls: 0.0628, loss_rpn_bbox: 0.0357, s0.loss_cls: 0.3216, s0.acc: 91.0693, s0.loss_bbox: 0.1598, s1.loss_cls: 0.1519, s1.acc: 91.6105, s1.loss_bbox: 0.1261, s2.loss_cls: 0.0661, s2.acc: 92.9147, s2.loss_bbox: 0.0569, loss: 0.9810
2021-10-03 15:58:14,582 - mmdet - INFO - Epoch [2][750/1221]	lr: 1.000e-03, eta: 0:41:33, time: 0.610, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0502, loss_rpn_bbox: 0.0316, s0.loss_cls: 0.2654, s0.acc: 92.6221, s0.loss_bbox: 0.1320, s1.loss_cls: 0.1270, s1.acc: 92.7058, s1.loss_bbox: 0.1062, s2.loss_cls: 0.0574, s2.acc: 93.4822, s2.loss_bbox: 0.0504, loss: 0.8202
2021-10-03 15:58:45,105 - mmdet - INFO - Epoch [2][800/1221]	lr: 1.000e-03, eta: 0:41:04, time: 0.610, data_time: 0.013, memory: 6666, loss_rpn_cls: 0.0628, loss_rpn_bbox: 0.0338, s0.loss_cls: 0.2775, s0.acc: 92.2695, s0.loss_bbox: 0.1380, s1.loss_cls: 0.1350, s1.acc: 92.3728, s1.loss_bbox: 0.1134, s2.loss_cls: 0.0593, s2.acc: 93.3614, s2.loss_bbox: 0.0534, loss: 0.8733
2021-10-03 15:59:15,628 - mmdet - INFO - Epoch [2][850/1221]	lr: 1.000e-03, eta: 0:40:34, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0511, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.2755, s0.acc: 92.2148, s0.loss_bbox: 0.1375, s1.loss_cls: 0.1323, s1.acc: 92.5822, s1.loss_bbox: 0.1104, s2.loss_cls: 0.0585, s2.acc: 93.5345, s2.loss_bbox: 0.0514, loss: 0.8506
2021-10-03 15:59:45,852 - mmdet - INFO - Epoch [2][900/1221]	lr: 1.000e-03, eta: 0:40:04, time: 0.604, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0522, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.2851, s0.acc: 92.2930, s0.loss_bbox: 0.1287, s1.loss_cls: 0.1339, s1.acc: 92.5986, s1.loss_bbox: 0.1062, s2.loss_cls: 0.0581, s2.acc: 93.5273, s2.loss_bbox: 0.0497, loss: 0.8492
2021-10-03 16:00:16,009 - mmdet - INFO - Epoch [2][950/1221]	lr: 1.000e-03, eta: 0:39:34, time: 0.603, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0458, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.2910, s0.acc: 91.8838, s0.loss_bbox: 0.1425, s1.loss_cls: 0.1405, s1.acc: 91.8261, s1.loss_bbox: 0.1205, s2.loss_cls: 0.0615, s2.acc: 93.0545, s2.loss_bbox: 0.0575, loss: 0.8923
2021-10-03 16:00:46,401 - mmdet - INFO - Epoch [2][1000/1221]	lr: 1.000e-03, eta: 0:39:04, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0604, loss_rpn_bbox: 0.0331, s0.loss_cls: 0.2715, s0.acc: 92.5840, s0.loss_bbox: 0.1291, s1.loss_cls: 0.1292, s1.acc: 92.6320, s1.loss_bbox: 0.1070, s2.loss_cls: 0.0574, s2.acc: 93.4967, s2.loss_bbox: 0.0498, loss: 0.8374
2021-10-03 16:01:16,649 - mmdet - INFO - Epoch [2][1050/1221]	lr: 1.000e-03, eta: 0:38:34, time: 0.605, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0516, loss_rpn_bbox: 0.0323, s0.loss_cls: 0.2887, s0.acc: 92.2861, s0.loss_bbox: 0.1313, s1.loss_cls: 0.1398, s1.acc: 92.5416, s1.loss_bbox: 0.1079, s2.loss_cls: 0.0616, s2.acc: 93.3787, s2.loss_bbox: 0.0506, loss: 0.8637
2021-10-03 16:01:47,103 - mmdet - INFO - Epoch [2][1100/1221]	lr: 1.000e-03, eta: 0:38:04, time: 0.609, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0469, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.2613, s0.acc: 92.7695, s0.loss_bbox: 0.1249, s1.loss_cls: 0.1262, s1.acc: 92.9812, s1.loss_bbox: 0.1043, s2.loss_cls: 0.0572, s2.acc: 93.4986, s2.loss_bbox: 0.0497, loss: 0.8008
2021-10-03 16:02:17,489 - mmdet - INFO - Epoch [2][1150/1221]	lr: 1.000e-03, eta: 0:37:35, time: 0.608, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0450, loss_rpn_bbox: 0.0286, s0.loss_cls: 0.2556, s0.acc: 92.8174, s0.loss_bbox: 0.1198, s1.loss_cls: 0.1287, s1.acc: 92.6344, s1.loss_bbox: 0.1029, s2.loss_cls: 0.0582, s2.acc: 93.2754, s2.loss_bbox: 0.0499, loss: 0.7888
2021-10-03 16:02:47,549 - mmdet - INFO - Epoch [2][1200/1221]	lr: 1.000e-03, eta: 0:37:04, time: 0.601, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0515, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.2835, s0.acc: 92.1309, s0.loss_bbox: 0.1342, s1.loss_cls: 0.1351, s1.acc: 92.4916, s1.loss_bbox: 0.1085, s2.loss_cls: 0.0599, s2.acc: 93.5204, s2.loss_bbox: 0.0546, loss: 0.8601
2021-10-03 16:03:00,077 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-10-03 16:08:46,062 - mmdet - INFO - Evaluating bbox...
2021-10-03 16:09:14,664 - mmdet - INFO - Exp name: final1.py
2021-10-03 16:09:14,664 - mmdet - INFO - Epoch(val) [2][4883]	bbox_mAP: 0.1280, bbox_mAP_50: 0.2330, bbox_mAP_75: 0.1280, bbox_mAP_s: 0.0010, bbox_mAP_m: 0.0150, bbox_mAP_l: 0.1570, bbox_mAP_copypaste: 0.128 0.233 0.128 0.001 0.015 0.157
2021-10-03 16:09:47,344 - mmdet - INFO - Epoch [3][50/1221]	lr: 1.000e-03, eta: 0:36:06, time: 0.652, data_time: 0.056, memory: 6667, loss_rpn_cls: 0.0418, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.2707, s0.acc: 92.1133, s0.loss_bbox: 0.1305, s1.loss_cls: 0.1349, s1.acc: 92.1547, s1.loss_bbox: 0.1109, s2.loss_cls: 0.0614, s2.acc: 92.9253, s2.loss_bbox: 0.0536, loss: 0.8305
2021-10-03 16:10:17,867 - mmdet - INFO - Epoch [3][100/1221]	lr: 1.000e-03, eta: 0:35:37, time: 0.610, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0478, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.2724, s0.acc: 91.9502, s0.loss_bbox: 0.1348, s1.loss_cls: 0.1326, s1.acc: 92.4005, s1.loss_bbox: 0.1122, s2.loss_cls: 0.0601, s2.acc: 93.2059, s2.loss_bbox: 0.0533, loss: 0.8486
2021-10-03 16:10:48,372 - mmdet - INFO - Epoch [3][150/1221]	lr: 1.000e-03, eta: 0:35:08, time: 0.610, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0444, loss_rpn_bbox: 0.0356, s0.loss_cls: 0.2776, s0.acc: 91.9395, s0.loss_bbox: 0.1377, s1.loss_cls: 0.1321, s1.acc: 92.2883, s1.loss_bbox: 0.1153, s2.loss_cls: 0.0597, s2.acc: 93.0790, s2.loss_bbox: 0.0558, loss: 0.8582
2021-10-03 16:11:18,863 - mmdet - INFO - Epoch [3][200/1221]	lr: 1.000e-03, eta: 0:34:38, time: 0.610, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0511, loss_rpn_bbox: 0.0340, s0.loss_cls: 0.2731, s0.acc: 92.1455, s0.loss_bbox: 0.1387, s1.loss_cls: 0.1342, s1.acc: 92.1590, s1.loss_bbox: 0.1194, s2.loss_cls: 0.0609, s2.acc: 93.0827, s2.loss_bbox: 0.0574, loss: 0.8687
2021-10-03 16:11:49,318 - mmdet - INFO - Epoch [3][250/1221]	lr: 1.000e-03, eta: 0:34:09, time: 0.609, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0414, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.2597, s0.acc: 92.5605, s0.loss_bbox: 0.1286, s1.loss_cls: 0.1261, s1.acc: 92.8235, s1.loss_bbox: 0.1115, s2.loss_cls: 0.0560, s2.acc: 93.5844, s2.loss_bbox: 0.0556, loss: 0.8074
2021-10-03 16:12:19,790 - mmdet - INFO - Epoch [3][300/1221]	lr: 1.000e-03, eta: 0:33:40, time: 0.609, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0536, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.2944, s0.acc: 91.6670, s0.loss_bbox: 0.1403, s1.loss_cls: 0.1434, s1.acc: 91.9337, s1.loss_bbox: 0.1193, s2.loss_cls: 0.0641, s2.acc: 92.9395, s2.loss_bbox: 0.0600, loss: 0.9134
2021-10-03 16:12:50,255 - mmdet - INFO - Epoch [3][350/1221]	lr: 1.000e-03, eta: 0:33:10, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0466, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.2934, s0.acc: 91.2891, s0.loss_bbox: 0.1454, s1.loss_cls: 0.1438, s1.acc: 91.4477, s1.loss_bbox: 0.1262, s2.loss_cls: 0.0668, s2.acc: 92.0760, s2.loss_bbox: 0.0617, loss: 0.9158
2021-10-03 16:13:20,622 - mmdet - INFO - Epoch [3][400/1221]	lr: 1.000e-03, eta: 0:32:40, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0430, loss_rpn_bbox: 0.0271, s0.loss_cls: 0.2459, s0.acc: 92.9844, s0.loss_bbox: 0.1197, s1.loss_cls: 0.1228, s1.acc: 92.9264, s1.loss_bbox: 0.1021, s2.loss_cls: 0.0567, s2.acc: 93.5653, s2.loss_bbox: 0.0516, loss: 0.7689
2021-10-03 16:13:50,872 - mmdet - INFO - Epoch [3][450/1221]	lr: 1.000e-03, eta: 0:32:11, time: 0.605, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0478, loss_rpn_bbox: 0.0353, s0.loss_cls: 0.2982, s0.acc: 91.3467, s0.loss_bbox: 0.1468, s1.loss_cls: 0.1442, s1.acc: 91.4419, s1.loss_bbox: 0.1248, s2.loss_cls: 0.0667, s2.acc: 91.9934, s2.loss_bbox: 0.0609, loss: 0.9246
2021-10-03 16:14:21,241 - mmdet - INFO - Epoch [3][500/1221]	lr: 1.000e-03, eta: 0:31:41, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0528, loss_rpn_bbox: 0.0386, s0.loss_cls: 0.2597, s0.acc: 92.3525, s0.loss_bbox: 0.1345, s1.loss_cls: 0.1272, s1.acc: 92.5176, s1.loss_bbox: 0.1130, s2.loss_cls: 0.0583, s2.acc: 93.2861, s2.loss_bbox: 0.0544, loss: 0.8384
2021-10-03 16:14:51,600 - mmdet - INFO - Epoch [3][550/1221]	lr: 1.000e-03, eta: 0:31:11, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0464, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.2642, s0.acc: 92.3760, s0.loss_bbox: 0.1297, s1.loss_cls: 0.1285, s1.acc: 92.5156, s1.loss_bbox: 0.1101, s2.loss_cls: 0.0578, s2.acc: 93.1875, s2.loss_bbox: 0.0577, loss: 0.8240
2021-10-03 16:15:22,086 - mmdet - INFO - Epoch [3][600/1221]	lr: 1.000e-03, eta: 0:30:41, time: 0.610, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0421, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.2652, s0.acc: 92.2480, s0.loss_bbox: 0.1331, s1.loss_cls: 0.1291, s1.acc: 92.5202, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0573, s2.acc: 93.4135, s2.loss_bbox: 0.0530, loss: 0.8241
2021-10-03 16:15:52,369 - mmdet - INFO - Epoch [3][650/1221]	lr: 1.000e-03, eta: 0:30:12, time: 0.606, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0442, loss_rpn_bbox: 0.0259, s0.loss_cls: 0.2522, s0.acc: 92.9766, s0.loss_bbox: 0.1147, s1.loss_cls: 0.1228, s1.acc: 92.9679, s1.loss_bbox: 0.0997, s2.loss_cls: 0.0553, s2.acc: 93.5469, s2.loss_bbox: 0.0509, loss: 0.7656
2021-10-03 16:16:22,512 - mmdet - INFO - Epoch [3][700/1221]	lr: 1.000e-03, eta: 0:29:42, time: 0.603, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0493, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.3049, s0.acc: 91.2656, s0.loss_bbox: 0.1370, s1.loss_cls: 0.1489, s1.acc: 91.2539, s1.loss_bbox: 0.1199, s2.loss_cls: 0.0677, s2.acc: 92.1278, s2.loss_bbox: 0.0576, loss: 0.9187
2021-10-03 16:16:52,863 - mmdet - INFO - Epoch [3][750/1221]	lr: 1.000e-03, eta: 0:29:12, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0434, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.2859, s0.acc: 91.5498, s0.loss_bbox: 0.1483, s1.loss_cls: 0.1427, s1.acc: 91.4922, s1.loss_bbox: 0.1231, s2.loss_cls: 0.0640, s2.acc: 92.5603, s2.loss_bbox: 0.0590, loss: 0.8996
2021-10-03 16:17:23,385 - mmdet - INFO - Epoch [3][800/1221]	lr: 1.000e-03, eta: 0:28:42, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0557, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.3119, s0.acc: 90.9170, s0.loss_bbox: 0.1567, s1.loss_cls: 0.1498, s1.acc: 91.2565, s1.loss_bbox: 0.1324, s2.loss_cls: 0.0664, s2.acc: 92.4560, s2.loss_bbox: 0.0607, loss: 0.9719
2021-10-03 16:17:53,888 - mmdet - INFO - Epoch [3][850/1221]	lr: 1.000e-03, eta: 0:28:12, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0512, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.2604, s0.acc: 92.3223, s0.loss_bbox: 0.1212, s1.loss_cls: 0.1281, s1.acc: 92.2643, s1.loss_bbox: 0.1034, s2.loss_cls: 0.0610, s2.acc: 92.7055, s2.loss_bbox: 0.0532, loss: 0.8080
2021-10-03 16:18:24,289 - mmdet - INFO - Epoch [3][900/1221]	lr: 1.000e-03, eta: 0:27:43, time: 0.608, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0458, loss_rpn_bbox: 0.0299, s0.loss_cls: 0.2866, s0.acc: 91.8633, s0.loss_bbox: 0.1341, s1.loss_cls: 0.1427, s1.acc: 91.8796, s1.loss_bbox: 0.1137, s2.loss_cls: 0.0653, s2.acc: 92.6229, s2.loss_bbox: 0.0575, loss: 0.8756
2021-10-03 16:18:55,139 - mmdet - INFO - Epoch [3][950/1221]	lr: 1.000e-03, eta: 0:27:13, time: 0.617, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0440, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.2588, s0.acc: 92.5059, s0.loss_bbox: 0.1282, s1.loss_cls: 0.1248, s1.acc: 92.7158, s1.loss_bbox: 0.1076, s2.loss_cls: 0.0577, s2.acc: 93.1748, s2.loss_bbox: 0.0540, loss: 0.8070
2021-10-03 16:19:25,741 - mmdet - INFO - Epoch [3][1000/1221]	lr: 1.000e-03, eta: 0:26:43, time: 0.612, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0483, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.2720, s0.acc: 92.0352, s0.loss_bbox: 0.1308, s1.loss_cls: 0.1357, s1.acc: 92.0383, s1.loss_bbox: 0.1133, s2.loss_cls: 0.0629, s2.acc: 92.9858, s2.loss_bbox: 0.0562, loss: 0.8532
2021-10-03 16:19:56,395 - mmdet - INFO - Epoch [3][1050/1221]	lr: 1.000e-03, eta: 0:26:14, time: 0.613, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0395, loss_rpn_bbox: 0.0271, s0.loss_cls: 0.2348, s0.acc: 93.0029, s0.loss_bbox: 0.1178, s1.loss_cls: 0.1170, s1.acc: 92.9277, s1.loss_bbox: 0.1059, s2.loss_cls: 0.0554, s2.acc: 93.2576, s2.loss_bbox: 0.0528, loss: 0.7501
2021-10-03 16:20:26,895 - mmdet - INFO - Epoch [3][1100/1221]	lr: 1.000e-03, eta: 0:25:44, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0389, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.2405, s0.acc: 93.1104, s0.loss_bbox: 0.1149, s1.loss_cls: 0.1162, s1.acc: 93.1999, s1.loss_bbox: 0.0969, s2.loss_cls: 0.0543, s2.acc: 93.5758, s2.loss_bbox: 0.0497, loss: 0.7375
2021-10-03 16:20:57,161 - mmdet - INFO - Epoch [3][1150/1221]	lr: 1.000e-03, eta: 0:25:14, time: 0.605, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0445, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.2528, s0.acc: 92.7373, s0.loss_bbox: 0.1204, s1.loss_cls: 0.1236, s1.acc: 92.5645, s1.loss_bbox: 0.1050, s2.loss_cls: 0.0576, s2.acc: 93.1437, s2.loss_bbox: 0.0515, loss: 0.7889
2021-10-03 16:21:27,662 - mmdet - INFO - Epoch [3][1200/1221]	lr: 1.000e-03, eta: 0:24:44, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0517, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.2825, s0.acc: 91.8926, s0.loss_bbox: 0.1384, s1.loss_cls: 0.1366, s1.acc: 92.2207, s1.loss_bbox: 0.1166, s2.loss_cls: 0.0621, s2.acc: 92.9448, s2.loss_bbox: 0.0587, loss: 0.8815
2021-10-03 16:21:40,259 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-10-03 16:27:25,992 - mmdet - INFO - Evaluating bbox...
2021-10-03 16:27:49,574 - mmdet - INFO - Exp name: final1.py
2021-10-03 16:27:49,575 - mmdet - INFO - Epoch(val) [3][4883]	bbox_mAP: 0.2220, bbox_mAP_50: 0.3610, bbox_mAP_75: 0.2340, bbox_mAP_s: 0.0020, bbox_mAP_m: 0.0460, bbox_mAP_l: 0.2690, bbox_mAP_copypaste: 0.222 0.361 0.234 0.002 0.046 0.269
2021-10-03 16:28:22,333 - mmdet - INFO - Epoch [4][50/1221]	lr: 1.000e-03, eta: 0:23:55, time: 0.653, data_time: 0.057, memory: 6667, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0283, s0.loss_cls: 0.2565, s0.acc: 92.3242, s0.loss_bbox: 0.1268, s1.loss_cls: 0.1275, s1.acc: 92.1638, s1.loss_bbox: 0.1131, s2.loss_cls: 0.0608, s2.acc: 92.7235, s2.loss_bbox: 0.0585, loss: 0.8067
2021-10-03 16:28:52,738 - mmdet - INFO - Epoch [4][100/1221]	lr: 1.000e-03, eta: 0:23:25, time: 0.608, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0409, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2593, s0.acc: 92.1895, s0.loss_bbox: 0.1273, s1.loss_cls: 0.1301, s1.acc: 92.1423, s1.loss_bbox: 0.1113, s2.loss_cls: 0.0614, s2.acc: 92.5607, s2.loss_bbox: 0.0558, loss: 0.8206
2021-10-03 16:29:23,029 - mmdet - INFO - Epoch [4][150/1221]	lr: 1.000e-03, eta: 0:22:55, time: 0.606, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0503, loss_rpn_bbox: 0.0362, s0.loss_cls: 0.2565, s0.acc: 92.5283, s0.loss_bbox: 0.1266, s1.loss_cls: 0.1222, s1.acc: 92.8518, s1.loss_bbox: 0.1069, s2.loss_cls: 0.0569, s2.acc: 93.4661, s2.loss_bbox: 0.0528, loss: 0.8084
2021-10-03 16:29:53,697 - mmdet - INFO - Epoch [4][200/1221]	lr: 1.000e-03, eta: 0:22:25, time: 0.613, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0380, loss_rpn_bbox: 0.0326, s0.loss_cls: 0.2760, s0.acc: 91.8486, s0.loss_bbox: 0.1374, s1.loss_cls: 0.1343, s1.acc: 91.9643, s1.loss_bbox: 0.1167, s2.loss_cls: 0.0622, s2.acc: 92.5884, s2.loss_bbox: 0.0566, loss: 0.8538
2021-10-03 16:30:24,235 - mmdet - INFO - Epoch [4][250/1221]	lr: 1.000e-03, eta: 0:21:56, time: 0.611, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0394, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.2668, s0.acc: 92.3643, s0.loss_bbox: 0.1228, s1.loss_cls: 0.1284, s1.acc: 92.6125, s1.loss_bbox: 0.1070, s2.loss_cls: 0.0601, s2.acc: 93.0634, s2.loss_bbox: 0.0551, loss: 0.8081
2021-10-03 16:30:54,234 - mmdet - INFO - Epoch [4][300/1221]	lr: 1.000e-03, eta: 0:21:26, time: 0.600, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0366, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.2537, s0.acc: 92.3672, s0.loss_bbox: 0.1252, s1.loss_cls: 0.1249, s1.acc: 92.3284, s1.loss_bbox: 0.1061, s2.loss_cls: 0.0587, s2.acc: 92.9439, s2.loss_bbox: 0.0565, loss: 0.7921
2021-10-03 16:31:24,180 - mmdet - INFO - Epoch [4][350/1221]	lr: 1.000e-03, eta: 0:20:56, time: 0.599, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0435, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.2516, s0.acc: 92.5186, s0.loss_bbox: 0.1322, s1.loss_cls: 0.1213, s1.acc: 92.7624, s1.loss_bbox: 0.1099, s2.loss_cls: 0.0550, s2.acc: 93.3620, s2.loss_bbox: 0.0541, loss: 0.7956
2021-10-03 16:31:54,123 - mmdet - INFO - Epoch [4][400/1221]	lr: 1.000e-03, eta: 0:20:25, time: 0.599, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0481, loss_rpn_bbox: 0.0338, s0.loss_cls: 0.2906, s0.acc: 91.1143, s0.loss_bbox: 0.1531, s1.loss_cls: 0.1430, s1.acc: 91.1016, s1.loss_bbox: 0.1289, s2.loss_cls: 0.0674, s2.acc: 91.7964, s2.loss_bbox: 0.0646, loss: 0.9294
2021-10-03 16:32:24,002 - mmdet - INFO - Epoch [4][450/1221]	lr: 1.000e-03, eta: 0:19:55, time: 0.598, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0428, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.2517, s0.acc: 92.5820, s0.loss_bbox: 0.1238, s1.loss_cls: 0.1270, s1.acc: 92.5087, s1.loss_bbox: 0.1098, s2.loss_cls: 0.0596, s2.acc: 92.8895, s2.loss_bbox: 0.0558, loss: 0.8001
2021-10-03 16:32:54,342 - mmdet - INFO - Epoch [4][500/1221]	lr: 1.000e-03, eta: 0:19:26, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0358, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.2446, s0.acc: 92.4883, s0.loss_bbox: 0.1274, s1.loss_cls: 0.1226, s1.acc: 92.5412, s1.loss_bbox: 0.1159, s2.loss_cls: 0.0586, s2.acc: 92.7399, s2.loss_bbox: 0.0618, loss: 0.7929
2021-10-03 16:33:24,715 - mmdet - INFO - Epoch [4][550/1221]	lr: 1.000e-03, eta: 0:18:56, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.2385, s0.acc: 92.9268, s0.loss_bbox: 0.1132, s1.loss_cls: 0.1190, s1.acc: 92.8190, s1.loss_bbox: 0.1003, s2.loss_cls: 0.0558, s2.acc: 93.2508, s2.loss_bbox: 0.0506, loss: 0.7386
2021-10-03 16:33:55,048 - mmdet - INFO - Epoch [4][600/1221]	lr: 1.000e-03, eta: 0:18:26, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0358, loss_rpn_bbox: 0.0290, s0.loss_cls: 0.2316, s0.acc: 92.8369, s0.loss_bbox: 0.1227, s1.loss_cls: 0.1146, s1.acc: 92.9879, s1.loss_bbox: 0.1040, s2.loss_cls: 0.0546, s2.acc: 93.3242, s2.loss_bbox: 0.0550, loss: 0.7472
2021-10-03 16:34:25,557 - mmdet - INFO - Epoch [4][650/1221]	lr: 1.000e-03, eta: 0:17:56, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0514, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.2572, s0.acc: 92.4795, s0.loss_bbox: 0.1255, s1.loss_cls: 0.1255, s1.acc: 92.6822, s1.loss_bbox: 0.1089, s2.loss_cls: 0.0583, s2.acc: 93.3105, s2.loss_bbox: 0.0550, loss: 0.8137
2021-10-03 16:34:55,939 - mmdet - INFO - Epoch [4][700/1221]	lr: 1.000e-03, eta: 0:17:26, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0448, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.2718, s0.acc: 91.9785, s0.loss_bbox: 0.1385, s1.loss_cls: 0.1283, s1.acc: 92.4122, s1.loss_bbox: 0.1140, s2.loss_cls: 0.0571, s2.acc: 93.3646, s2.loss_bbox: 0.0564, loss: 0.8429
2021-10-03 16:35:26,384 - mmdet - INFO - Epoch [4][750/1221]	lr: 1.000e-03, eta: 0:16:56, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0372, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.2536, s0.acc: 92.5312, s0.loss_bbox: 0.1213, s1.loss_cls: 0.1229, s1.acc: 92.8053, s1.loss_bbox: 0.1032, s2.loss_cls: 0.0574, s2.acc: 93.0617, s2.loss_bbox: 0.0535, loss: 0.7762
2021-10-03 16:35:56,822 - mmdet - INFO - Epoch [4][800/1221]	lr: 1.000e-03, eta: 0:16:26, time: 0.609, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0432, loss_rpn_bbox: 0.0373, s0.loss_cls: 0.2912, s0.acc: 91.3984, s0.loss_bbox: 0.1401, s1.loss_cls: 0.1407, s1.acc: 91.5954, s1.loss_bbox: 0.1206, s2.loss_cls: 0.0668, s2.acc: 92.2177, s2.loss_bbox: 0.0610, loss: 0.9007
2021-10-03 16:36:27,095 - mmdet - INFO - Epoch [4][850/1221]	lr: 1.000e-03, eta: 0:15:56, time: 0.605, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0321, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.2494, s0.acc: 92.6357, s0.loss_bbox: 0.1172, s1.loss_cls: 0.1232, s1.acc: 92.7112, s1.loss_bbox: 0.1032, s2.loss_cls: 0.0572, s2.acc: 93.1881, s2.loss_bbox: 0.0533, loss: 0.7628
2021-10-03 16:36:57,319 - mmdet - INFO - Epoch [4][900/1221]	lr: 1.000e-03, eta: 0:15:26, time: 0.604, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0493, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.2673, s0.acc: 92.0693, s0.loss_bbox: 0.1332, s1.loss_cls: 0.1294, s1.acc: 92.2437, s1.loss_bbox: 0.1167, s2.loss_cls: 0.0619, s2.acc: 92.4741, s2.loss_bbox: 0.0624, loss: 0.8517
2021-10-03 16:37:27,715 - mmdet - INFO - Epoch [4][950/1221]	lr: 1.000e-03, eta: 0:14:56, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0455, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.2694, s0.acc: 91.9590, s0.loss_bbox: 0.1353, s1.loss_cls: 0.1283, s1.acc: 92.4402, s1.loss_bbox: 0.1161, s2.loss_cls: 0.0600, s2.acc: 92.9907, s2.loss_bbox: 0.0604, loss: 0.8498
2021-10-03 16:37:58,049 - mmdet - INFO - Epoch [4][1000/1221]	lr: 1.000e-03, eta: 0:14:26, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0409, loss_rpn_bbox: 0.0310, s0.loss_cls: 0.2438, s0.acc: 92.9570, s0.loss_bbox: 0.1180, s1.loss_cls: 0.1222, s1.acc: 92.9943, s1.loss_bbox: 0.1069, s2.loss_cls: 0.0570, s2.acc: 93.4802, s2.loss_bbox: 0.0550, loss: 0.7748
2021-10-03 16:38:28,386 - mmdet - INFO - Epoch [4][1050/1221]	lr: 1.000e-03, eta: 0:13:56, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.2253, s0.acc: 93.1299, s0.loss_bbox: 0.1068, s1.loss_cls: 0.1131, s1.acc: 92.8919, s1.loss_bbox: 0.0988, s2.loss_cls: 0.0542, s2.acc: 93.1596, s2.loss_bbox: 0.0558, loss: 0.7160
2021-10-03 16:38:59,142 - mmdet - INFO - Epoch [4][1100/1221]	lr: 1.000e-03, eta: 0:13:27, time: 0.615, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0339, loss_rpn_bbox: 0.0244, s0.loss_cls: 0.2523, s0.acc: 92.5010, s0.loss_bbox: 0.1189, s1.loss_cls: 0.1252, s1.acc: 92.5350, s1.loss_bbox: 0.1052, s2.loss_cls: 0.0589, s2.acc: 93.0710, s2.loss_bbox: 0.0555, loss: 0.7742
2021-10-03 16:39:29,403 - mmdet - INFO - Epoch [4][1150/1221]	lr: 1.000e-03, eta: 0:12:57, time: 0.605, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0355, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.2267, s0.acc: 93.2109, s0.loss_bbox: 0.1113, s1.loss_cls: 0.1116, s1.acc: 93.4360, s1.loss_bbox: 0.0949, s2.loss_cls: 0.0524, s2.acc: 93.9512, s2.loss_bbox: 0.0491, loss: 0.7131
2021-10-03 16:39:59,825 - mmdet - INFO - Epoch [4][1200/1221]	lr: 1.000e-03, eta: 0:12:27, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0376, loss_rpn_bbox: 0.0284, s0.loss_cls: 0.2466, s0.acc: 92.5576, s0.loss_bbox: 0.1224, s1.loss_cls: 0.1230, s1.acc: 92.4766, s1.loss_bbox: 0.1062, s2.loss_cls: 0.0579, s2.acc: 92.9772, s2.loss_bbox: 0.0552, loss: 0.7772
2021-10-03 16:40:12,581 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-10-03 16:45:59,940 - mmdet - INFO - Evaluating bbox...
2021-10-03 16:46:28,496 - mmdet - INFO - Exp name: final1.py
2021-10-03 16:46:28,496 - mmdet - INFO - Epoch(val) [4][4883]	bbox_mAP: 0.2520, bbox_mAP_50: 0.4130, bbox_mAP_75: 0.2630, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.0680, bbox_mAP_l: 0.2980, bbox_mAP_copypaste: 0.252 0.413 0.263 0.007 0.068 0.298
2021-10-03 16:47:01,581 - mmdet - INFO - Epoch [5][50/1221]	lr: 1.000e-03, eta: 0:11:42, time: 0.660, data_time: 0.057, memory: 6667, loss_rpn_cls: 0.0375, loss_rpn_bbox: 0.0297, s0.loss_cls: 0.2593, s0.acc: 92.1123, s0.loss_bbox: 0.1310, s1.loss_cls: 0.1266, s1.acc: 92.2648, s1.loss_bbox: 0.1168, s2.loss_cls: 0.0587, s2.acc: 92.8331, s2.loss_bbox: 0.0607, loss: 0.8203
2021-10-03 16:47:31,855 - mmdet - INFO - Epoch [5][100/1221]	lr: 1.000e-03, eta: 0:11:12, time: 0.605, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0389, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.2242, s0.acc: 92.9033, s0.loss_bbox: 0.1163, s1.loss_cls: 0.1123, s1.acc: 92.9846, s1.loss_bbox: 0.1033, s2.loss_cls: 0.0546, s2.acc: 93.2844, s2.loss_bbox: 0.0552, loss: 0.7338
2021-10-03 16:48:02,230 - mmdet - INFO - Epoch [5][150/1221]	lr: 1.000e-03, eta: 0:10:42, time: 0.607, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0381, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.2917, s0.acc: 91.0605, s0.loss_bbox: 0.1442, s1.loss_cls: 0.1425, s1.acc: 91.2246, s1.loss_bbox: 0.1262, s2.loss_cls: 0.0662, s2.acc: 92.1416, s2.loss_bbox: 0.0638, loss: 0.9048
2021-10-03 16:48:32,463 - mmdet - INFO - Epoch [5][200/1221]	lr: 1.000e-03, eta: 0:10:12, time: 0.605, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0319, loss_rpn_bbox: 0.0253, s0.loss_cls: 0.2327, s0.acc: 92.7734, s0.loss_bbox: 0.1222, s1.loss_cls: 0.1143, s1.acc: 92.8236, s1.loss_bbox: 0.1078, s2.loss_cls: 0.0558, s2.acc: 93.1995, s2.loss_bbox: 0.0568, loss: 0.7467
2021-10-03 16:49:02,623 - mmdet - INFO - Epoch [5][250/1221]	lr: 1.000e-03, eta: 0:09:42, time: 0.603, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0361, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.2489, s0.acc: 92.3711, s0.loss_bbox: 0.1260, s1.loss_cls: 0.1212, s1.acc: 92.5943, s1.loss_bbox: 0.1131, s2.loss_cls: 0.0573, s2.acc: 92.9677, s2.loss_bbox: 0.0600, loss: 0.7938
2021-10-03 16:49:33,096 - mmdet - INFO - Epoch [5][300/1221]	lr: 1.000e-03, eta: 0:09:12, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0247, s0.loss_cls: 0.2435, s0.acc: 92.6279, s0.loss_bbox: 0.1172, s1.loss_cls: 0.1223, s1.acc: 92.4342, s1.loss_bbox: 0.1049, s2.loss_cls: 0.0586, s2.acc: 92.7191, s2.loss_bbox: 0.0559, loss: 0.7622
2021-10-03 16:50:03,417 - mmdet - INFO - Epoch [5][350/1221]	lr: 1.000e-03, eta: 0:08:42, time: 0.606, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0333, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2600, s0.acc: 92.1748, s0.loss_bbox: 0.1309, s1.loss_cls: 0.1254, s1.acc: 92.5366, s1.loss_bbox: 0.1131, s2.loss_cls: 0.0585, s2.acc: 93.0887, s2.loss_bbox: 0.0584, loss: 0.8070
2021-10-03 16:50:33,581 - mmdet - INFO - Epoch [5][400/1221]	lr: 1.000e-03, eta: 0:08:12, time: 0.603, data_time: 0.012, memory: 6667, loss_rpn_cls: 0.0306, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.2321, s0.acc: 92.7979, s0.loss_bbox: 0.1235, s1.loss_cls: 0.1140, s1.acc: 92.8751, s1.loss_bbox: 0.1089, s2.loss_cls: 0.0541, s2.acc: 93.3283, s2.loss_bbox: 0.0566, loss: 0.7492
2021-10-03 16:51:03,981 - mmdet - INFO - Epoch [5][450/1221]	lr: 1.000e-03, eta: 0:07:42, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0393, loss_rpn_bbox: 0.0353, s0.loss_cls: 0.2645, s0.acc: 91.7656, s0.loss_bbox: 0.1367, s1.loss_cls: 0.1296, s1.acc: 91.9572, s1.loss_bbox: 0.1178, s2.loss_cls: 0.0616, s2.acc: 92.3539, s2.loss_bbox: 0.0619, loss: 0.8466
2021-10-03 16:51:34,452 - mmdet - INFO - Epoch [5][500/1221]	lr: 1.000e-03, eta: 0:07:12, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0343, loss_rpn_bbox: 0.0313, s0.loss_cls: 0.2422, s0.acc: 92.6514, s0.loss_bbox: 0.1252, s1.loss_cls: 0.1215, s1.acc: 92.5172, s1.loss_bbox: 0.1090, s2.loss_cls: 0.0589, s2.acc: 92.9132, s2.loss_bbox: 0.0560, loss: 0.7783
2021-10-03 16:52:04,797 - mmdet - INFO - Epoch [5][550/1221]	lr: 1.000e-03, eta: 0:06:42, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0454, loss_rpn_bbox: 0.0393, s0.loss_cls: 0.2781, s0.acc: 91.8623, s0.loss_bbox: 0.1352, s1.loss_cls: 0.1348, s1.acc: 91.9728, s1.loss_bbox: 0.1176, s2.loss_cls: 0.0633, s2.acc: 92.6455, s2.loss_bbox: 0.0617, loss: 0.8754
2021-10-03 16:52:35,197 - mmdet - INFO - Epoch [5][600/1221]	lr: 1.000e-03, eta: 0:06:12, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0388, loss_rpn_bbox: 0.0310, s0.loss_cls: 0.2439, s0.acc: 92.5557, s0.loss_bbox: 0.1251, s1.loss_cls: 0.1195, s1.acc: 92.6699, s1.loss_bbox: 0.1084, s2.loss_cls: 0.0572, s2.acc: 93.0365, s2.loss_bbox: 0.0581, loss: 0.7819
2021-10-03 16:53:05,777 - mmdet - INFO - Epoch [5][650/1221]	lr: 1.000e-03, eta: 0:05:42, time: 0.612, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0347, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.2420, s0.acc: 92.5986, s0.loss_bbox: 0.1206, s1.loss_cls: 0.1189, s1.acc: 92.6205, s1.loss_bbox: 0.1078, s2.loss_cls: 0.0574, s2.acc: 92.9964, s2.loss_bbox: 0.0561, loss: 0.7703
2021-10-03 16:53:36,259 - mmdet - INFO - Epoch [5][700/1221]	lr: 1.000e-03, eta: 0:05:12, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0333, loss_rpn_bbox: 0.0309, s0.loss_cls: 0.2429, s0.acc: 92.4492, s0.loss_bbox: 0.1241, s1.loss_cls: 0.1182, s1.acc: 92.7290, s1.loss_bbox: 0.1130, s2.loss_cls: 0.0551, s2.acc: 93.3344, s2.loss_bbox: 0.0571, loss: 0.7747
2021-10-03 16:54:06,730 - mmdet - INFO - Epoch [5][750/1221]	lr: 1.000e-03, eta: 0:04:42, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0306, loss_rpn_bbox: 0.0270, s0.loss_cls: 0.2153, s0.acc: 93.3271, s0.loss_bbox: 0.1112, s1.loss_cls: 0.1057, s1.acc: 93.5658, s1.loss_bbox: 0.0978, s2.loss_cls: 0.0501, s2.acc: 93.7058, s2.loss_bbox: 0.0510, loss: 0.6886
2021-10-03 16:54:37,082 - mmdet - INFO - Epoch [5][800/1221]	lr: 1.000e-03, eta: 0:04:12, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0337, loss_rpn_bbox: 0.0253, s0.loss_cls: 0.2296, s0.acc: 93.2559, s0.loss_bbox: 0.1067, s1.loss_cls: 0.1134, s1.acc: 93.1308, s1.loss_bbox: 0.0974, s2.loss_cls: 0.0534, s2.acc: 93.5155, s2.loss_bbox: 0.0518, loss: 0.7114
2021-10-03 16:55:07,430 - mmdet - INFO - Epoch [5][850/1221]	lr: 1.000e-03, eta: 0:03:42, time: 0.607, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0360, loss_rpn_bbox: 0.0292, s0.loss_cls: 0.2224, s0.acc: 93.1924, s0.loss_bbox: 0.1073, s1.loss_cls: 0.1083, s1.acc: 93.3250, s1.loss_bbox: 0.0994, s2.loss_cls: 0.0546, s2.acc: 93.1981, s2.loss_bbox: 0.0540, loss: 0.7113
2021-10-03 16:55:37,947 - mmdet - INFO - Epoch [5][900/1221]	lr: 1.000e-03, eta: 0:03:12, time: 0.610, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0350, loss_rpn_bbox: 0.0274, s0.loss_cls: 0.2329, s0.acc: 92.9785, s0.loss_bbox: 0.1110, s1.loss_cls: 0.1153, s1.acc: 92.9541, s1.loss_bbox: 0.0998, s2.loss_cls: 0.0555, s2.acc: 93.2999, s2.loss_bbox: 0.0543, loss: 0.7313
2021-10-03 16:56:08,374 - mmdet - INFO - Epoch [5][950/1221]	lr: 1.000e-03, eta: 0:02:42, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0320, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.2391, s0.acc: 92.8828, s0.loss_bbox: 0.1098, s1.loss_cls: 0.1183, s1.acc: 92.8264, s1.loss_bbox: 0.0964, s2.loss_cls: 0.0569, s2.acc: 93.0329, s2.loss_bbox: 0.0525, loss: 0.7314
2021-10-03 16:56:38,828 - mmdet - INFO - Epoch [5][1000/1221]	lr: 1.000e-03, eta: 0:02:12, time: 0.609, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.2538, s0.acc: 92.3438, s0.loss_bbox: 0.1251, s1.loss_cls: 0.1231, s1.acc: 92.4305, s1.loss_bbox: 0.1094, s2.loss_cls: 0.0578, s2.acc: 92.9588, s2.loss_bbox: 0.0593, loss: 0.7882
2021-10-03 16:57:08,984 - mmdet - INFO - Epoch [5][1050/1221]	lr: 1.000e-03, eta: 0:01:42, time: 0.603, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0400, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2543, s0.acc: 92.2188, s0.loss_bbox: 0.1250, s1.loss_cls: 0.1256, s1.acc: 92.2208, s1.loss_bbox: 0.1123, s2.loss_cls: 0.0594, s2.acc: 92.7158, s2.loss_bbox: 0.0598, loss: 0.8110
2021-10-03 16:57:39,388 - mmdet - INFO - Epoch [5][1100/1221]	lr: 1.000e-03, eta: 0:01:12, time: 0.608, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0312, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.2312, s0.acc: 92.8799, s0.loss_bbox: 0.1177, s1.loss_cls: 0.1155, s1.acc: 92.8169, s1.loss_bbox: 0.1050, s2.loss_cls: 0.0558, s2.acc: 93.2115, s2.loss_bbox: 0.0552, loss: 0.7382
2021-10-03 16:58:09,682 - mmdet - INFO - Epoch [5][1150/1221]	lr: 1.000e-03, eta: 0:00:42, time: 0.606, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0285, loss_rpn_bbox: 0.0248, s0.loss_cls: 0.2117, s0.acc: 93.5117, s0.loss_bbox: 0.1025, s1.loss_cls: 0.1060, s1.acc: 93.4405, s1.loss_bbox: 0.0949, s2.loss_cls: 0.0529, s2.acc: 93.4553, s2.loss_bbox: 0.0543, loss: 0.6756
2021-10-03 16:58:39,985 - mmdet - INFO - Epoch [5][1200/1221]	lr: 1.000e-03, eta: 0:00:12, time: 0.606, data_time: 0.013, memory: 6667, loss_rpn_cls: 0.0301, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.2220, s0.acc: 93.1104, s0.loss_bbox: 0.1062, s1.loss_cls: 0.1097, s1.acc: 93.0392, s1.loss_bbox: 0.0960, s2.loss_cls: 0.0544, s2.acc: 93.1469, s2.loss_bbox: 0.0552, loss: 0.6980
2021-10-03 16:58:52,534 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-10-03 17:04:38,533 - mmdet - INFO - Evaluating bbox...
2021-10-03 17:05:05,051 - mmdet - INFO - Exp name: final1.py
2021-10-03 17:05:05,051 - mmdet - INFO - Epoch(val) [5][4883]	bbox_mAP: 0.3210, bbox_mAP_50: 0.5030, bbox_mAP_75: 0.3470, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.0930, bbox_mAP_l: 0.3780, bbox_mAP_copypaste: 0.321 0.503 0.347 0.007 0.093 0.378
